{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "dist/main.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "QingButton",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultArray"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "canSelect",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "disableSelectedStyle",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "btnStyle",
              "type": {
                "text": "QingButtonStyle"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "buttonElement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "import(\"lit-html\").TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleClick",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "QingButton",
          "declaration": {
            "name": "QingButton",
            "module": "dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "QingButton",
            "module": "dist/main.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/main.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "QingButton"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "QingButton",
          "declaration": {
            "name": "QingButton",
            "module": "dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "QingButton",
            "module": "dist/main.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/main.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ExampleApp",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "handleFocusClick"
            },
            {
              "kind": "method",
              "name": "switchThemes"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "module": "/node_modules/lit/index.js"
          },
          "tagName": "example-app",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ExampleApp",
            "module": "demo/main.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "example-app",
          "declaration": {
            "name": "ExampleApp",
            "module": "demo/main.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/post-public-build.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/main.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "QingButton",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "CSSResultArray"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "canSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disableSelectedStyle",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "btnStyle",
              "type": {
                "text": "QingButtonStyle"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "buttonElement",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "click",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "QingButton",
          "declaration": {
            "name": "QingButton",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "QingButton",
            "module": "src/main.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/public/main.e1944d80.js",
      "declarations": [
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "t"
            },
            {
              "name": "e"
            },
            {
              "name": "s",
              "default": "null"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "t"
        },
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "t"
            },
            {
              "name": "s"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "at",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "handleFocusClick"
            },
            {
              "kind": "method",
              "name": "switchThemes"
            }
          ],
          "superclass": {
            "name": "st",
            "module": "demo/public/main.e1944d80.js"
          },
          "tagName": "example-app",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "t",
          "declaration": {
            "name": "e",
            "module": "demo/public/main.e1944d80.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "t",
          "declaration": {
            "name": "e",
            "module": "demo/public/main.e1944d80.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "example-app",
          "declaration": {
            "name": "at",
            "module": "demo/public/main.e1944d80.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/aggregate-error/index.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Create an error from multiple errors.",
          "name": "AggregateError",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "'AggregateError'"
              }
            },
            {
              "kind": "method",
              "name": "[Symbol.iterator]",
              "return": {
                "type": {
                  "text": "IterableIterator<T>"
                }
              }
            }
          ],
          "superclass": {
            "name": "Error",
            "module": "demo/node_modules/aggregate-error/index.d.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AggregateError",
            "module": "demo/node_modules/aggregate-error/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/aggregate-error/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/ansi-styles/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/array-union/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "arrayUnion",
          "return": {
            "type": {
              "text": "ArgumentsType"
            }
          },
          "parameters": [
            {
              "name": "arguments",
              "type": {
                "text": "readonly ArgumentsType[]"
              }
            }
          ],
          "description": "Create an array of unique values, in order, from the input arrays."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "arrayUnion",
            "module": "demo/node_modules/array-union/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/array-union/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/arrify/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/balanced-match/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/brace-expansion/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/braces/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/buffer-from/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/builtin-modules/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "builtinModules",
          "type": {
            "text": "readonly string[]"
          },
          "description": "List of the Node.js builtin modules."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "builtinModules",
            "module": "demo/node_modules/builtin-modules/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/builtin-modules/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/builtin-modules/static.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "builtinModulesStatic",
          "type": {
            "text": "readonly string[]"
          },
          "description": "Static list of the Node.js builtin modules."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "builtinModulesStatic",
            "module": "demo/node_modules/builtin-modules/static.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/builtin-modules/static.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/camelcase/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "camelcase",
          "type": {
            "text": "{\n\t/**\n\tConvert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`.\n\n\t@param input - String to convert to camel case.\n\n\t@example\n\t```\n\timport camelCase = require('camelcase');\n\n\tcamelCase('foo-bar');\n\t//=> 'fooBar'\n\n\tcamelCase('foo_bar');\n\t//=> 'fooBar'\n\n\tcamelCase('Foo-Bar');\n\t//=> 'fooBar'\n\n\tcamelCase('Foo-Bar', {pascalCase: true});\n\t//=> 'FooBar'\n\n\tcamelCase('--foo.bar', {pascalCase: false});\n\t//=> 'fooBar'\n\n\tcamelCase('foo bar');\n\t//=> 'fooBar'\n\n\tconsole.log(process.argv[3]);\n\t//=> '--foo-bar'\n\tcamelCase(process.argv[3]);\n\t//=> 'fooBar'\n\n\tcamelCase(['foo', 'bar']);\n\t//=> 'fooBar'\n\n\tcamelCase(['__foo__', '--bar'], {pascalCase: true});\n\t//=> 'FooBar'\n\t```\n\t*/\n\t(input: string | ReadonlyArray<string>, options?: camelcase.Options): string;\n\n\t// TODO: Remove this for the next major release, refactor the whole definition to:\n\t// declare function camelcase(\n\t// \tinput: string | ReadonlyArray<string>,\n\t// \toptions?: camelcase.Options\n\t// ): string;\n\t// export = camelcase;\n\tdefault: typeof camelcase;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "camelcase",
            "module": "demo/node_modules/camelcase/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/camelcase/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/camelcase-keys/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "camelcaseKeys",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "input",
              "type": {
                "text": "T"
              },
              "description": "Object or array of objects to camel-case."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "camelcaseKeys.Options"
              }
            }
          ],
          "description": "Convert object keys to camel case using [`camelcase`](https://github.com/sindresorhus/camelcase)."
        },
        {
          "kind": "function",
          "name": "camelcaseKeys",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "input",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "camelcaseKeys.Options"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "camelcaseKeys",
            "module": "demo/node_modules/camelcase-keys/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/camelcase-keys/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/chalk/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/chalk/templates.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/clean-stack/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "cleanStack",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "stack",
              "type": {
                "text": "string"
              },
              "description": "The `stack` property of an `Error`."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "cleanStack.Options"
              }
            }
          ],
          "description": "Clean up error stack traces. Removes the mostly unhelpful internal Node.js entries."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "cleanStack",
            "module": "demo/node_modules/clean-stack/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/clean-stack/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/color-convert/conversions.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/color-convert/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/color-convert/route.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/color-name/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/color-name/test.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/commander/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/commondir/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/concat-map/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/decamelize/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/decamelize-keys/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/deepmerge/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "deepmerge",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "x",
              "type": {
                "text": "Partial<T>"
              }
            },
            {
              "name": "y",
              "type": {
                "text": "Partial<T>"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "deepmerge.Options"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "deepmerge",
          "return": {
            "type": {
              "text": "T1 & T2"
            }
          },
          "parameters": [
            {
              "name": "x",
              "type": {
                "text": "Partial<T1>"
              }
            },
            {
              "name": "y",
              "type": {
                "text": "Partial<T2>"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "deepmerge.Options"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "all",
          "return": {
            "type": {
              "text": "object"
            }
          },
          "parameters": [
            {
              "name": "objects",
              "type": {
                "text": "object[]"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Options"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "all",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "objects",
              "type": {
                "text": "Partial<T>[]"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Options"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "all",
          "declaration": {
            "name": "all",
            "module": "demo/node_modules/deepmerge/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "all",
          "declaration": {
            "name": "all",
            "module": "demo/node_modules/deepmerge/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "deepmerge",
            "module": "demo/node_modules/deepmerge/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/deepmerge/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/del/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "del",
          "type": {
            "text": "{\n\t/**\n\tDelete files and directories using glob patterns.\n\n\tNote that glob patterns can only contain forward-slashes, not backward-slashes. Windows file paths can use backward-slashes as long as the path does not contain any glob-like characters, otherwise use `path.posix.join()` instead of `path.join()`.\n\n\t@param patterns - See the supported [glob patterns](https://github.com/sindresorhus/globby#globbing-patterns).\n\t- [Pattern examples with expected matches](https://github.com/sindresorhus/multimatch/blob/master/test/test.js)\n\t- [Quick globbing pattern overview](https://github.com/sindresorhus/multimatch#globbing-patterns)\n\t@param options - You can specify any of the [`globby` options](https://github.com/sindresorhus/globby#options) in addition to the `del` options. In contrast to the `globby` defaults, `expandDirectories`, `onlyFiles`, and `followSymbolicLinks` are `false` by default.\n\t@returns The deleted paths.\n\n\t@example\n\t```\n\timport del = require('del');\n\n\t(async () => {\n\t\tconst deletedPaths = await del(['temp/*.js', '!temp/unicorn.js']);\n\n\t\tconsole.log('Deleted files and directories:\\n', deletedPaths.join('\\n'));\n\t})();\n\t```\n\t*/\n\t(\n\t\tpatterns: string | readonly string[],\n\t\toptions?: del.Options\n\t): Promise<string[]>;\n\n\t/**\n\tSynchronously delete files and directories using glob patterns.\n\n\tNote that glob patterns can only contain forward-slashes, not backward-slashes. Windows file paths can use backward-slashes as long as the path does not contain any glob-like characters, otherwise use `path.posix.join()` instead of `path.join()`.\n\n\t@param patterns - See the supported [glob patterns](https://github.com/sindresorhus/globby#globbing-patterns).\n\t- [Pattern examples with expected matches](https://github.com/sindresorhus/multimatch/blob/master/test/test.js)\n\t- [Quick globbing pattern overview](https://github.com/sindresorhus/multimatch#globbing-patterns)\n\t@param options - You can specify any of the [`globby` options](https://github.com/sindresorhus/globby#options) in addition to the `del` options. In contrast to the `globby` defaults, `expandDirectories`, `onlyFiles`, and `followSymbolicLinks` are `false` by default.\n\t@returns The deleted paths.\n\t*/\n\tsync(\n\t\tpatterns: string | readonly string[],\n\t\toptions?: del.Options\n\t): string[];\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "del",
            "module": "demo/node_modules/del/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/del/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/del-cli/cli.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/dir-glob/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/error-ex/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/escape-string-regexp/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fastq/bench.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fastq/example.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fastq/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "fastq",
          "return": {
            "type": {
              "text": "fastq.queue<T, R>"
            }
          },
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "C"
              }
            },
            {
              "name": "worker",
              "type": {
                "text": "fastq.worker<C, T, R>"
              }
            },
            {
              "name": "concurrency",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "fastq",
          "return": {
            "type": {
              "text": "fastq.queue<T, R>"
            }
          },
          "parameters": [
            {
              "name": "worker",
              "type": {
                "text": "fastq.worker<C, T, R>"
              }
            },
            {
              "name": "concurrency",
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "fastq",
            "module": "demo/node_modules/fastq/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fastq/queue.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fill-range/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/find-up/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "findUp",
          "type": {
            "text": "{\n\t/**\n\tFind a file or directory by walking up parent directories.\n\n\t@param name - Name of the file or directory to find. Can be multiple.\n\t@returns The first path found (by respecting the order of `name`s) or `undefined` if none could be found.\n\n\t@example\n\t```\n\t// /\n\t// └── Users\n\t//     └── sindresorhus\n\t//         ├── unicorn.png\n\t//         └── foo\n\t//             └── bar\n\t//                 ├── baz\n\t//                 └── example.js\n\n\t// example.js\n\timport findUp = require('find-up');\n\n\t(async () => {\n\t\tconsole.log(await findUp('unicorn.png'));\n\t\t//=> '/Users/sindresorhus/unicorn.png'\n\n\t\tconsole.log(await findUp(['rainbow.png', 'unicorn.png']));\n\t\t//=> '/Users/sindresorhus/unicorn.png'\n\t})();\n\t```\n\t*/\n\t(name: string | string[], options?: findUp.Options): Promise<string | undefined>;\n\n\t/**\n\tFind a file or directory by walking up parent directories.\n\n\t@param matcher - Called for each directory in the search. Return a path or `findUp.stop` to stop the search.\n\t@returns The first path found or `undefined` if none could be found.\n\n\t@example\n\t```\n\timport path = require('path');\n\timport findUp = require('find-up');\n\n\t(async () => {\n\t\tconsole.log(await findUp(async directory => {\n\t\t\tconst hasUnicorns = await findUp.exists(path.join(directory, 'unicorn.png'));\n\t\t\treturn hasUnicorns && directory;\n\t\t}, {type: 'directory'}));\n\t\t//=> '/Users/sindresorhus'\n\t})();\n\t```\n\t*/\n\t(matcher: (directory: string) => (findUp.Match | Promise<findUp.Match>), options?: findUp.Options): Promise<string | undefined>;\n\n\tsync: {\n\t\t/**\n\t\tSynchronously find a file or directory by walking up parent directories.\n\n\t\t@param name - Name of the file or directory to find. Can be multiple.\n\t\t@returns The first path found (by respecting the order of `name`s) or `undefined` if none could be found.\n\t\t*/\n\t\t(name: string | string[], options?: findUp.Options): string | undefined;\n\n\t\t/**\n\t\tSynchronously find a file or directory by walking up parent directories.\n\n\t\t@param matcher - Called for each directory in the search. Return a path or `findUp.stop` to stop the search.\n\t\t@returns The first path found or `undefined` if none could be found.\n\n\t\t@example\n\t\t```\n\t\timport path = require('path');\n\t\timport findUp = require('find-up');\n\n\t\tconsole.log(findUp.sync(directory => {\n\t\t\tconst hasUnicorns = findUp.sync.exists(path.join(directory, 'unicorn.png'));\n\t\t\treturn hasUnicorns && directory;\n\t\t}, {type: 'directory'}));\n\t\t//=> '/Users/sindresorhus'\n\t\t```\n\t\t*/\n\t\t(matcher: (directory: string) => findUp.Match, options?: findUp.Options): string | undefined;\n\n\t\t/**\n\t\tSynchronously check if a path exists.\n\n\t\t@param path - Path to the file or directory.\n\t\t@returns Whether the path exists.\n\n\t\t@example\n\t\t```\n\t\timport findUp = require('find-up');\n\n\t\tconsole.log(findUp.sync.exists('/Users/sindresorhus/unicorn.png'));\n\t\t//=> true\n\t\t```\n\t\t*/\n\t\texists(path: string): boolean;\n\t}\n\n\t/**\n\tCheck if a path exists.\n\n\t@param path - Path to a file or directory.\n\t@returns Whether the path exists.\n\n\t@example\n\t```\n\timport findUp = require('find-up');\n\n\t(async () => {\n\t\tconsole.log(await findUp.exists('/Users/sindresorhus/unicorn.png'));\n\t\t//=> true\n\t})();\n\t```\n\t*/\n\texists(path: string): Promise<boolean>;\n\n\t/**\n\tReturn this in a `matcher` function to stop the search and force `findUp` to immediately return `undefined`.\n\t*/\n\treadonly stop: findUp.StopSymbol;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "findUp",
            "module": "demo/node_modules/find-up/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/find-up/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fs.realpath/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fs.realpath/old.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fsevents/fsevents.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "watch",
          "return": {
            "type": {
              "text": "() => Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "handler",
              "type": {
                "text": "WatchHandler"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "watch",
          "return": {
            "type": {
              "text": "() => Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "since",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "handler",
              "type": {
                "text": "WatchHandler"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getInfo",
          "return": {
            "type": {
              "text": "Info"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "flags",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "constants",
          "type": {
            "text": "{\n  None: 0x00000000;\n  MustScanSubDirs: 0x00000001;\n  UserDropped: 0x00000002;\n  KernelDropped: 0x00000004;\n  EventIdsWrapped: 0x00000008;\n  HistoryDone: 0x00000010;\n  RootChanged: 0x00000020;\n  Mount: 0x00000040;\n  Unmount: 0x00000080;\n  ItemCreated: 0x00000100;\n  ItemRemoved: 0x00000200;\n  ItemInodeMetaMod: 0x00000400;\n  ItemRenamed: 0x00000800;\n  ItemModified: 0x00001000;\n  ItemFinderInfoMod: 0x00002000;\n  ItemChangeOwner: 0x00004000;\n  ItemXattrMod: 0x00008000;\n  ItemIsFile: 0x00010000;\n  ItemIsDir: 0x00020000;\n  ItemIsSymlink: 0x00040000;\n  ItemIsHardlink: 0x00100000;\n  ItemIsLastHardlink: 0x00200000;\n  OwnEvent: 0x00080000;\n  ItemCloned: 0x00400000;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "demo/node_modules/fsevents/fsevents.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "demo/node_modules/fsevents/fsevents.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getInfo",
          "declaration": {
            "name": "getInfo",
            "module": "demo/node_modules/fsevents/fsevents.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "constants",
          "declaration": {
            "name": "constants",
            "module": "demo/node_modules/fsevents/fsevents.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fsevents/fsevents.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/function-bind/implementation.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/function-bind/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/glob/common.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/glob/glob.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/glob/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/glob-parent/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/globby/gitignore.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/globby/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "globby",
          "type": {
            "text": "{\n\t/**\n\tFind files and directories using glob patterns.\n\n\tNote that glob patterns can only contain forward-slashes, not backward-slashes, so if you want to construct a glob pattern from path components, you need to use `path.posix.join()` instead of `path.join()`.\n\n\t@param patterns - See the supported [glob patterns](https://github.com/sindresorhus/globby#globbing-patterns).\n\t@param options - See the [`fast-glob` options](https://github.com/mrmlnc/fast-glob#options-1) in addition to the ones in this package.\n\t@returns The matching paths.\n\n\t@example\n\t```\n\timport globby = require('globby');\n\n\t(async () => {\n\t\tconst paths = await globby(['*', '!cake']);\n\n\t\tconsole.log(paths);\n\t\t//=> ['unicorn', 'rainbow']\n\t})();\n\t```\n\t*/\n\t(\n\t\tpatterns: string | readonly string[],\n\t\toptions?: globby.GlobbyOptions\n\t): Promise<string[]>;\n\n\t/**\n\tFind files and directories using glob patterns.\n\n\tNote that glob patterns can only contain forward-slashes, not backward-slashes, so if you want to construct a glob pattern from path components, you need to use `path.posix.join()` instead of `path.join()`.\n\n\t@param patterns - See the supported [glob patterns](https://github.com/sindresorhus/globby#globbing-patterns).\n\t@param options - See the [`fast-glob` options](https://github.com/mrmlnc/fast-glob#options-1) in addition to the ones in this package.\n\t@returns The matching paths.\n\t*/\n\tsync(\n\t\tpatterns: string | readonly string[],\n\t\toptions?: globby.GlobbyOptions\n\t): string[];\n\n\t/**\n\tFind files and directories using glob patterns.\n\n\tNote that glob patterns can only contain forward-slashes, not backward-slashes, so if you want to construct a glob pattern from path components, you need to use `path.posix.join()` instead of `path.join()`.\n\n\t@param patterns - See the supported [glob patterns](https://github.com/sindresorhus/globby#globbing-patterns).\n\t@param options - See the [`fast-glob` options](https://github.com/mrmlnc/fast-glob#options-1) in addition to the ones in this package.\n\t@returns The stream of matching paths.\n\n\t@example\n\t```\n\timport globby = require('globby');\n\n\t(async () => {\n\t\tfor await (const path of globby.stream('*.tmp')) {\n\t\t\tconsole.log(path);\n\t\t}\n\t})();\n\t```\n\t*/\n\tstream(\n\t\tpatterns: string | readonly string[],\n\t\toptions?: globby.GlobbyOptions\n\t): NodeJS.ReadableStream;\n\n\t/**\n\tNote that you should avoid running the same tasks multiple times as they contain a file system cache. Instead, run this method each time to ensure file system changes are taken into consideration.\n\n\t@param patterns - See the supported [glob patterns](https://github.com/sindresorhus/globby#globbing-patterns).\n\t@param options - See the [`fast-glob` options](https://github.com/mrmlnc/fast-glob#options-1) in addition to the ones in this package.\n\t@returns An object in the format `{pattern: string, options: object}`, which can be passed as arguments to [`fast-glob`](https://github.com/mrmlnc/fast-glob). This is useful for other globbing-related packages.\n\t*/\n\tgenerateGlobTasks(\n\t\tpatterns: string | readonly string[],\n\t\toptions?: globby.GlobbyOptions\n\t): globby.GlobTask[];\n\n\t/**\n\tNote that the options affect the results. If `noext: true` is set, then `+(a|b)` will not be considered a magic pattern. If the pattern has a brace expansion, like `a/{b/c,x/y}`, then that is considered magical, unless `nobrace: true` is set.\n\n\tThis function is backed by [`node-glob`](https://github.com/isaacs/node-glob#globhasmagicpattern-options).\n\n\t@param patterns - See the supported [glob patterns](https://github.com/sindresorhus/globby#globbing-patterns).\n\t@param options - See the [`node-glob` options](https://github.com/isaacs/node-glob#globhasmagicpattern-options).\n\t@returns Whether there are any special glob characters in the `patterns`.\n\t*/\n\thasMagic(\n\t\tpatterns: string | readonly string[],\n\t\toptions?: NodeGlobOptions\n\t): boolean;\n\n\treadonly gitignore: Gitignore;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "globby",
            "module": "demo/node_modules/globby/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/globby/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/globby/stream-utils.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/graceful-fs/clone.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/graceful-fs/graceful-fs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/graceful-fs/legacy-streams.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/graceful-fs/polyfills.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/hard-rejection/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "hardRejection",
          "type": {
            "text": "{\n\t/**\n\tMake unhandled promise rejections fail hard right away instead of the default [silent fail](https://gist.github.com/benjamingr/0237932cee84712951a2).\n\n\t@param log - Custom logging function to print the rejected promise. Receives the error stack. Default: `console.error`.\n\t*/\n\t(log?: (stack?: string) => void): void;\n\n\t// TODO: Remove this for the next major release, refactor the whole definition to:\n\t// declare function hardRejection(log?: (stack?: string) => void): void;\n\t// export = hardRejection;\n\tdefault: typeof hardRejection;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "hardRejection",
            "module": "demo/node_modules/hard-rejection/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/hard-rejection/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/hard-rejection/register.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/has-flag/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "hasFlag",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "flag",
              "type": {
                "text": "string"
              },
              "description": "CLI flag to look for. The `--` prefix is optional."
            },
            {
              "name": "argv",
              "optional": true,
              "type": {
                "text": "string[]"
              },
              "description": "CLI arguments. Default: `process.argv`."
            }
          ],
          "description": "Check if [`argv`](https://nodejs.org/docs/latest/api/process.html#process_process_argv) has a specific flag."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "hasFlag",
            "module": "demo/node_modules/has-flag/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/has-flag/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/hosted-git-info/git-host-info.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/hosted-git-info/git-host.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/hosted-git-info/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/ignore/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "ignore",
          "return": {
            "type": {
              "text": "Ignore"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Options"
              }
            }
          ],
          "description": "Creates new ignore manager."
        },
        {
          "kind": "function",
          "name": "isPathValid",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "pathname",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isPathValid",
          "declaration": {
            "name": "isPathValid",
            "module": "demo/node_modules/ignore/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ignore",
            "module": "demo/node_modules/ignore/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/ignore/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/ignore/legacy.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/indent-string/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "indentString",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "string",
              "type": {
                "text": "string"
              },
              "description": "The string to indent."
            },
            {
              "name": "count",
              "optional": true,
              "type": {
                "text": "number"
              },
              "description": "How many times you want `options.indent` repeated. Default: `1`."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "indentString.Options"
              }
            }
          ],
          "description": "Indent each line in a string."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "indentString",
            "module": "demo/node_modules/indent-string/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/indent-string/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/inflight/inflight.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/inherits/inherits.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/inherits/inherits_browser.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-arrayish/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-core-module/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-extglob/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-glob/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-module/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-number/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-path-cwd/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isPathCwd",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Check if a path is the [current working directory](https://en.wikipedia.org/wiki/Working_directory)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "isPathCwd",
            "module": "demo/node_modules/is-path-cwd/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-path-cwd/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-path-inside/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isPathInside",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "childPath",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "parentPath",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Check if a path is inside another path.\n\nNote that relative paths are resolved against `process.cwd()` to make them absolute.\n\n_Important:_ This package is meant for use with path manipulation. It does not check if the paths exist nor does it resolve symlinks. You should not use this as a security mechanism to guard against access to certain places on the file system."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "isPathInside",
            "module": "demo/node_modules/is-path-inside/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-path-inside/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-plain-obj/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/js-tokens/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/json-parse-even-better-errors/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/kind-of/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/locate-path/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "locatePath",
          "type": {
            "text": "{\n\t/**\n\tGet the first path that exists on disk of multiple paths.\n\n\t@param paths - Paths to check.\n\t@returns The first path that exists or `undefined` if none exists.\n\n\t@example\n\t```\n\timport locatePath = require('locate-path');\n\n\tconst files = [\n\t\t'unicorn.png',\n\t\t'rainbow.png', // Only this one actually exists on disk\n\t\t'pony.png'\n\t];\n\n\t(async () => {\n\t\tconsole(await locatePath(files));\n\t\t//=> 'rainbow'\n\t})();\n\t```\n\t*/\n\t(paths: Iterable<string>, options?: locatePath.AsyncOptions): Promise<\n\t\tstring | undefined\n\t>;\n\n\t/**\n\tSynchronously get the first path that exists on disk of multiple paths.\n\n\t@param paths - Paths to check.\n\t@returns The first path that exists or `undefined` if none exists.\n\t*/\n\tsync(\n\t\tpaths: Iterable<string>,\n\t\toptions?: locatePath.Options\n\t): string | undefined;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "locatePath",
            "module": "demo/node_modules/locate-path/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/locate-path/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/magic-string/index.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourceMap",
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "file",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "sources",
              "type": {
                "text": "string[]"
              }
            },
            {
              "kind": "field",
              "name": "sourcesContent",
              "type": {
                "text": "string[]"
              }
            },
            {
              "kind": "field",
              "name": "names",
              "type": {
                "text": "string[]"
              }
            },
            {
              "kind": "field",
              "name": "mappings",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "toUrl",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "Bundle",
          "members": [
            {
              "kind": "method",
              "name": "addSource",
              "return": {
                "type": {
                  "text": "Bundle"
                }
              },
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "MagicString | { filename?: string, content: MagicString }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "append",
              "return": {
                "type": {
                  "text": "Bundle"
                }
              },
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "BundleOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clone",
              "return": {
                "type": {
                  "text": "Bundle"
                }
              }
            },
            {
              "kind": "method",
              "name": "generateMap",
              "return": {
                "type": {
                  "text": "SourceMap"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<SourceMapOptions>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "generateDecodedMap",
              "return": {
                "type": {
                  "text": "DecodedSourceMap"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<SourceMapOptions>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getIndentString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "indent",
              "return": {
                "type": {
                  "text": "Bundle"
                }
              },
              "parameters": [
                {
                  "name": "indentStr",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "indentExclusionRanges",
              "type": {
                "text": "ExclusionRange | Array<ExclusionRange>"
              }
            },
            {
              "kind": "method",
              "name": "prepend",
              "return": {
                "type": {
                  "text": "Bundle"
                }
              },
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "trimLines",
              "return": {
                "type": {
                  "text": "Bundle"
                }
              }
            },
            {
              "kind": "method",
              "name": "trim",
              "return": {
                "type": {
                  "text": "Bundle"
                }
              },
              "parameters": [
                {
                  "name": "charType",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trimStart",
              "return": {
                "type": {
                  "text": "Bundle"
                }
              },
              "parameters": [
                {
                  "name": "charType",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trimEnd",
              "return": {
                "type": {
                  "text": "Bundle"
                }
              },
              "parameters": [
                {
                  "name": "charType",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isEmpty",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "length",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "MagicString",
          "members": [
            {
              "kind": "method",
              "name": "addSourcemapLocation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "char",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "append",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "appendLeft",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "appendRight",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clone",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              }
            },
            {
              "kind": "method",
              "name": "generateMap",
              "return": {
                "type": {
                  "text": "SourceMap"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<SourceMapOptions>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "generateDecodedMap",
              "return": {
                "type": {
                  "text": "DecodedSourceMap"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<SourceMapOptions>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getIndentString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "indent",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "IndentOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "indent",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "indentStr",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "IndentOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "indentExclusionRanges",
              "type": {
                "text": "ExclusionRange | Array<ExclusionRange>"
              }
            },
            {
              "kind": "method",
              "name": "move",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "overwrite",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | OverwriteOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prepend",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependLeft",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependRight",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "remove",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "slice",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "snip",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trim",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "charType",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trimStart",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "charType",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trimEnd",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              },
              "parameters": [
                {
                  "name": "charType",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trimLines",
              "return": {
                "type": {
                  "text": "MagicString"
                }
              }
            },
            {
              "kind": "method",
              "name": "lastChar",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "lastLine",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "isEmpty",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "length",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "original",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceMap",
          "declaration": {
            "name": "SourceMap",
            "module": "demo/node_modules/magic-string/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Bundle",
          "declaration": {
            "name": "Bundle",
            "module": "demo/node_modules/magic-string/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MagicString",
            "module": "demo/node_modules/magic-string/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/map-obj/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/meow/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "meow",
          "return": {
            "type": {
              "text": "meow.Result<Flags>"
            }
          },
          "parameters": [
            {
              "name": "helpMessage",
              "type": {
                "text": "string"
              },
              "description": "Shortcut for the `help` option."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "meow.Options<Flags>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "meow",
          "return": {
            "type": {
              "text": "meow.Result<Flags>"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "meow.Options<Flags>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meow",
            "module": "demo/node_modules/meow/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/meow/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/merge-stream/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/merge2/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/micromatch/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/min-indent/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/minimatch/minimatch.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/minimist-options/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "buildOptions",
          "return": {
            "type": {
              "text": "MinimistOptions"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Options"
              }
            }
          ],
          "description": "Write options for [minimist](https://npmjs.org/package/minimist) in a comfortable way. Support string, boolean, number and array options."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "buildOptions",
            "module": "demo/node_modules/minimist-options/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/minimist-options/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/p-limit/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "pLimit",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "concurrency",
              "type": {
                "text": "number"
              },
              "description": "Concurrency limit. Minimum: `1`."
            }
          ],
          "description": "Run multiple promise-returning & async functions with limited concurrency."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "pLimit",
            "module": "demo/node_modules/p-limit/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/p-limit/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/once/once.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/p-locate/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "pLocate",
          "type": {
            "text": "{\n\t/**\n\tGet the first fulfilled promise that satisfies the provided testing function.\n\n\t@param input - An iterable of promises/values to test.\n\t@param tester - This function will receive resolved values from `input` and is expected to return a `Promise<boolean>` or `boolean`.\n\t@returns A `Promise` that is fulfilled when `tester` resolves to `true` or the iterable is done, or rejects if any of the promises reject. The fulfilled value is the current iterable value or `undefined` if `tester` never resolved to `true`.\n\n\t@example\n\t```\n\timport pathExists = require('path-exists');\n\timport pLocate = require('p-locate');\n\n\tconst files = [\n\t\t'unicorn.png',\n\t\t'rainbow.png', // Only this one actually exists on disk\n\t\t'pony.png'\n\t];\n\n\t(async () => {\n\t\tconst foundPath = await pLocate(files, file => pathExists(file));\n\n\t\tconsole.log(foundPath);\n\t\t//=> 'rainbow'\n\t})();\n\t```\n\t*/\n\t<ValueType>(\n\t\tinput: Iterable<PromiseLike<ValueType> | ValueType>,\n\t\ttester: (element: ValueType) => PromiseLike<boolean> | boolean,\n\t\toptions?: pLocate.Options\n\t): Promise<ValueType | undefined>;\n\n\t// TODO: Remove this for the next major release, refactor the whole definition to:\n\t// declare function pLocate<ValueType>(\n\t// \tinput: Iterable<PromiseLike<ValueType> | ValueType>,\n\t// \ttester: (element: ValueType) => PromiseLike<boolean> | boolean,\n\t// \toptions?: pLocate.Options\n\t// ): Promise<ValueType | undefined>;\n\t// export = pLocate;\n\tdefault: typeof pLocate;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "pLocate",
            "module": "demo/node_modules/p-locate/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/p-locate/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/p-map/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "pMap",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "input",
              "type": {
                "text": "Iterable<Element>"
              },
              "description": "Iterated over concurrently in the `mapper` function."
            },
            {
              "name": "mapper",
              "type": {
                "text": "pMap.Mapper<Element, NewElement>"
              },
              "description": "Function which is called for every item in `input`. Expected to return a `Promise` or value."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "pMap.Options"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "pMap",
            "module": "demo/node_modules/p-map/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/p-map/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/p-try/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "pTry",
          "type": {
            "text": "{\n\t/**\n\tStart a promise chain.\n\n\t@param fn - The function to run to start the promise chain.\n\t@param arguments - Arguments to pass to `fn`.\n\t@returns The value of calling `fn(...arguments)`. If the function throws an error, the returned `Promise` will be rejected with that error.\n\n\t@example\n\t```\n\timport pTry = require('p-try');\n\n\t(async () => {\n\t\ttry {\n\t\t\tconst value = await pTry(() => {\n\t\t\t\treturn synchronousFunctionThatMightThrow();\n\t\t\t});\n\t\t\tconsole.log(value);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t})();\n\t```\n\t*/\n\t<ValueType, ArgumentsType extends unknown[]>(\n\t\tfn: (...arguments: ArgumentsType) => PromiseLike<ValueType> | ValueType,\n\t\t...arguments: ArgumentsType\n\t): Promise<ValueType>;\n\n\t// TODO: remove this in the next major version, refactor the whole definition to:\n\t// declare function pTry<ValueType, ArgumentsType extends unknown[]>(\n\t//\tfn: (...arguments: ArgumentsType) => PromiseLike<ValueType> | ValueType,\n\t//\t...arguments: ArgumentsType\n\t// ): Promise<ValueType>;\n\t// export = pTry;\n\tdefault: typeof pTry;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "pTry",
            "module": "demo/node_modules/p-try/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/p-try/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/parse-json/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/path-exists/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "pathExists",
          "type": {
            "text": "{\n\t/**\n\tCheck if a path exists.\n\n\t@returns Whether the path exists.\n\n\t@example\n\t```\n\t// foo.ts\n\timport pathExists = require('path-exists');\n\n\t(async () => {\n\t\tconsole.log(await pathExists('foo.ts'));\n\t\t//=> true\n\t})();\n\t```\n\t*/\n\t(path: string): Promise<boolean>;\n\n\t/**\n\tSynchronously check if a path exists.\n\n\t@returns Whether the path exists.\n\t*/\n\tsync(path: string): boolean;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "pathExists",
            "module": "demo/node_modules/path-exists/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/path-exists/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/path-is-absolute/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/path-parse/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/path-parse/test.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/path-type/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isFile",
          "type": {
            "text": "PathTypeFunction"
          },
          "description": "Check whether the passed `path` is a file.",
          "parameters": [
            {
              "description": "The path to check.",
              "name": "path"
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "variable",
          "name": "isDirectory",
          "type": {
            "text": "PathTypeFunction"
          },
          "description": "Check whether the passed `path` is a directory.",
          "parameters": [
            {
              "description": "The path to check.",
              "name": "path"
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "variable",
          "name": "isSymlink",
          "type": {
            "text": "PathTypeFunction"
          },
          "description": "Check whether the passed `path` is a symlink.",
          "parameters": [
            {
              "description": "The path to check.",
              "name": "path"
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "variable",
          "name": "isFileSync",
          "type": {
            "text": "PathTypeSyncFunction"
          },
          "description": "Synchronously check whether the passed `path` is a file.",
          "parameters": [
            {
              "description": "The path to check.",
              "name": "path"
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "variable",
          "name": "isDirectorySync",
          "type": {
            "text": "PathTypeSyncFunction"
          },
          "description": "Synchronously check whether the passed `path` is a directory.",
          "parameters": [
            {
              "description": "The path to check.",
              "name": "path"
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "variable",
          "name": "isSymlinkSync",
          "type": {
            "text": "PathTypeSyncFunction"
          },
          "description": "Synchronously check whether the passed `path` is a symlink.",
          "parameters": [
            {
              "description": "The path to check.",
              "name": "path"
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isFile",
          "declaration": {
            "name": "isFile",
            "module": "demo/node_modules/path-type/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDirectory",
          "declaration": {
            "name": "isDirectory",
            "module": "demo/node_modules/path-type/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSymlink",
          "declaration": {
            "name": "isSymlink",
            "module": "demo/node_modules/path-type/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isFileSync",
          "declaration": {
            "name": "isFileSync",
            "module": "demo/node_modules/path-type/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDirectorySync",
          "declaration": {
            "name": "isDirectorySync",
            "module": "demo/node_modules/path-type/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSymlinkSync",
          "declaration": {
            "name": "isSymlinkSync",
            "module": "demo/node_modules/path-type/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/path-type/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/picomatch/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/queue-microtask/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "queueMicrotask",
          "type": {
            "text": "(cb: () => void) => void"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "queueMicrotask",
            "module": "demo/node_modules/queue-microtask/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/queue-microtask/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/quick-lru/index.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "QuickLRU",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "description": "The stored item count."
            },
            {
              "kind": "method",
              "name": "[Symbol.iterator]",
              "return": {
                "type": {
                  "text": "IterableIterator<[KeyType, ValueType]>"
                }
              }
            },
            {
              "kind": "method",
              "name": "set",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "KeyType"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "ValueType"
                  }
                }
              ],
              "description": "Set an item."
            },
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "KeyType"
                  }
                }
              ],
              "description": "Get an item."
            },
            {
              "kind": "method",
              "name": "has",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "KeyType"
                  }
                }
              ],
              "description": "Check if an item exists."
            },
            {
              "kind": "method",
              "name": "peek",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "KeyType"
                  }
                }
              ],
              "description": "Get an item without marking it as recently used."
            },
            {
              "kind": "method",
              "name": "delete",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "KeyType"
                  }
                }
              ],
              "description": "Delete an item."
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Delete all items."
            },
            {
              "kind": "method",
              "name": "keys",
              "return": {
                "type": {
                  "text": "IterableIterator<KeyType>"
                }
              },
              "description": "Iterable for all the keys."
            },
            {
              "kind": "method",
              "name": "values",
              "return": {
                "type": {
                  "text": "IterableIterator<ValueType>"
                }
              },
              "description": "Iterable for all the values."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "QuickLRU",
            "module": "demo/node_modules/quick-lru/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/quick-lru/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/randombytes/browser.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/randombytes/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/randombytes/test.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "readPkg",
          "type": {
            "text": "{\n\t/**\n\t@returns The parsed JSON.\n\n\t@example\n\t```\n\timport readPkg = require('read-pkg');\n\n\t(async () => {\n\t\tconsole.log(await readPkg());\n\t\t//=> {name: 'read-pkg', …}\n\n\t\tconsole.log(await readPkg({cwd: 'some-other-directory'});\n\t\t//=> {name: 'unicorn', …}\n\t})();\n\t```\n\t*/\n\t(options?: readPkg.NormalizeOptions): Promise<readPkg.NormalizedPackageJson>;\n\t(options: readPkg.Options): Promise<readPkg.PackageJson>;\n\n\t/**\n\t@returns The parsed JSON.\n\n\t@example\n\t```\n\timport readPkg = require('read-pkg');\n\n\tconsole.log(readPkg.sync());\n\t//=> {name: 'read-pkg', …}\n\n\tconsole.log(readPkg.sync({cwd: 'some-other-directory'});\n\t//=> {name: 'unicorn', …}\n\t```\n\t*/\n\tsync(options?: readPkg.NormalizeOptions): readPkg.NormalizedPackageJson;\n\tsync(options: readPkg.Options): readPkg.PackageJson;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "readPkg",
            "module": "demo/node_modules/read-pkg/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "readPkgUp",
          "type": {
            "text": "{\n\t/**\n\tRead the closest `package.json` file.\n\n\t@example\n\t```\n\timport readPkgUp = require('read-pkg-up');\n\n\t(async () => {\n\t\tconsole.log(await readPkgUp());\n\t\t// {\n\t\t// \tpackageJson: {\n\t\t// \t\tname: 'awesome-package',\n\t\t// \t\tversion: '1.0.0',\n\t\t// \t\t…\n\t\t// \t},\n\t\t// \tpath: '/Users/sindresorhus/dev/awesome-package/package.json'\n\t\t// }\n\t})();\n\t```\n\t*/\n\t(options?: readPkgUp.NormalizeOptions): Promise<\n\t\treadPkgUp.NormalizedReadResult | undefined\n\t>;\n\t(options: readPkgUp.Options): Promise<readPkgUp.ReadResult | undefined>;\n\n\t/**\n\tSynchronously read the closest `package.json` file.\n\n\t@example\n\t```\n\timport readPkgUp = require('read-pkg-up');\n\n\tconsole.log(readPkgUp.sync());\n\t// {\n\t// \tpackageJson: {\n\t// \t\tname: 'awesome-package',\n\t// \t\tversion: '1.0.0',\n\t// \t\t…\n\t// \t},\n\t// \tpath: '/Users/sindresorhus/dev/awesome-package/package.json'\n\t// }\n\t```\n\t*/\n\tsync(\n\t\toptions?: readPkgUp.NormalizeOptions\n\t): readPkgUp.NormalizedReadResult | undefined;\n\tsync(options: readPkgUp.Options): readPkgUp.ReadResult | undefined;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "readPkgUp",
            "module": "demo/node_modules/read-pkg-up/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/redent/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "redent",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "string",
              "type": {
                "text": "string"
              },
              "description": "The string to normalize indentation."
            },
            {
              "name": "count",
              "optional": true,
              "type": {
                "text": "number"
              },
              "description": "How many times you want `options.indent` repeated. Default: `0`."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "redent.Options"
              }
            }
          ],
          "description": "[Strip redundant indentation](https://github.com/sindresorhus/strip-indent) and [indent the string](https://github.com/sindresorhus/indent-string)."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "redent",
            "module": "demo/node_modules/redent/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/redent/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/reusify/reusify.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/reusify/test.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rimraf/bin.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rimraf/rimraf.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup-plugin-terser/rollup-plugin-terser.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "terser",
          "return": {
            "type": {
              "text": "Plugin"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Options"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "terser",
          "declaration": {
            "name": "terser",
            "module": "demo/node_modules/rollup-plugin-terser/rollup-plugin-terser.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup-plugin-terser/rollup-plugin-terser.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup-plugin-terser/transform.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/run-parallel/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/safe-buffer/index.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Buffer",
          "members": [
            {
              "kind": "field",
              "name": "length",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "write",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "offset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "length",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "encoding",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "encoding",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toJSON",
              "return": {
                "type": {
                  "text": "{ type: 'Buffer', data: any[] }"
                }
              }
            },
            {
              "kind": "method",
              "name": "equals",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "otherBuffer",
                  "type": {
                    "text": "Buffer"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "compare",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "otherBuffer",
                  "type": {
                    "text": "Buffer"
                  }
                },
                {
                  "name": "targetStart",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "targetEnd",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "sourceStart",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "sourceEnd",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "copy",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "targetBuffer",
                  "type": {
                    "text": "Buffer"
                  }
                },
                {
                  "name": "targetStart",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "sourceStart",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "sourceEnd",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "slice",
              "return": {
                "type": {
                  "text": "Buffer"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeUIntLE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "byteLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeUIntBE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "byteLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeIntLE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "byteLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeIntBE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "byteLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readUIntLE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "byteLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readUIntBE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "byteLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readIntLE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "byteLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readIntBE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "byteLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readUInt8",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readUInt16LE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readUInt16BE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readUInt32LE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readUInt32BE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readInt8",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readInt16LE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readInt16BE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readInt32LE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readInt32BE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readFloatLE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readFloatBE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readDoubleLE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readDoubleBE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "swap16",
              "return": {
                "type": {
                  "text": "Buffer"
                }
              }
            },
            {
              "kind": "method",
              "name": "swap32",
              "return": {
                "type": {
                  "text": "Buffer"
                }
              }
            },
            {
              "kind": "method",
              "name": "swap64",
              "return": {
                "type": {
                  "text": "Buffer"
                }
              }
            },
            {
              "kind": "method",
              "name": "writeUInt8",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeUInt16LE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeUInt16BE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeUInt32LE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeUInt32BE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeInt8",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeInt16LE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeInt16BE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeInt32LE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeInt32BE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeFloatLE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeFloatBE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeDoubleLE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeDoubleBE",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "noAssert",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fill",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "offset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "indexOf",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number | Buffer"
                  }
                },
                {
                  "name": "byteOffset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "encoding",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "lastIndexOf",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number | Buffer"
                  }
                },
                {
                  "name": "byteOffset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "encoding",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "includes",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number | Buffer"
                  }
                },
                {
                  "name": "byteOffset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "encoding",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "prototype",
              "type": {
                "text": "Buffer"
              }
            },
            {
              "kind": "method",
              "name": "from",
              "static": true,
              "return": {
                "type": {
                  "text": "Buffer"
                }
              },
              "parameters": [
                {
                  "name": "array",
                  "type": {
                    "text": "any[]"
                  }
                }
              ],
              "description": "Allocates a new Buffer using an {array} of octets."
            },
            {
              "kind": "method",
              "name": "from",
              "static": true,
              "return": {
                "type": {
                  "text": "Buffer"
                }
              },
              "parameters": [
                {
                  "name": "arrayBuffer",
                  "type": {
                    "text": "ArrayBuffer"
                  },
                  "description": "The .buffer property of a TypedArray or a new ArrayBuffer()"
                },
                {
                  "name": "byteOffset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "length",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "When passed a reference to the .buffer property of a TypedArray instance,\nthe newly created Buffer will share the same allocated memory as the TypedArray.\nThe optional {byteOffset} and {length} arguments specify a memory range\nwithin the {arrayBuffer} that will be shared by the Buffer."
            },
            {
              "kind": "method",
              "name": "from",
              "static": true,
              "return": {
                "type": {
                  "text": "Buffer"
                }
              },
              "parameters": [
                {
                  "name": "buffer",
                  "type": {
                    "text": "Buffer"
                  }
                }
              ],
              "description": "Copies the passed {buffer} data onto a new Buffer instance."
            },
            {
              "kind": "method",
              "name": "from",
              "static": true,
              "return": {
                "type": {
                  "text": "Buffer"
                }
              },
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "encoding",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Creates a new Buffer containing the given JavaScript string {str}.\nIf provided, the {encoding} parameter identifies the character encoding.\nIf not provided, {encoding} defaults to 'utf8'."
            },
            {
              "kind": "method",
              "name": "isBuffer",
              "static": true,
              "return": {
                "type": {
                  "text": "obj is Buffer"
                }
              },
              "parameters": [
                {
                  "name": "obj",
                  "type": {
                    "text": "any"
                  },
                  "description": "object to test."
                }
              ],
              "description": "Returns true if {obj} is a Buffer"
            },
            {
              "kind": "method",
              "name": "isEncoding",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "encoding",
                  "type": {
                    "text": "string"
                  },
                  "description": "string to test."
                }
              ],
              "description": "Returns true if {encoding} is a valid encoding argument.\nValid string encodings in Node 0.12: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'"
            },
            {
              "kind": "method",
              "name": "byteLength",
              "static": true,
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  },
                  "description": "string to test."
                },
                {
                  "name": "encoding",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "encoding used to evaluate (defaults to 'utf8')"
                }
              ],
              "description": "Gives the actual byte length of a string. encoding defaults to 'utf8'.\nThis is not the same as String.prototype.length since that returns the number of characters in a string."
            },
            {
              "kind": "method",
              "name": "concat",
              "static": true,
              "return": {
                "type": {
                  "text": "Buffer"
                }
              },
              "parameters": [
                {
                  "name": "list",
                  "type": {
                    "text": "Buffer[]"
                  },
                  "description": "An array of Buffer objects to concatenate"
                },
                {
                  "name": "totalLength",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "Total length of the buffers when concatenated.\nIf totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly."
                }
              ],
              "description": "Returns a buffer which is the result of concatenating all the buffers in the list together.\n\nIf the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.\nIf the list has exactly one item, then the first item of the list is returned.\nIf the list has more than one item, then a new Buffer is created."
            },
            {
              "kind": "method",
              "name": "compare",
              "static": true,
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "buf1",
                  "type": {
                    "text": "Buffer"
                  }
                },
                {
                  "name": "buf2",
                  "type": {
                    "text": "Buffer"
                  }
                }
              ],
              "description": "The same as buf1.compare(buf2)."
            },
            {
              "kind": "method",
              "name": "alloc",
              "static": true,
              "return": {
                "type": {
                  "text": "Buffer"
                }
              },
              "parameters": [
                {
                  "name": "size",
                  "type": {
                    "text": "number"
                  },
                  "description": "count of octets to allocate."
                },
                {
                  "name": "fill",
                  "optional": true,
                  "type": {
                    "text": "string | Buffer | number"
                  },
                  "description": "if specified, buffer will be initialized by calling buf.fill(fill).\nIf parameter is omitted, buffer will be filled with zeros."
                },
                {
                  "name": "encoding",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "encoding used for call to buf.fill while initalizing"
                }
              ],
              "description": "Allocates a new buffer of {size} octets."
            },
            {
              "kind": "method",
              "name": "allocUnsafe",
              "static": true,
              "return": {
                "type": {
                  "text": "Buffer"
                }
              },
              "parameters": [
                {
                  "name": "size",
                  "type": {
                    "text": "number"
                  },
                  "description": "count of octets to allocate"
                }
              ],
              "description": "Allocates a new buffer of {size} octets, leaving memory not initialized, so the contents\nof the newly created Buffer are unknown and may contain sensitive data."
            },
            {
              "kind": "method",
              "name": "allocUnsafeSlow",
              "static": true,
              "return": {
                "type": {
                  "text": "Buffer"
                }
              },
              "parameters": [
                {
                  "name": "size",
                  "type": {
                    "text": "number"
                  },
                  "description": "count of octets to allocate"
                }
              ],
              "description": "Allocates a new non-pooled buffer of {size} octets, leaving memory not initialized, so the contents\nof the newly created Buffer are unknown and may contain sensitive data."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Buffer",
          "declaration": {
            "name": "Buffer",
            "module": "demo/node_modules/safe-buffer/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/safe-buffer/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/semver/semver.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/serialize-javascript/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/slash/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "slash",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              },
              "description": "A Windows backslash path."
            }
          ],
          "description": "Convert Windows backslash paths to slash paths: `foo\\\\bar` ➔ `foo/bar`.\n\n[Forward-slash paths can be used in Windows](http://superuser.com/a/176395/6877) as long as they're not extended-length paths and don't contain any non-ascii characters."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "slash",
            "module": "demo/node_modules/slash/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/slash/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/source-map.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SourceMapConsumer",
          "type": {
            "text": "SourceMapConsumerConstructor"
          }
        },
        {
          "kind": "variable",
          "name": "BasicSourceMapConsumer",
          "type": {
            "text": "BasicSourceMapConsumerConstructor"
          }
        },
        {
          "kind": "variable",
          "name": "IndexedSourceMapConsumer",
          "type": {
            "text": "IndexedSourceMapConsumerConstructor"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourceMapGenerator",
          "members": [
            {
              "kind": "method",
              "name": "fromSourceMap",
              "static": true,
              "return": {
                "type": {
                  "text": "SourceMapGenerator"
                }
              },
              "parameters": [
                {
                  "name": "sourceMapConsumer",
                  "type": {
                    "text": "SourceMapConsumer"
                  },
                  "description": "The SourceMap."
                }
              ],
              "description": "Creates a new SourceMapGenerator based on a SourceMapConsumer"
            },
            {
              "kind": "method",
              "name": "addMapping",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mapping",
                  "type": {
                    "text": "Mapping"
                  }
                }
              ],
              "description": "Add a single mapping from original source line and column to the generated\nsource's line and column for this source map being created. The mapping\nobject should have the following properties:\n\n  - generated: An object with the generated line and column positions.\n  - original: An object with the original line and column positions.\n  - source: The original source file (relative to the sourceRoot).\n  - name: An optional original token name for this mapping."
            },
            {
              "kind": "method",
              "name": "setSourceContent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "sourceFile",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sourceContent",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Set the source content for a source file."
            },
            {
              "kind": "method",
              "name": "applySourceMap",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "sourceMapConsumer",
                  "type": {
                    "text": "SourceMapConsumer"
                  },
                  "description": "The source map to be applied."
                },
                {
                  "name": "sourceFile",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Optional. The filename of the source file.\nIf omitted, SourceMapConsumer's file property will be used."
                },
                {
                  "name": "sourceMapPath",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Optional. The dirname of the path to the source map\nto be applied. If relative, it is relative to the SourceMapConsumer.\nThis parameter is needed when the two source maps aren't in the same\ndirectory, and the source map to be applied contains relative source\npaths. If so, those relative source paths need to be rewritten\nrelative to the SourceMapGenerator."
                }
              ],
              "description": "Applies the mappings of a sub-source-map for a specific source file to the\nsource map being generated. Each mapping to the supplied source file is\nrewritten using the supplied source map. Note: The resolution for the\nresulting mappings is the minimium of this map and the supplied map."
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "toJSON",
              "return": {
                "type": {
                  "text": "RawSourceMap"
                }
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourceNode",
          "members": [
            {
              "kind": "field",
              "name": "children",
              "type": {
                "text": "SourceNode[]"
              }
            },
            {
              "kind": "field",
              "name": "sourceContents",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "line",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "fromStringWithSourceMap",
              "static": true,
              "return": {
                "type": {
                  "text": "SourceNode"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sourceMapConsumer",
                  "type": {
                    "text": "SourceMapConsumer"
                  }
                },
                {
                  "name": "relativePath",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "add",
              "return": {
                "type": {
                  "text": "SourceNode"
                }
              },
              "parameters": [
                {
                  "name": "chunk",
                  "type": {
                    "text": "Array<(string | SourceNode)> | SourceNode | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prepend",
              "return": {
                "type": {
                  "text": "SourceNode"
                }
              },
              "parameters": [
                {
                  "name": "chunk",
                  "type": {
                    "text": "Array<(string | SourceNode)> | SourceNode | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSourceContent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "sourceFile",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sourceContent",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "walk",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "fn",
                  "type": {
                    "text": "(chunk: string, mapping: MappedPosition) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "walkSourceContents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "fn",
                  "type": {
                    "text": "(file: string, content: string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "join",
              "return": {
                "type": {
                  "text": "SourceNode"
                }
              },
              "parameters": [
                {
                  "name": "sep",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "replaceRight",
              "return": {
                "type": {
                  "text": "SourceNode"
                }
              },
              "parameters": [
                {
                  "name": "pattern",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "toStringWithSourceMap",
              "return": {
                "type": {
                  "text": "CodeWithSourceMap"
                }
              },
              "parameters": [
                {
                  "name": "startOfSourceMap",
                  "optional": true,
                  "type": {
                    "text": "StartOfSourceMap"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceMapConsumer",
          "declaration": {
            "name": "SourceMapConsumer",
            "module": "demo/node_modules/source-map/source-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "BasicSourceMapConsumer",
          "declaration": {
            "name": "BasicSourceMapConsumer",
            "module": "demo/node_modules/source-map/source-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "IndexedSourceMapConsumer",
          "declaration": {
            "name": "IndexedSourceMapConsumer",
            "module": "demo/node_modules/source-map/source-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourceMapGenerator",
          "declaration": {
            "name": "SourceMapGenerator",
            "module": "demo/node_modules/source-map/source-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourceNode",
          "declaration": {
            "name": "SourceNode",
            "module": "demo/node_modules/source-map/source-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/source-map.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/browser-source-map-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/register.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/source-map-support.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/spdx-correct/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/spdx-expression-parse/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/spdx-expression-parse/parse.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/spdx-expression-parse/scan.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/strip-indent/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "stripIndent",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "string",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Strip leading whitespace from each line in a string.\n\nThe line with the least number of leading whitespace, ignoring empty lines, determines the number to remove."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "stripIndent",
            "module": "demo/node_modules/strip-indent/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/strip-indent/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/supports-color/browser.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/supports-color/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/main.js",
      "declarations": [
        {
          "kind": "function",
          "name": "_default_options"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "minify",
          "declaration": {
            "name": "minify",
            "module": "\"./lib/minify.js\""
          }
        },
        {
          "kind": "js",
          "name": "_run_cli",
          "declaration": {
            "name": "run_cli",
            "module": "\"./lib/cli.js\""
          }
        },
        {
          "kind": "js",
          "name": "_default_options",
          "declaration": {
            "name": "_default_options",
            "module": "demo/node_modules/terser/main.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/to-regex-range/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/trim-newlines/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "trimNewlines",
          "type": {
            "text": "{\n\t/**\n\tTrim from the start and end of a string.\n\n\t@example\n\t```js\n\timport trimNewlines = require('trim-newlines');\n\n\ttrimNewlines('\\n🦄\\r\\n');\n\t//=> '🦄'\n\t```\n\t*/\n\t(string: string): string;\n\n\t/**\n\tTrim from the start of a string.\n\n\t@example\n\t```js\n\timport trimNewlines = require('trim-newlines');\n\n\ttrimNewlines.start('\\n🦄\\r\\n');\n\t//=> '🦄\\r\\n'\n\t```\n\t*/\n\tstart(string: string): string;\n\n\t/**\n\tTrim from the end of a string.\n\n\t@example\n\t```js\n\timport trimNewlines = require('trim-newlines');\n\n\ttrimNewlines.end('\\n🦄\\r\\n');\n\t//=> '\\n🦄'\n\t```\n\t*/\n\tend(string: string): string;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "trimNewlines",
            "module": "demo/node_modules/trim-newlines/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/trim-newlines/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./source/basic"
          }
        },
        {
          "kind": "js",
          "name": "Except",
          "declaration": {
            "name": "Except",
            "module": "./source/except"
          }
        },
        {
          "kind": "js",
          "name": "Mutable",
          "declaration": {
            "name": "Mutable",
            "module": "./source/mutable"
          }
        },
        {
          "kind": "js",
          "name": "Merge",
          "declaration": {
            "name": "Merge",
            "module": "./source/merge"
          }
        },
        {
          "kind": "js",
          "name": "MergeExclusive",
          "declaration": {
            "name": "MergeExclusive",
            "module": "./source/merge-exclusive"
          }
        },
        {
          "kind": "js",
          "name": "RequireAtLeastOne",
          "declaration": {
            "name": "RequireAtLeastOne",
            "module": "./source/require-at-least-one"
          }
        },
        {
          "kind": "js",
          "name": "RequireExactlyOne",
          "declaration": {
            "name": "RequireExactlyOne",
            "module": "./source/require-exactly-one"
          }
        },
        {
          "kind": "js",
          "name": "PartialDeep",
          "declaration": {
            "name": "PartialDeep",
            "module": "./source/partial-deep"
          }
        },
        {
          "kind": "js",
          "name": "ReadonlyDeep",
          "declaration": {
            "name": "ReadonlyDeep",
            "module": "./source/readonly-deep"
          }
        },
        {
          "kind": "js",
          "name": "LiteralUnion",
          "declaration": {
            "name": "LiteralUnion",
            "module": "./source/literal-union"
          }
        },
        {
          "kind": "js",
          "name": "Promisable",
          "declaration": {
            "name": "Promisable",
            "module": "./source/promisable"
          }
        },
        {
          "kind": "js",
          "name": "Opaque",
          "declaration": {
            "name": "Opaque",
            "module": "./source/opaque"
          }
        },
        {
          "kind": "js",
          "name": "SetOptional",
          "declaration": {
            "name": "SetOptional",
            "module": "./source/set-optional"
          }
        },
        {
          "kind": "js",
          "name": "SetRequired",
          "declaration": {
            "name": "SetRequired",
            "module": "./source/set-required"
          }
        },
        {
          "kind": "js",
          "name": "ValueOf",
          "declaration": {
            "name": "ValueOf",
            "module": "./source/value-of"
          }
        },
        {
          "kind": "js",
          "name": "PromiseValue",
          "declaration": {
            "name": "PromiseValue",
            "module": "./source/promise-value"
          }
        },
        {
          "kind": "js",
          "name": "AsyncReturnType",
          "declaration": {
            "name": "AsyncReturnType",
            "module": "./source/async-return-type"
          }
        },
        {
          "kind": "js",
          "name": "ConditionalExcept",
          "declaration": {
            "name": "ConditionalExcept",
            "module": "./source/conditional-except"
          }
        },
        {
          "kind": "js",
          "name": "ConditionalKeys",
          "declaration": {
            "name": "ConditionalKeys",
            "module": "./source/conditional-keys"
          }
        },
        {
          "kind": "js",
          "name": "ConditionalPick",
          "declaration": {
            "name": "ConditionalPick",
            "module": "./source/conditional-pick"
          }
        },
        {
          "kind": "js",
          "name": "UnionToIntersection",
          "declaration": {
            "name": "UnionToIntersection",
            "module": "./source/union-to-intersection"
          }
        },
        {
          "kind": "js",
          "name": "Stringified",
          "declaration": {
            "name": "Stringified",
            "module": "./source/stringified"
          }
        },
        {
          "kind": "js",
          "name": "PackageJson",
          "declaration": {
            "name": "PackageJson",
            "module": "./source/package-json"
          }
        },
        {
          "kind": "js",
          "name": "TsConfigJson",
          "declaration": {
            "name": "TsConfigJson",
            "module": "./source/tsconfig-json"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/validate-npm-package-license/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/wrappy/wrappy.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/yargs-parser/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/estree/flow.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/estree/index.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/glob/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "G",
          "return": {
            "type": {
              "text": "G.IGlob"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "cb",
              "type": {
                "text": "(err: Error | null, matches: string[]) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "G",
          "return": {
            "type": {
              "text": "G.IGlob"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "G.IOptions"
              }
            },
            {
              "name": "cb",
              "type": {
                "text": "(err: Error | null, matches: string[]) => void"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "G",
            "module": "demo/node_modules/@types/glob/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/minimatch/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "M",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "target",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "M.IOptions"
              }
            }
          ],
          "description": "Tests a path against the pattern using the options."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "M",
            "module": "demo/node_modules/@types/minimatch/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/minimist/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "minimist",
          "return": {
            "type": {
              "text": "minimist.ParsedArgs"
            }
          },
          "parameters": [
            {
              "name": "args",
              "optional": true,
              "type": {
                "text": "string[]"
              },
              "description": "An optional argument array (typically `process.argv.slice(2)`)"
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "text": "minimist.Opts"
              },
              "description": "An optional options object to customize the parsing"
            }
          ],
          "description": "Return an argument object populated with the array arguments from args"
        },
        {
          "kind": "function",
          "name": "minimist",
          "return": {
            "type": {
              "text": "T & minimist.ParsedArgs"
            }
          },
          "parameters": [
            {
              "name": "args",
              "optional": true,
              "type": {
                "text": "string[]"
              },
              "description": "An optional argument array (typically `process.argv.slice(2)`)"
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "text": "minimist.Opts"
              },
              "description": "An optional options object to customize the parsing"
            }
          ],
          "description": "Return an argument object populated with the array arguments from args. Strongly-typed\nto be the intersect of type T with minimist.ParsedArgs.\n\n`T` The type that will be intersected with minimist.ParsedArgs to represent the argument object"
        },
        {
          "kind": "function",
          "name": "minimist",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "args",
              "optional": true,
              "type": {
                "text": "string[]"
              },
              "description": "An optional argument array (typically `process.argv.slice(2)`)"
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "text": "minimist.Opts"
              },
              "description": "An optional options object to customize the parsing"
            }
          ],
          "description": "Return an argument object populated with the array arguments from args. Strongly-typed\nto be the the type T which should extend minimist.ParsedArgs\n\n`T` The type that extends minimist.ParsedArgs and represents the argument object"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "minimist",
            "module": "demo/node_modules/@types/minimist/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/resolve/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "resolve",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "id",
              "type": {
                "text": "string"
              },
              "description": "Identifier to resolve"
            },
            {
              "name": "cb",
              "type": {
                "text": "resolveCallback"
              }
            },
            {
              "name": "callback"
            }
          ],
          "description": "Asynchronously resolve the module path string id into cb(err, res [, pkg]), where pkg (if defined) is the data from package.json"
        },
        {
          "kind": "function",
          "name": "resolve",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "id",
              "type": {
                "text": "string"
              },
              "description": "Identifier to resolve"
            },
            {
              "name": "opts",
              "type": {
                "text": "resolve.AsyncOpts"
              }
            },
            {
              "name": "cb",
              "type": {
                "text": "resolveCallback"
              }
            },
            {
              "description": "Options to use for resolving, optional.",
              "name": "options"
            },
            {
              "name": "callback"
            }
          ],
          "description": "Asynchronously resolve the module path string id into cb(err, res [, pkg]), where pkg (if defined) is the data from package.json"
        },
        {
          "kind": "variable",
          "name": "sync",
          "type": {
            "text": "typeof resolveSync"
          }
        },
        {
          "kind": "variable",
          "name": "isCore",
          "type": {
            "text": "typeof resolveIsCore"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sync",
          "declaration": {
            "name": "sync",
            "module": "demo/node_modules/@types/resolve/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isCore",
          "declaration": {
            "name": "isCore",
            "module": "demo/node_modules/@types/resolve/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "resolve",
            "module": "demo/node_modules/@types/resolve/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/assert.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "assert",
          "return": {
            "type": {
              "text": "asserts value"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "message",
              "optional": true,
              "type": {
                "text": "string | Error"
              }
            }
          ],
          "description": "An alias of `assert.ok()`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "assert",
            "module": "demo/node_modules/@types/node/assert.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "assert",
            "module": "demo/node_modules/@types/node/assert.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/async_hooks.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "async_hooks"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/base.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/buffer.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "INSPECT_MAX_BYTES",
          "type": {
            "text": "number"
          }
        },
        {
          "kind": "variable",
          "name": "kMaxLength",
          "type": {
            "text": "number"
          }
        },
        {
          "kind": "variable",
          "name": "kStringMaxLength",
          "type": {
            "text": "number"
          }
        },
        {
          "kind": "variable",
          "name": "constants",
          "type": {
            "text": "{\n        MAX_LENGTH: number;\n        MAX_STRING_LENGTH: number;\n    }"
          }
        },
        {
          "kind": "variable",
          "name": "BuffType",
          "type": {
            "text": "typeof Buffer"
          }
        },
        {
          "kind": "function",
          "name": "transcode",
          "return": {
            "type": {
              "text": "Buffer"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "Uint8Array"
              }
            },
            {
              "name": "fromEnc",
              "type": {
                "text": "TranscodeEncoding"
              }
            },
            {
              "name": "toEnc",
              "type": {
                "text": "TranscodeEncoding"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "SlowBuffer",
          "type": {
            "text": "{\n        /** @deprecated since v6.0.0, use `Buffer.allocUnsafeSlow()` */\n        new(size: number): Buffer;\n        prototype: Buffer;\n    }"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "buffer"
          }
        },
        {
          "kind": "js",
          "name": "INSPECT_MAX_BYTES",
          "declaration": {
            "name": "INSPECT_MAX_BYTES",
            "module": "demo/node_modules/@types/node/buffer.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "kMaxLength",
          "declaration": {
            "name": "kMaxLength",
            "module": "demo/node_modules/@types/node/buffer.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "kStringMaxLength",
          "declaration": {
            "name": "kStringMaxLength",
            "module": "demo/node_modules/@types/node/buffer.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "constants",
          "declaration": {
            "name": "constants",
            "module": "demo/node_modules/@types/node/buffer.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "transcode",
          "declaration": {
            "name": "transcode",
            "module": "demo/node_modules/@types/node/buffer.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "SlowBuffer",
          "declaration": {
            "name": "SlowBuffer",
            "module": "demo/node_modules/@types/node/buffer.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Buffer",
          "declaration": {
            "name": "BuffType",
            "module": "demo/node_modules/@types/node/buffer.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/child_process.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "child_process"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/cluster.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "cluster"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/console.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "console",
          "type": {
            "text": "Console"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "console",
            "module": "demo/node_modules/@types/node/console.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "console",
            "module": "demo/node_modules/@types/node/console.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/constants.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "exp",
          "type": {
            "text": "typeof osConstants.errno &\n        typeof osConstants.priority &\n        SignalConstants &\n        typeof cryptoConstants &\n        typeof fsConstants"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "exp",
            "module": "demo/node_modules/@types/node/constants.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "exp",
            "module": "demo/node_modules/@types/node/constants.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/crypto.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "crypto"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/dgram.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "dgram"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/dns.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "dns"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/domain.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "domain"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/events.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventEmitter",
          "members": [
            {
              "kind": "method",
              "name": "once",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<any[]>"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "NodeEventTarget"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<any[]>"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "DOMEventTarget"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "static": true,
              "return": {
                "type": {
                  "text": "AsyncIterableIterator<any>"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "NodeJS.EventEmitter"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listenerCount",
              "static": true,
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "NodeJS.EventEmitter"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "errorMonitor",
              "type": {
                "text": "unique symbol"
              },
              "static": true,
              "description": "This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n`'error'` event is emitted, therefore the process will still crash if no\nregular `'error'` listener is installed."
            },
            {
              "kind": "field",
              "name": "captureRejectionSymbol",
              "type": {
                "text": "unique symbol"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "captureRejections",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "description": "Sets or gets the default captureRejection value for all emitters."
            },
            {
              "kind": "field",
              "name": "defaultMaxListeners",
              "type": {
                "text": "number"
              },
              "static": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "EventEmitter",
            "module": "demo/node_modules/@types/node/events.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventEmitter",
          "declaration": {
            "name": "internal",
            "module": "demo/node_modules/@types/node/events.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "EventEmitter",
            "module": "demo/node_modules/@types/node/events.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/fs.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Stats"
        },
        {
          "kind": "class",
          "description": "",
          "name": "Dirent",
          "members": [
            {
              "kind": "method",
              "name": "isFile",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isDirectory",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isBlockDevice",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isCharacterDevice",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSymbolicLink",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isFIFO",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSocket",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "A class representing a directory stream.",
          "name": "Dir",
          "members": [
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "[Symbol.asyncIterator]",
              "return": {
                "type": {
                  "text": "AsyncIterableIterator<Dirent>"
                }
              },
              "description": "Asynchronously iterates over the directory via `readdir(3)` until all entries have been read."
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Asynchronously close the directory's underlying resource handle.\nSubsequent reads will result in errors."
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "cb",
                  "type": {
                    "text": "NoParamCallback"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closeSync",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Synchronously close the directory's underlying resource handle.\nSubsequent reads will result in errors."
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "Promise<Dirent | null>"
                }
              },
              "description": "Asynchronously read the next directory entry via `readdir(3)` as an `Dirent`.\nAfter the read is completed, a value is returned that will be resolved with an `Dirent`, or `null` if there are no more directory entries to read.\nDirectory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms."
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "cb",
                  "type": {
                    "text": "(err: NodeJS.ErrnoException | null, dirEnt: Dirent | null) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "readSync",
              "return": {
                "type": {
                  "text": "Dirent | null"
                }
              },
              "description": "Synchronously read the next directory entry via `readdir(3)` as a `Dirent`.\nIf there are no more directory entries to read, null will be returned.\nDirectory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms."
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ReadStream",
          "members": [
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "bytesRead",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | Buffer"
              }
            },
            {
              "kind": "field",
              "name": "pending",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ],
              "description": "events.EventEmitter\n  1. open\n  2. close\n  3. ready"
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pause\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"resume\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pause\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"resume\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pause\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"resume\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pause\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"resume\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pause\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"resume\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "WriteStream",
          "members": [
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "bytesWritten",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | Buffer"
              }
            },
            {
              "kind": "field",
              "name": "pending",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ],
              "description": "events.EventEmitter\n  1. open\n  2. close\n  3. ready"
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"open\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(fd: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"ready\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "function",
          "name": "rename",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "oldPath",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "newPath",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous rename(2) - Change the name or location of a file or directory."
        },
        {
          "kind": "function",
          "name": "renameSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "oldPath",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "newPath",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            }
          ],
          "description": "Synchronous rename(2) - Change the name or location of a file or directory."
        },
        {
          "kind": "function",
          "name": "truncate",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "len",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "If not specified, defaults to `0`."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous truncate(2) - Truncate a file to a specified length."
        },
        {
          "kind": "function",
          "name": "truncate",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous truncate(2) - Truncate a file to a specified length."
        },
        {
          "kind": "function",
          "name": "truncateSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "len",
              "optional": true,
              "type": {
                "text": "number | null"
              },
              "description": "If not specified, defaults to `0`."
            }
          ],
          "description": "Synchronous truncate(2) - Truncate a file to a specified length."
        },
        {
          "kind": "function",
          "name": "ftruncate",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "len",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "If not specified, defaults to `0`."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous ftruncate(2) - Truncate a file to a specified length."
        },
        {
          "kind": "function",
          "name": "ftruncate",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous ftruncate(2) - Truncate a file to a specified length."
        },
        {
          "kind": "function",
          "name": "ftruncateSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "len",
              "optional": true,
              "type": {
                "text": "number | null"
              },
              "description": "If not specified, defaults to `0`."
            }
          ],
          "description": "Synchronous ftruncate(2) - Truncate a file to a specified length."
        },
        {
          "kind": "function",
          "name": "chown",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "uid",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "gid",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous chown(2) - Change ownership of a file."
        },
        {
          "kind": "function",
          "name": "chownSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "uid",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "gid",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Synchronous chown(2) - Change ownership of a file."
        },
        {
          "kind": "function",
          "name": "fchown",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "uid",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "gid",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous fchown(2) - Change ownership of a file."
        },
        {
          "kind": "function",
          "name": "fchownSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "uid",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "gid",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Synchronous fchown(2) - Change ownership of a file."
        },
        {
          "kind": "function",
          "name": "lchown",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "uid",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "gid",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links."
        },
        {
          "kind": "function",
          "name": "lchownSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "uid",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "gid",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Synchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links."
        },
        {
          "kind": "function",
          "name": "lutimes",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "atime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last access time. If a string is provided, it will be coerced to number."
            },
            {
              "name": "mtime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last modified time. If a string is provided, it will be coerced to number."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Changes the access and modification times of a file in the same way as `fs.utimes()`,\nwith the difference that if the path refers to a symbolic link, then the link is not\ndereferenced: instead, the timestamps of the symbolic link itself are changed."
        },
        {
          "kind": "function",
          "name": "lutimesSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "atime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last access time. If a string is provided, it will be coerced to number."
            },
            {
              "name": "mtime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last modified time. If a string is provided, it will be coerced to number."
            }
          ],
          "description": "Change the file system timestamps of the symbolic link referenced by `path`. Returns `undefined`,\nor throws an exception when parameters are incorrect or the operation fails.\nThis is the synchronous version of `fs.lutimes()`."
        },
        {
          "kind": "function",
          "name": "chmod",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "description": "A file mode. If a string is passed, it is parsed as an octal integer."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous chmod(2) - Change permissions of a file."
        },
        {
          "kind": "function",
          "name": "chmodSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "description": "A file mode. If a string is passed, it is parsed as an octal integer."
            }
          ],
          "description": "Synchronous chmod(2) - Change permissions of a file."
        },
        {
          "kind": "function",
          "name": "fchmod",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "description": "A file mode. If a string is passed, it is parsed as an octal integer."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous fchmod(2) - Change permissions of a file."
        },
        {
          "kind": "function",
          "name": "fchmodSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "description": "A file mode. If a string is passed, it is parsed as an octal integer."
            }
          ],
          "description": "Synchronous fchmod(2) - Change permissions of a file."
        },
        {
          "kind": "function",
          "name": "lchmod",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "description": "A file mode. If a string is passed, it is parsed as an octal integer."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links."
        },
        {
          "kind": "function",
          "name": "lchmodSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "description": "A file mode. If a string is passed, it is parsed as an octal integer."
            }
          ],
          "description": "Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links."
        },
        {
          "kind": "function",
          "name": "stat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: Stats) => void"
              }
            }
          ],
          "description": "Asynchronous stat(2) - Get file status."
        },
        {
          "kind": "function",
          "name": "stat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions & { bigint?: false } | undefined"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: Stats) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "stat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions & { bigint: true }"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: BigIntStats) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "stat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions | undefined"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "statSync",
          "return": {
            "type": {
              "text": "Stats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "StatOptions & { bigint?: false }"
              }
            }
          ],
          "description": "Synchronous stat(2) - Get file status."
        },
        {
          "kind": "function",
          "name": "statSync",
          "return": {
            "type": {
              "text": "BigIntStats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions & { bigint: true }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "statSync",
          "return": {
            "type": {
              "text": "Stats | BigIntStats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "StatOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "fstat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: Stats) => void"
              }
            }
          ],
          "description": "Asynchronous fstat(2) - Get file status."
        },
        {
          "kind": "function",
          "name": "fstat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions & { bigint?: false } | undefined"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: Stats) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "fstat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions & { bigint: true }"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: BigIntStats) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "fstat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions | undefined"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "fstatSync",
          "return": {
            "type": {
              "text": "Stats"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "StatOptions & { bigint?: false }"
              }
            }
          ],
          "description": "Synchronous fstat(2) - Get file status."
        },
        {
          "kind": "function",
          "name": "fstatSync",
          "return": {
            "type": {
              "text": "BigIntStats"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions & { bigint: true }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "fstatSync",
          "return": {
            "type": {
              "text": "Stats | BigIntStats"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "StatOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "lstat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: Stats) => void"
              }
            }
          ],
          "description": "Asynchronous lstat(2) - Get file status. Does not dereference symbolic links."
        },
        {
          "kind": "function",
          "name": "lstat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions & { bigint?: false } | undefined"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: Stats) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "lstat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions & { bigint: true }"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: BigIntStats) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "lstat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions | undefined"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "lstatSync",
          "return": {
            "type": {
              "text": "Stats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "StatOptions & { bigint?: false }"
              }
            }
          ],
          "description": "Synchronous lstat(2) - Get file status. Does not dereference symbolic links."
        },
        {
          "kind": "function",
          "name": "lstatSync",
          "return": {
            "type": {
              "text": "BigIntStats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "StatOptions & { bigint: true }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "lstatSync",
          "return": {
            "type": {
              "text": "Stats | BigIntStats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "StatOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "link",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "existingPath",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "newPath",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file."
        },
        {
          "kind": "function",
          "name": "linkSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "existingPath",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "newPath",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            }
          ],
          "description": "Synchronous link(2) - Create a new link (also known as a hard link) to an existing file."
        },
        {
          "kind": "function",
          "name": "symlink",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "target",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to an existing file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to the new symlink. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "type",
              "type": {
                "text": "symlink.Type | undefined | null"
              },
              "description": "May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).\nWhen using `'junction'`, the `target` argument will automatically be normalized to an absolute path."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous symlink(2) - Create a new symbolic link to an existing file."
        },
        {
          "kind": "function",
          "name": "symlink",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "target",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to an existing file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to the new symlink. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous symlink(2) - Create a new symbolic link to an existing file."
        },
        {
          "kind": "function",
          "name": "symlinkSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "target",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to an existing file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to the new symlink. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "type",
              "optional": true,
              "type": {
                "text": "symlink.Type | null"
              },
              "description": "May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).\nWhen using `'junction'`, the `target` argument will automatically be normalized to an absolute path."
            }
          ],
          "description": "Synchronous symlink(2) - Create a new symbolic link to an existing file."
        },
        {
          "kind": "function",
          "name": "readlink",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions | BufferEncoding | undefined | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, linkString: string) => void"
              }
            }
          ],
          "description": "Asynchronous readlink(2) - read value of a symbolic link."
        },
        {
          "kind": "function",
          "name": "readlink",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BufferEncodingOption"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, linkString: Buffer) => void"
              }
            }
          ],
          "description": "Asynchronous readlink(2) - read value of a symbolic link."
        },
        {
          "kind": "function",
          "name": "readlink",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions | string | undefined | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, linkString: string | Buffer) => void"
              }
            }
          ],
          "description": "Asynchronous readlink(2) - read value of a symbolic link."
        },
        {
          "kind": "function",
          "name": "readlink",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, linkString: string) => void"
              }
            }
          ],
          "description": "Asynchronous readlink(2) - read value of a symbolic link."
        },
        {
          "kind": "function",
          "name": "readlinkSync",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "BaseEncodingOptions | BufferEncoding | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronous readlink(2) - read value of a symbolic link."
        },
        {
          "kind": "function",
          "name": "readlinkSync",
          "return": {
            "type": {
              "text": "Buffer"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BufferEncodingOption"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronous readlink(2) - read value of a symbolic link."
        },
        {
          "kind": "function",
          "name": "readlinkSync",
          "return": {
            "type": {
              "text": "string | Buffer"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "BaseEncodingOptions | string | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronous readlink(2) - read value of a symbolic link."
        },
        {
          "kind": "function",
          "name": "realpath",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions | BufferEncoding | undefined | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, resolvedPath: string) => void"
              }
            }
          ],
          "description": "Asynchronous realpath(3) - return the canonicalized absolute pathname."
        },
        {
          "kind": "function",
          "name": "realpath",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BufferEncodingOption"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void"
              }
            }
          ],
          "description": "Asynchronous realpath(3) - return the canonicalized absolute pathname."
        },
        {
          "kind": "function",
          "name": "realpath",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions | string | undefined | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void"
              }
            }
          ],
          "description": "Asynchronous realpath(3) - return the canonicalized absolute pathname."
        },
        {
          "kind": "function",
          "name": "realpath",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, resolvedPath: string) => void"
              }
            }
          ],
          "description": "Asynchronous realpath(3) - return the canonicalized absolute pathname."
        },
        {
          "kind": "function",
          "name": "realpathSync",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "BaseEncodingOptions | BufferEncoding | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronous realpath(3) - return the canonicalized absolute pathname."
        },
        {
          "kind": "function",
          "name": "realpathSync",
          "return": {
            "type": {
              "text": "Buffer"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BufferEncodingOption"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronous realpath(3) - return the canonicalized absolute pathname."
        },
        {
          "kind": "function",
          "name": "realpathSync",
          "return": {
            "type": {
              "text": "string | Buffer"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "BaseEncodingOptions | string | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronous realpath(3) - return the canonicalized absolute pathname."
        },
        {
          "kind": "function",
          "name": "unlink",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous unlink(2) - delete a name and possibly the file it refers to."
        },
        {
          "kind": "function",
          "name": "unlinkSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            }
          ],
          "description": "Synchronous unlink(2) - delete a name and possibly the file it refers to."
        },
        {
          "kind": "function",
          "name": "rmdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous rmdir(2) - delete a directory."
        },
        {
          "kind": "function",
          "name": "rmdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "RmDirOptions"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "rmdirSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "RmDirOptions"
              }
            }
          ],
          "description": "Synchronous rmdir(2) - delete a directory."
        },
        {
          "kind": "function",
          "name": "rm",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility)."
        },
        {
          "kind": "function",
          "name": "rm",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "RmOptions"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "rmSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "RmOptions"
              }
            }
          ],
          "description": "Synchronously removes files and directories (modeled on the standard POSIX `rm` utility)."
        },
        {
          "kind": "function",
          "name": "mkdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "MakeDirectoryOptions & { recursive: true }"
              },
              "description": "Either the file mode, or an object optionally specifying the file mode and whether parent folders\nshould be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, path?: string) => void"
              }
            }
          ],
          "description": "Asynchronous mkdir(2) - create a directory."
        },
        {
          "kind": "function",
          "name": "mkdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "Mode | (MakeDirectoryOptions & { recursive?: false; }) | null | undefined"
              },
              "description": "Either the file mode, or an object optionally specifying the file mode and whether parent folders\nshould be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous mkdir(2) - create a directory."
        },
        {
          "kind": "function",
          "name": "mkdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "Mode | MakeDirectoryOptions | null | undefined"
              },
              "description": "Either the file mode, or an object optionally specifying the file mode and whether parent folders\nshould be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, path?: string) => void"
              }
            }
          ],
          "description": "Asynchronous mkdir(2) - create a directory."
        },
        {
          "kind": "function",
          "name": "mkdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous mkdir(2) - create a directory with a mode of `0o777`."
        },
        {
          "kind": "function",
          "name": "mkdirSync",
          "return": {
            "type": {
              "text": "string | undefined"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "MakeDirectoryOptions & { recursive: true; }"
              },
              "description": "Either the file mode, or an object optionally specifying the file mode and whether parent folders\nshould be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`."
            }
          ],
          "description": "Synchronous mkdir(2) - create a directory."
        },
        {
          "kind": "function",
          "name": "mkdirSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Mode | (MakeDirectoryOptions & { recursive?: false; }) | null"
              },
              "description": "Either the file mode, or an object optionally specifying the file mode and whether parent folders\nshould be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`."
            }
          ],
          "description": "Synchronous mkdir(2) - create a directory."
        },
        {
          "kind": "function",
          "name": "mkdirSync",
          "return": {
            "type": {
              "text": "string | undefined"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Mode | MakeDirectoryOptions | null"
              },
              "description": "Either the file mode, or an object optionally specifying the file mode and whether parent folders\nshould be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`."
            }
          ],
          "description": "Synchronous mkdir(2) - create a directory."
        },
        {
          "kind": "function",
          "name": "mkdtemp",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions | BufferEncoding | undefined | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, folder: string) => void"
              }
            }
          ],
          "description": "Asynchronously creates a unique temporary directory.\nGenerates six random characters to be appended behind a required prefix to create a unique temporary directory."
        },
        {
          "kind": "function",
          "name": "mkdtemp",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "\"buffer\" | { encoding: \"buffer\" }"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, folder: Buffer) => void"
              }
            }
          ],
          "description": "Asynchronously creates a unique temporary directory.\nGenerates six random characters to be appended behind a required prefix to create a unique temporary directory."
        },
        {
          "kind": "function",
          "name": "mkdtemp",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions | string | undefined | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, folder: string | Buffer) => void"
              }
            }
          ],
          "description": "Asynchronously creates a unique temporary directory.\nGenerates six random characters to be appended behind a required prefix to create a unique temporary directory."
        },
        {
          "kind": "function",
          "name": "mkdtemp",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, folder: string) => void"
              }
            }
          ],
          "description": "Asynchronously creates a unique temporary directory.\nGenerates six random characters to be appended behind a required prefix to create a unique temporary directory."
        },
        {
          "kind": "function",
          "name": "mkdtempSync",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "BaseEncodingOptions | BufferEncoding | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronously creates a unique temporary directory.\nGenerates six random characters to be appended behind a required prefix to create a unique temporary directory."
        },
        {
          "kind": "function",
          "name": "mkdtempSync",
          "return": {
            "type": {
              "text": "Buffer"
            }
          },
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "BufferEncodingOption"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronously creates a unique temporary directory.\nGenerates six random characters to be appended behind a required prefix to create a unique temporary directory."
        },
        {
          "kind": "function",
          "name": "mkdtempSync",
          "return": {
            "type": {
              "text": "string | Buffer"
            }
          },
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "BaseEncodingOptions | string | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronously creates a unique temporary directory.\nGenerates six random characters to be appended behind a required prefix to create a unique temporary directory."
        },
        {
          "kind": "function",
          "name": "readdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "{ encoding: BufferEncoding | null; withFileTypes?: false } | BufferEncoding | undefined | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, files: string[]) => void"
              }
            }
          ],
          "description": "Asynchronous readdir(3) - read a directory."
        },
        {
          "kind": "function",
          "name": "readdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "{ encoding: \"buffer\"; withFileTypes?: false } | \"buffer\""
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, files: Buffer[]) => void"
              }
            }
          ],
          "description": "Asynchronous readdir(3) - read a directory."
        },
        {
          "kind": "function",
          "name": "readdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions & { withFileTypes?: false } | BufferEncoding | undefined | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, files: string[] | Buffer[]) => void"
              }
            }
          ],
          "description": "Asynchronous readdir(3) - read a directory."
        },
        {
          "kind": "function",
          "name": "readdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, files: string[]) => void"
              }
            }
          ],
          "description": "Asynchronous readdir(3) - read a directory."
        },
        {
          "kind": "function",
          "name": "readdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions & { withFileTypes: true }"
              },
              "description": "If called with `withFileTypes: true` the result data will be an array of Dirent."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, files: Dirent[]) => void"
              }
            }
          ],
          "description": "Asynchronous readdir(3) - read a directory."
        },
        {
          "kind": "function",
          "name": "readdirSync",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "{ encoding: BufferEncoding | null; withFileTypes?: false } | BufferEncoding | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronous readdir(3) - read a directory."
        },
        {
          "kind": "function",
          "name": "readdirSync",
          "return": {
            "type": {
              "text": "Buffer[]"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "{ encoding: \"buffer\"; withFileTypes?: false } | \"buffer\""
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronous readdir(3) - read a directory."
        },
        {
          "kind": "function",
          "name": "readdirSync",
          "return": {
            "type": {
              "text": "string[] | Buffer[]"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "BaseEncodingOptions & { withFileTypes?: false } | BufferEncoding | null"
              },
              "description": "The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used."
            }
          ],
          "description": "Synchronous readdir(3) - read a directory."
        },
        {
          "kind": "function",
          "name": "readdirSync",
          "return": {
            "type": {
              "text": "Dirent[]"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions & { withFileTypes: true }"
              },
              "description": "If called with `withFileTypes: true` the result data will be an array of Dirent."
            }
          ],
          "description": "Synchronous readdir(3) - read a directory."
        },
        {
          "kind": "function",
          "name": "close",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous close(2) - close a file descriptor."
        },
        {
          "kind": "function",
          "name": "closeSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            }
          ],
          "description": "Synchronous close(2) - close a file descriptor."
        },
        {
          "kind": "function",
          "name": "open",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "flags",
              "type": {
                "text": "OpenMode"
              }
            },
            {
              "name": "mode",
              "type": {
                "text": "Mode | undefined | null"
              },
              "description": "A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, fd: number) => void"
              }
            }
          ],
          "description": "Asynchronous open(2) - open and possibly create a file."
        },
        {
          "kind": "function",
          "name": "open",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "flags",
              "type": {
                "text": "OpenMode"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, fd: number) => void"
              }
            }
          ],
          "description": "Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`."
        },
        {
          "kind": "function",
          "name": "openSync",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "flags",
              "type": {
                "text": "OpenMode"
              }
            },
            {
              "name": "mode",
              "optional": true,
              "type": {
                "text": "Mode | null"
              },
              "description": "A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`."
            }
          ],
          "description": "Synchronous open(2) - open and possibly create a file, returning a file descriptor.."
        },
        {
          "kind": "function",
          "name": "utimes",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "atime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last access time. If a string is provided, it will be coerced to number."
            },
            {
              "name": "mtime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last modified time. If a string is provided, it will be coerced to number."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously change file timestamps of the file referenced by the supplied path."
        },
        {
          "kind": "function",
          "name": "utimesSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol."
            },
            {
              "name": "atime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last access time. If a string is provided, it will be coerced to number."
            },
            {
              "name": "mtime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last modified time. If a string is provided, it will be coerced to number."
            }
          ],
          "description": "Synchronously change file timestamps of the file referenced by the supplied path."
        },
        {
          "kind": "function",
          "name": "futimes",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "atime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last access time. If a string is provided, it will be coerced to number."
            },
            {
              "name": "mtime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last modified time. If a string is provided, it will be coerced to number."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously change file timestamps of the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "futimesSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "atime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last access time. If a string is provided, it will be coerced to number."
            },
            {
              "name": "mtime",
              "type": {
                "text": "string | number | Date"
              },
              "description": "The last modified time. If a string is provided, it will be coerced to number."
            }
          ],
          "description": "Synchronously change file timestamps of the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "fsync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device."
        },
        {
          "kind": "function",
          "name": "fsyncSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            }
          ],
          "description": "Synchronous fsync(2) - synchronize a file's in-core state with the underlying storage device."
        },
        {
          "kind": "function",
          "name": "write",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "buffer",
              "type": {
                "text": "TBuffer"
              }
            },
            {
              "name": "offset",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "The part of the buffer to be written. If not supplied, defaults to `0`."
            },
            {
              "name": "length",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "The number of bytes to write. If not supplied, defaults to `buffer.length - offset`."
            },
            {
              "name": "position",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void"
              }
            }
          ],
          "description": "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "write",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "buffer",
              "type": {
                "text": "TBuffer"
              }
            },
            {
              "name": "offset",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "The part of the buffer to be written. If not supplied, defaults to `0`."
            },
            {
              "name": "length",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "The number of bytes to write. If not supplied, defaults to `buffer.length - offset`."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void"
              }
            }
          ],
          "description": "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "write",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "buffer",
              "type": {
                "text": "TBuffer"
              }
            },
            {
              "name": "offset",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "The part of the buffer to be written. If not supplied, defaults to `0`."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void"
              }
            }
          ],
          "description": "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "write",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "buffer",
              "type": {
                "text": "TBuffer"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void"
              }
            }
          ],
          "description": "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "write",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "string",
              "type": {
                "text": "string"
              },
              "description": "A string to write."
            },
            {
              "name": "position",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position."
            },
            {
              "name": "encoding",
              "type": {
                "text": "BufferEncoding | undefined | null"
              },
              "description": "The expected string encoding."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, written: number, str: string) => void"
              }
            }
          ],
          "description": "Asynchronously writes `string` to the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "write",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "string",
              "type": {
                "text": "string"
              },
              "description": "A string to write."
            },
            {
              "name": "position",
              "type": {
                "text": "number | undefined | null"
              },
              "description": "The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, written: number, str: string) => void"
              }
            }
          ],
          "description": "Asynchronously writes `string` to the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "write",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "string",
              "type": {
                "text": "string"
              },
              "description": "A string to write."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, written: number, str: string) => void"
              }
            }
          ],
          "description": "Asynchronously writes `string` to the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "writeSync",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "buffer",
              "type": {
                "text": "NodeJS.ArrayBufferView"
              }
            },
            {
              "name": "offset",
              "optional": true,
              "type": {
                "text": "number | null"
              },
              "description": "The part of the buffer to be written. If not supplied, defaults to `0`."
            },
            {
              "name": "length",
              "optional": true,
              "type": {
                "text": "number | null"
              },
              "description": "The number of bytes to write. If not supplied, defaults to `buffer.length - offset`."
            },
            {
              "name": "position",
              "optional": true,
              "type": {
                "text": "number | null"
              },
              "description": "The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position."
            }
          ],
          "description": "Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written."
        },
        {
          "kind": "function",
          "name": "writeSync",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "string",
              "type": {
                "text": "string"
              },
              "description": "A string to write."
            },
            {
              "name": "position",
              "optional": true,
              "type": {
                "text": "number | null"
              },
              "description": "The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position."
            },
            {
              "name": "encoding",
              "optional": true,
              "type": {
                "text": "BufferEncoding | null"
              },
              "description": "The expected string encoding."
            }
          ],
          "description": "Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written."
        },
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "buffer",
              "type": {
                "text": "TBuffer"
              },
              "description": "The buffer that the data will be written to."
            },
            {
              "name": "offset",
              "type": {
                "text": "number"
              },
              "description": "The offset in the buffer at which to start writing."
            },
            {
              "name": "length",
              "type": {
                "text": "number"
              },
              "description": "The number of bytes to read."
            },
            {
              "name": "position",
              "type": {
                "text": "number | null"
              },
              "description": "The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void"
              }
            }
          ],
          "description": "Asynchronously reads data from the file referenced by the supplied file descriptor."
        },
        {
          "kind": "function",
          "name": "readSync",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "buffer",
              "type": {
                "text": "NodeJS.ArrayBufferView"
              },
              "description": "The buffer that the data will be written to."
            },
            {
              "name": "offset",
              "type": {
                "text": "number"
              },
              "description": "The offset in the buffer at which to start writing."
            },
            {
              "name": "length",
              "type": {
                "text": "number"
              },
              "description": "The number of bytes to read."
            },
            {
              "name": "position",
              "type": {
                "text": "number | null"
              },
              "description": "The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position."
            }
          ],
          "description": "Synchronously reads data from the file referenced by the supplied file descriptor, returning the number of bytes read."
        },
        {
          "kind": "function",
          "name": "readSync",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "buffer",
              "type": {
                "text": "NodeJS.ArrayBufferView"
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "text": "ReadSyncOptions"
              }
            }
          ],
          "description": "Similar to the above `fs.readSync` function, this version takes an optional `options` object.\nIf no `options` object is specified, it will default with the above values."
        },
        {
          "kind": "function",
          "name": "readFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "options",
              "type": {
                "text": "{ encoding?: null; flag?: string; } | undefined | null"
              },
              "description": "An object that may contain an optional flag.\nIf a flag is not provided, it defaults to `'r'`."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, data: Buffer) => void"
              }
            }
          ],
          "description": "Asynchronously reads the entire contents of a file."
        },
        {
          "kind": "function",
          "name": "readFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "options",
              "type": {
                "text": "{ encoding: BufferEncoding; flag?: string; } | string"
              },
              "description": "Either the encoding for the result, or an object that contains the encoding and an optional flag.\nIf a flag is not provided, it defaults to `'r'`."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, data: string) => void"
              }
            }
          ],
          "description": "Asynchronously reads the entire contents of a file."
        },
        {
          "kind": "function",
          "name": "readFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "options",
              "type": {
                "text": "BaseEncodingOptions & { flag?: string; } | string | undefined | null"
              },
              "description": "Either the encoding for the result, or an object that contains the encoding and an optional flag.\nIf a flag is not provided, it defaults to `'r'`."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, data: string | Buffer) => void"
              }
            }
          ],
          "description": "Asynchronously reads the entire contents of a file."
        },
        {
          "kind": "function",
          "name": "readFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "callback",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, data: Buffer) => void"
              }
            }
          ],
          "description": "Asynchronously reads the entire contents of a file."
        },
        {
          "kind": "function",
          "name": "readFileSync",
          "return": {
            "type": {
              "text": "Buffer"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "{ encoding?: null; flag?: string; } | null"
              },
              "description": "An object that may contain an optional flag. If a flag is not provided, it defaults to `'r'`."
            }
          ],
          "description": "Synchronously reads the entire contents of a file."
        },
        {
          "kind": "function",
          "name": "readFileSync",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "options",
              "type": {
                "text": "{ encoding: BufferEncoding; flag?: string; } | BufferEncoding"
              },
              "description": "Either the encoding for the result, or an object that contains the encoding and an optional flag.\nIf a flag is not provided, it defaults to `'r'`."
            }
          ],
          "description": "Synchronously reads the entire contents of a file."
        },
        {
          "kind": "function",
          "name": "readFileSync",
          "return": {
            "type": {
              "text": "string | Buffer"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "BaseEncodingOptions & { flag?: string; } | BufferEncoding | null"
              },
              "description": "Either the encoding for the result, or an object that contains the encoding and an optional flag.\nIf a flag is not provided, it defaults to `'r'`."
            }
          ],
          "description": "Synchronously reads the entire contents of a file."
        },
        {
          "kind": "function",
          "name": "writeFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "data",
              "type": {
                "text": "string | NodeJS.ArrayBufferView"
              },
              "description": "The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string."
            },
            {
              "name": "options",
              "type": {
                "text": "WriteFileOptions"
              },
              "description": "Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\nIf `encoding` is not supplied, the default of `'utf8'` is used.\nIf `mode` is not supplied, the default of `0o666` is used.\nIf `mode` is a string, it is parsed as an octal integer.\nIf `flag` is not supplied, the default of `'w'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously writes data to a file, replacing the file if it already exists."
        },
        {
          "kind": "function",
          "name": "writeFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "data",
              "type": {
                "text": "string | NodeJS.ArrayBufferView"
              },
              "description": "The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously writes data to a file, replacing the file if it already exists."
        },
        {
          "kind": "function",
          "name": "writeFileSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "data",
              "type": {
                "text": "string | NodeJS.ArrayBufferView"
              },
              "description": "The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "WriteFileOptions"
              },
              "description": "Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\nIf `encoding` is not supplied, the default of `'utf8'` is used.\nIf `mode` is not supplied, the default of `0o666` is used.\nIf `mode` is a string, it is parsed as an octal integer.\nIf `flag` is not supplied, the default of `'w'` is used."
            }
          ],
          "description": "Synchronously writes data to a file, replacing the file if it already exists."
        },
        {
          "kind": "function",
          "name": "appendFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "file",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "data",
              "type": {
                "text": "string | Uint8Array"
              },
              "description": "The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string."
            },
            {
              "name": "options",
              "type": {
                "text": "WriteFileOptions"
              },
              "description": "Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\nIf `encoding` is not supplied, the default of `'utf8'` is used.\nIf `mode` is not supplied, the default of `0o666` is used.\nIf `mode` is a string, it is parsed as an octal integer.\nIf `flag` is not supplied, the default of `'a'` is used."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously append data to a file, creating the file if it does not exist."
        },
        {
          "kind": "function",
          "name": "appendFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "file",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "data",
              "type": {
                "text": "string | Uint8Array"
              },
              "description": "The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously append data to a file, creating the file if it does not exist."
        },
        {
          "kind": "function",
          "name": "appendFileSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "file",
              "type": {
                "text": "PathLike | number"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_.\nIf a file descriptor is provided, the underlying file will _not_ be closed automatically."
            },
            {
              "name": "data",
              "type": {
                "text": "string | Uint8Array"
              },
              "description": "The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "WriteFileOptions"
              },
              "description": "Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\nIf `encoding` is not supplied, the default of `'utf8'` is used.\nIf `mode` is not supplied, the default of `0o666` is used.\nIf `mode` is a string, it is parsed as an octal integer.\nIf `flag` is not supplied, the default of `'a'` is used."
            }
          ],
          "description": "Synchronously append data to a file, creating the file if it does not exist."
        },
        {
          "kind": "function",
          "name": "watchFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "filename",
              "type": {
                "text": "PathLike"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "{ persistent?: boolean; interval?: number; } | undefined"
              }
            },
            {
              "name": "listener",
              "type": {
                "text": "(curr: Stats, prev: Stats) => void"
              }
            }
          ],
          "description": "Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed."
        },
        {
          "kind": "function",
          "name": "watchFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "filename",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "listener",
              "type": {
                "text": "(curr: Stats, prev: Stats) => void"
              }
            }
          ],
          "description": "Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed."
        },
        {
          "kind": "function",
          "name": "unwatchFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "filename",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "listener",
              "optional": true,
              "type": {
                "text": "(curr: Stats, prev: Stats) => void"
              }
            }
          ],
          "description": "Stop watching for changes on `filename`."
        },
        {
          "kind": "function",
          "name": "watch",
          "return": {
            "type": {
              "text": "FSWatcher"
            }
          },
          "parameters": [
            {
              "name": "filename",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "options",
              "type": {
                "text": "{ encoding?: BufferEncoding | null, persistent?: boolean, recursive?: boolean } | BufferEncoding | undefined | null"
              },
              "description": "Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\nIf `encoding` is not supplied, the default of `'utf8'` is used.\nIf `persistent` is not supplied, the default of `true` is used.\nIf `recursive` is not supplied, the default of `false` is used."
            },
            {
              "name": "listener",
              "optional": true,
              "type": {
                "text": "(event: \"rename\" | \"change\", filename: string) => void"
              }
            }
          ],
          "description": "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."
        },
        {
          "kind": "function",
          "name": "watch",
          "return": {
            "type": {
              "text": "FSWatcher"
            }
          },
          "parameters": [
            {
              "name": "filename",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "options",
              "type": {
                "text": "{ encoding: \"buffer\", persistent?: boolean, recursive?: boolean; } | \"buffer\""
              },
              "description": "Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\nIf `encoding` is not supplied, the default of `'utf8'` is used.\nIf `persistent` is not supplied, the default of `true` is used.\nIf `recursive` is not supplied, the default of `false` is used."
            },
            {
              "name": "listener",
              "optional": true,
              "type": {
                "text": "(event: \"rename\" | \"change\", filename: Buffer) => void"
              }
            }
          ],
          "description": "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."
        },
        {
          "kind": "function",
          "name": "watch",
          "return": {
            "type": {
              "text": "FSWatcher"
            }
          },
          "parameters": [
            {
              "name": "filename",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "options",
              "type": {
                "text": "{ encoding?: BufferEncoding | null, persistent?: boolean, recursive?: boolean } | string | null"
              },
              "description": "Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\nIf `encoding` is not supplied, the default of `'utf8'` is used.\nIf `persistent` is not supplied, the default of `true` is used.\nIf `recursive` is not supplied, the default of `false` is used."
            },
            {
              "name": "listener",
              "optional": true,
              "type": {
                "text": "(event: \"rename\" | \"change\", filename: string | Buffer) => void"
              }
            }
          ],
          "description": "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."
        },
        {
          "kind": "function",
          "name": "watch",
          "return": {
            "type": {
              "text": "FSWatcher"
            }
          },
          "parameters": [
            {
              "name": "filename",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "listener",
              "optional": true,
              "type": {
                "text": "(event: \"rename\" | \"change\", filename: string) => any"
              }
            }
          ],
          "description": "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."
        },
        {
          "kind": "function",
          "name": "exists",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "callback",
              "type": {
                "text": "(exists: boolean) => void"
              }
            }
          ],
          "description": "Asynchronously tests whether or not the given path exists by checking with the file system."
        },
        {
          "kind": "function",
          "name": "existsSync",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            }
          ],
          "description": "Synchronously tests whether or not the given path exists by checking with the file system."
        },
        {
          "kind": "function",
          "name": "access",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "mode",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously tests a user's permissions for the file specified by path."
        },
        {
          "kind": "function",
          "name": "access",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously tests a user's permissions for the file specified by path."
        },
        {
          "kind": "function",
          "name": "accessSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "mode",
              "optional": true,
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Synchronously tests a user's permissions for the file specified by path."
        },
        {
          "kind": "function",
          "name": "createReadStream",
          "return": {
            "type": {
              "text": "ReadStream"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "string | {\n        flags?: string;\n        encoding?: BufferEncoding;\n        fd?: number;\n        mode?: number;\n        autoClose?: boolean;\n        /**\n         * @default false\n         */\n        emitClose?: boolean;\n        start?: number;\n        end?: number;\n        highWaterMark?: number;\n    }"
              }
            }
          ],
          "description": "Returns a new `ReadStream` object."
        },
        {
          "kind": "function",
          "name": "createWriteStream",
          "return": {
            "type": {
              "text": "WriteStream"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to a file. If a URL is provided, it must use the `file:` protocol.\nURL support is _experimental_."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "string | {\n        flags?: string;\n        encoding?: BufferEncoding;\n        fd?: number;\n        mode?: number;\n        autoClose?: boolean;\n        emitClose?: boolean;\n        start?: number;\n        highWaterMark?: number;\n    }"
              }
            }
          ],
          "description": "Returns a new `WriteStream` object."
        },
        {
          "kind": "function",
          "name": "fdatasync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device."
        },
        {
          "kind": "function",
          "name": "fdatasyncSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              },
              "description": "A file descriptor."
            }
          ],
          "description": "Synchronous fdatasync(2) - synchronize a file's in-core state with storage device."
        },
        {
          "kind": "function",
          "name": "copyFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to the source file."
            },
            {
              "name": "dest",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to the destination file."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously copies src to dest. By default, dest is overwritten if it already exists.\nNo arguments other than a possible exception are given to the callback function.\nNode.js makes no guarantees about the atomicity of the copy operation.\nIf an error occurs after the destination file has been opened for writing, Node.js will attempt\nto remove the destination."
        },
        {
          "kind": "function",
          "name": "copyFile",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to the source file."
            },
            {
              "name": "dest",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to the destination file."
            },
            {
              "name": "flags",
              "type": {
                "text": "number"
              },
              "description": "An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists."
            },
            {
              "name": "callback",
              "type": {
                "text": "NoParamCallback"
              }
            }
          ],
          "description": "Asynchronously copies src to dest. By default, dest is overwritten if it already exists.\nNo arguments other than a possible exception are given to the callback function.\nNode.js makes no guarantees about the atomicity of the copy operation.\nIf an error occurs after the destination file has been opened for writing, Node.js will attempt\nto remove the destination."
        },
        {
          "kind": "function",
          "name": "copyFileSync",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to the source file."
            },
            {
              "name": "dest",
              "type": {
                "text": "PathLike"
              },
              "description": "A path to the destination file."
            },
            {
              "name": "flags",
              "optional": true,
              "type": {
                "text": "number"
              },
              "description": "An optional integer that specifies the behavior of the copy operation.\nThe only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists."
            }
          ],
          "description": "Synchronously copies src to dest. By default, dest is overwritten if it already exists.\nNode.js makes no guarantees about the atomicity of the copy operation.\nIf an error occurs after the destination file has been opened for writing, Node.js will attempt\nto remove the destination."
        },
        {
          "kind": "function",
          "name": "writev",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "buffers",
              "type": {
                "text": "ReadonlyArray<NodeJS.ArrayBufferView>"
              }
            },
            {
              "name": "cb",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void"
              }
            }
          ],
          "description": "Write an array of ArrayBufferViews to the file specified by fd using writev().\nposition is the offset from the beginning of the file where this data should be written.\nIt is unsafe to use fs.writev() multiple times on the same file without waiting for the callback. For this scenario, use fs.createWriteStream().\nOn Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "kind": "function",
          "name": "writev",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "buffers",
              "type": {
                "text": "ReadonlyArray<NodeJS.ArrayBufferView>"
              }
            },
            {
              "name": "position",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "cb",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "writevSync",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "buffers",
              "type": {
                "text": "ReadonlyArray<NodeJS.ArrayBufferView>"
              }
            },
            {
              "name": "position",
              "optional": true,
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "See `writev`."
        },
        {
          "kind": "function",
          "name": "readv",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "buffers",
              "type": {
                "text": "ReadonlyArray<NodeJS.ArrayBufferView>"
              }
            },
            {
              "name": "cb",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readv",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "buffers",
              "type": {
                "text": "ReadonlyArray<NodeJS.ArrayBufferView>"
              }
            },
            {
              "name": "position",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "cb",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readvSync",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "fd",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "buffers",
              "type": {
                "text": "ReadonlyArray<NodeJS.ArrayBufferView>"
              }
            },
            {
              "name": "position",
              "optional": true,
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "See `readv`."
        },
        {
          "kind": "function",
          "name": "opendirSync",
          "return": {
            "type": {
              "text": "Dir"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "OpenDirOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "opendir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "cb",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, dir: Dir) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "opendir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "OpenDirOptions"
              }
            },
            {
              "name": "cb",
              "type": {
                "text": "(err: NodeJS.ErrnoException | null, dir: Dir) => void"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "BigIntStats",
          "members": [
            {
              "kind": "field",
              "name": "atimeNs",
              "type": {
                "text": "bigint"
              }
            },
            {
              "kind": "field",
              "name": "mtimeNs",
              "type": {
                "text": "bigint"
              }
            },
            {
              "kind": "field",
              "name": "ctimeNs",
              "type": {
                "text": "bigint"
              }
            },
            {
              "kind": "field",
              "name": "birthtimeNs",
              "type": {
                "text": "bigint"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "fs"
          }
        },
        {
          "kind": "js",
          "name": "promises",
          "declaration": {
            "name": "promises",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Stats",
          "declaration": {
            "name": "Stats",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Dirent",
          "declaration": {
            "name": "Dirent",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Dir",
          "declaration": {
            "name": "Dir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ReadStream",
          "declaration": {
            "name": "ReadStream",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "WriteStream",
          "declaration": {
            "name": "WriteStream",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "rename",
          "declaration": {
            "name": "rename",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "renameSync",
          "declaration": {
            "name": "renameSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "truncate",
          "declaration": {
            "name": "truncate",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "truncate",
          "declaration": {
            "name": "truncate",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "truncateSync",
          "declaration": {
            "name": "truncateSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ftruncate",
          "declaration": {
            "name": "ftruncate",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ftruncate",
          "declaration": {
            "name": "ftruncate",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ftruncateSync",
          "declaration": {
            "name": "ftruncateSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "chown",
          "declaration": {
            "name": "chown",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "chownSync",
          "declaration": {
            "name": "chownSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fchown",
          "declaration": {
            "name": "fchown",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fchownSync",
          "declaration": {
            "name": "fchownSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lchown",
          "declaration": {
            "name": "lchown",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lchownSync",
          "declaration": {
            "name": "lchownSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lutimes",
          "declaration": {
            "name": "lutimes",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lutimesSync",
          "declaration": {
            "name": "lutimesSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "chmod",
          "declaration": {
            "name": "chmod",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "chmodSync",
          "declaration": {
            "name": "chmodSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fchmod",
          "declaration": {
            "name": "fchmod",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fchmodSync",
          "declaration": {
            "name": "fchmodSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lchmod",
          "declaration": {
            "name": "lchmod",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lchmodSync",
          "declaration": {
            "name": "lchmodSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "stat",
          "declaration": {
            "name": "stat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "stat",
          "declaration": {
            "name": "stat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "stat",
          "declaration": {
            "name": "stat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "stat",
          "declaration": {
            "name": "stat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "statSync",
          "declaration": {
            "name": "statSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "statSync",
          "declaration": {
            "name": "statSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "statSync",
          "declaration": {
            "name": "statSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fstat",
          "declaration": {
            "name": "fstat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fstat",
          "declaration": {
            "name": "fstat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fstat",
          "declaration": {
            "name": "fstat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fstat",
          "declaration": {
            "name": "fstat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fstatSync",
          "declaration": {
            "name": "fstatSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fstatSync",
          "declaration": {
            "name": "fstatSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fstatSync",
          "declaration": {
            "name": "fstatSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lstat",
          "declaration": {
            "name": "lstat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lstat",
          "declaration": {
            "name": "lstat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lstat",
          "declaration": {
            "name": "lstat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lstat",
          "declaration": {
            "name": "lstat",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lstatSync",
          "declaration": {
            "name": "lstatSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lstatSync",
          "declaration": {
            "name": "lstatSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "lstatSync",
          "declaration": {
            "name": "lstatSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "link",
          "declaration": {
            "name": "link",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "linkSync",
          "declaration": {
            "name": "linkSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "symlink",
          "declaration": {
            "name": "symlink",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "symlink",
          "declaration": {
            "name": "symlink",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "symlinkSync",
          "declaration": {
            "name": "symlinkSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readlink",
          "declaration": {
            "name": "readlink",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readlink",
          "declaration": {
            "name": "readlink",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readlink",
          "declaration": {
            "name": "readlink",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readlink",
          "declaration": {
            "name": "readlink",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readlinkSync",
          "declaration": {
            "name": "readlinkSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readlinkSync",
          "declaration": {
            "name": "readlinkSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readlinkSync",
          "declaration": {
            "name": "readlinkSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "realpath",
          "declaration": {
            "name": "realpath",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "realpath",
          "declaration": {
            "name": "realpath",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "realpath",
          "declaration": {
            "name": "realpath",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "realpath",
          "declaration": {
            "name": "realpath",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "realpathSync",
          "declaration": {
            "name": "realpathSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "realpathSync",
          "declaration": {
            "name": "realpathSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "realpathSync",
          "declaration": {
            "name": "realpathSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unlink",
          "declaration": {
            "name": "unlink",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unlinkSync",
          "declaration": {
            "name": "unlinkSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "rmdir",
          "declaration": {
            "name": "rmdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "rmdir",
          "declaration": {
            "name": "rmdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "rmdirSync",
          "declaration": {
            "name": "rmdirSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "rm",
          "declaration": {
            "name": "rm",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "rm",
          "declaration": {
            "name": "rm",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "rmSync",
          "declaration": {
            "name": "rmSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdir",
          "declaration": {
            "name": "mkdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdir",
          "declaration": {
            "name": "mkdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdir",
          "declaration": {
            "name": "mkdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdir",
          "declaration": {
            "name": "mkdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdirSync",
          "declaration": {
            "name": "mkdirSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdirSync",
          "declaration": {
            "name": "mkdirSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdirSync",
          "declaration": {
            "name": "mkdirSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdtemp",
          "declaration": {
            "name": "mkdtemp",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdtemp",
          "declaration": {
            "name": "mkdtemp",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdtemp",
          "declaration": {
            "name": "mkdtemp",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdtemp",
          "declaration": {
            "name": "mkdtemp",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdtempSync",
          "declaration": {
            "name": "mkdtempSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdtempSync",
          "declaration": {
            "name": "mkdtempSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "mkdtempSync",
          "declaration": {
            "name": "mkdtempSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdir",
          "declaration": {
            "name": "readdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdir",
          "declaration": {
            "name": "readdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdir",
          "declaration": {
            "name": "readdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdir",
          "declaration": {
            "name": "readdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdir",
          "declaration": {
            "name": "readdir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdirSync",
          "declaration": {
            "name": "readdirSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdirSync",
          "declaration": {
            "name": "readdirSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdirSync",
          "declaration": {
            "name": "readdirSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdirSync",
          "declaration": {
            "name": "readdirSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "close",
          "declaration": {
            "name": "close",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "closeSync",
          "declaration": {
            "name": "closeSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "open",
          "declaration": {
            "name": "open",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "open",
          "declaration": {
            "name": "open",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "openSync",
          "declaration": {
            "name": "openSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "utimes",
          "declaration": {
            "name": "utimes",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "utimesSync",
          "declaration": {
            "name": "utimesSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "futimes",
          "declaration": {
            "name": "futimes",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "futimesSync",
          "declaration": {
            "name": "futimesSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fsync",
          "declaration": {
            "name": "fsync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fsyncSync",
          "declaration": {
            "name": "fsyncSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "write",
          "declaration": {
            "name": "write",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "write",
          "declaration": {
            "name": "write",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "write",
          "declaration": {
            "name": "write",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "write",
          "declaration": {
            "name": "write",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "write",
          "declaration": {
            "name": "write",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "write",
          "declaration": {
            "name": "write",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "write",
          "declaration": {
            "name": "write",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "writeSync",
          "declaration": {
            "name": "writeSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "writeSync",
          "declaration": {
            "name": "writeSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readSync",
          "declaration": {
            "name": "readSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readSync",
          "declaration": {
            "name": "readSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readFile",
          "declaration": {
            "name": "readFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readFile",
          "declaration": {
            "name": "readFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readFile",
          "declaration": {
            "name": "readFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readFile",
          "declaration": {
            "name": "readFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readFileSync",
          "declaration": {
            "name": "readFileSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readFileSync",
          "declaration": {
            "name": "readFileSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readFileSync",
          "declaration": {
            "name": "readFileSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "writeFile",
          "declaration": {
            "name": "writeFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "writeFile",
          "declaration": {
            "name": "writeFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "writeFileSync",
          "declaration": {
            "name": "writeFileSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "appendFile",
          "declaration": {
            "name": "appendFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "appendFile",
          "declaration": {
            "name": "appendFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "appendFileSync",
          "declaration": {
            "name": "appendFileSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "watchFile",
          "declaration": {
            "name": "watchFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "watchFile",
          "declaration": {
            "name": "watchFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unwatchFile",
          "declaration": {
            "name": "unwatchFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "exists",
          "declaration": {
            "name": "exists",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "existsSync",
          "declaration": {
            "name": "existsSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "access",
          "declaration": {
            "name": "access",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "access",
          "declaration": {
            "name": "access",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "accessSync",
          "declaration": {
            "name": "accessSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "createReadStream",
          "declaration": {
            "name": "createReadStream",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "createWriteStream",
          "declaration": {
            "name": "createWriteStream",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fdatasync",
          "declaration": {
            "name": "fdatasync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fdatasyncSync",
          "declaration": {
            "name": "fdatasyncSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "copyFile",
          "declaration": {
            "name": "copyFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "copyFile",
          "declaration": {
            "name": "copyFile",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "copyFileSync",
          "declaration": {
            "name": "copyFileSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "writev",
          "declaration": {
            "name": "writev",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "writev",
          "declaration": {
            "name": "writev",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "writevSync",
          "declaration": {
            "name": "writevSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readv",
          "declaration": {
            "name": "readv",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readv",
          "declaration": {
            "name": "readv",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readvSync",
          "declaration": {
            "name": "readvSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "opendirSync",
          "declaration": {
            "name": "opendirSync",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "opendir",
          "declaration": {
            "name": "opendir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "opendir",
          "declaration": {
            "name": "opendir",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "BigIntStats",
          "declaration": {
            "name": "BigIntStats",
            "module": "demo/node_modules/@types/node/fs.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/globals.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/globals.global.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/http.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "http"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/http2.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Http2ServerRequest",
          "members": [
            {
              "kind": "field",
              "name": "aborted",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "authority",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "connection",
              "type": {
                "text": "net.Socket | tls.TLSSocket"
              }
            },
            {
              "kind": "field",
              "name": "complete",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "headers",
              "type": {
                "text": "IncomingHttpHeaders"
              }
            },
            {
              "kind": "field",
              "name": "httpVersion",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "httpVersionMinor",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "httpVersionMajor",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "method",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "rawHeaders",
              "type": {
                "text": "string[]"
              }
            },
            {
              "kind": "field",
              "name": "rawTrailers",
              "type": {
                "text": "string[]"
              }
            },
            {
              "kind": "field",
              "name": "scheme",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "socket",
              "type": {
                "text": "net.Socket | tls.TLSSocket"
              }
            },
            {
              "kind": "field",
              "name": "stream",
              "type": {
                "text": "ServerHttp2Stream"
              }
            },
            {
              "kind": "field",
              "name": "trailers",
              "type": {
                "text": "IncomingHttpHeaders"
              }
            },
            {
              "kind": "field",
              "name": "url",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "setTimeout",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msecs",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "callback",
                  "optional": true,
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "Buffer | string | null"
                }
              },
              "parameters": [
                {
                  "name": "size",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"aborted\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(hadError: boolean, code: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"aborted\""
                  }
                },
                {
                  "name": "hadError",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "code",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "chunk",
                  "type": {
                    "text": "Buffer | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "err",
                  "type": {
                    "text": "Error"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"aborted\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(hadError: boolean, code: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"aborted\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(hadError: boolean, code: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"aborted\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(hadError: boolean, code: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"aborted\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(hadError: boolean, code: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"data\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(chunk: Buffer | string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"end\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"readable\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "Http2ServerResponse",
          "members": [
            {
              "kind": "field",
              "name": "connection",
              "type": {
                "text": "net.Socket | tls.TLSSocket"
              }
            },
            {
              "kind": "field",
              "name": "finished",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "headersSent",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "socket",
              "type": {
                "text": "net.Socket | tls.TLSSocket"
              }
            },
            {
              "kind": "field",
              "name": "stream",
              "type": {
                "text": "ServerHttp2Stream"
              }
            },
            {
              "kind": "field",
              "name": "sendDate",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "statusCode",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "statusMessage",
              "type": {
                "text": "''"
              }
            },
            {
              "kind": "method",
              "name": "addTrailers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "trailers",
                  "type": {
                    "text": "OutgoingHttpHeaders"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "end",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "optional": true,
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "end",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "string | Uint8Array"
                  }
                },
                {
                  "name": "callback",
                  "optional": true,
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "end",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "string | Uint8Array"
                  }
                },
                {
                  "name": "encoding",
                  "type": {
                    "text": "BufferEncoding"
                  }
                },
                {
                  "name": "callback",
                  "optional": true,
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getHeader",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getHeaderNames",
              "return": {
                "type": {
                  "text": "string[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "getHeaders",
              "return": {
                "type": {
                  "text": "OutgoingHttpHeaders"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasHeader",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeHeader",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setHeader",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "number | string | ReadonlyArray<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setTimeout",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msecs",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "callback",
                  "optional": true,
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "write",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "chunk",
                  "type": {
                    "text": "string | Uint8Array"
                  }
                },
                {
                  "name": "callback",
                  "optional": true,
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "write",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "chunk",
                  "type": {
                    "text": "string | Uint8Array"
                  }
                },
                {
                  "name": "encoding",
                  "type": {
                    "text": "BufferEncoding"
                  }
                },
                {
                  "name": "callback",
                  "optional": true,
                  "type": {
                    "text": "(err: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeContinue",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "writeHead",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "statusCode",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "headers",
                  "optional": true,
                  "type": {
                    "text": "OutgoingHttpHeaders"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "writeHead",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "statusCode",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "statusMessage",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "headers",
                  "optional": true,
                  "type": {
                    "text": "OutgoingHttpHeaders"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createPushResponse",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "headers",
                  "type": {
                    "text": "OutgoingHttpHeaders"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(err: Error | null, res: Http2ServerResponse) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(error: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "error",
                  "type": {
                    "text": "Error"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "src",
                  "type": {
                    "text": "stream.Readable"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "src",
                  "type": {
                    "text": "stream.Readable"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(error: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(error: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(error: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"close\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"drain\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"error\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(error: Error) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"finish\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"pipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "\"unpipe\""
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(src: stream.Readable) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependOnceListener",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(...args: any[]) => void"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "function",
          "name": "getDefaultSettings",
          "return": {
            "type": {
              "text": "Settings"
            }
          }
        },
        {
          "kind": "function",
          "name": "getPackedSettings",
          "return": {
            "type": {
              "text": "Buffer"
            }
          },
          "parameters": [
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getUnpackedSettings",
          "return": {
            "type": {
              "text": "Settings"
            }
          },
          "parameters": [
            {
              "name": "buf",
              "type": {
                "text": "Uint8Array"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createServer",
          "return": {
            "type": {
              "text": "Http2Server"
            }
          },
          "parameters": [
            {
              "name": "onRequestHandler",
              "optional": true,
              "type": {
                "text": "(request: Http2ServerRequest, response: Http2ServerResponse) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createServer",
          "return": {
            "type": {
              "text": "Http2Server"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "ServerOptions"
              }
            },
            {
              "name": "onRequestHandler",
              "optional": true,
              "type": {
                "text": "(request: Http2ServerRequest, response: Http2ServerResponse) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createSecureServer",
          "return": {
            "type": {
              "text": "Http2SecureServer"
            }
          },
          "parameters": [
            {
              "name": "onRequestHandler",
              "optional": true,
              "type": {
                "text": "(request: Http2ServerRequest, response: Http2ServerResponse) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createSecureServer",
          "return": {
            "type": {
              "text": "Http2SecureServer"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "SecureServerOptions"
              }
            },
            {
              "name": "onRequestHandler",
              "optional": true,
              "type": {
                "text": "(request: Http2ServerRequest, response: Http2ServerResponse) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "connect",
          "return": {
            "type": {
              "text": "ClientHttp2Session"
            }
          },
          "parameters": [
            {
              "name": "authority",
              "type": {
                "text": "string | url.URL"
              }
            },
            {
              "name": "listener",
              "type": {
                "text": "(session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "connect",
          "return": {
            "type": {
              "text": "ClientHttp2Session"
            }
          },
          "parameters": [
            {
              "name": "authority",
              "type": {
                "text": "string | url.URL"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "ClientSessionOptions | SecureClientSessionOptions"
              }
            },
            {
              "name": "listener",
              "optional": true,
              "type": {
                "text": "(session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "http2"
          }
        },
        {
          "kind": "js",
          "name": "OutgoingHttpHeaders",
          "declaration": {
            "name": "OutgoingHttpHeaders",
            "package": "node:http"
          }
        },
        {
          "kind": "js",
          "name": "Http2ServerRequest",
          "declaration": {
            "name": "Http2ServerRequest",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Http2ServerResponse",
          "declaration": {
            "name": "Http2ServerResponse",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDefaultSettings",
          "declaration": {
            "name": "getDefaultSettings",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPackedSettings",
          "declaration": {
            "name": "getPackedSettings",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getUnpackedSettings",
          "declaration": {
            "name": "getUnpackedSettings",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "createServer",
          "declaration": {
            "name": "createServer",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "createServer",
          "declaration": {
            "name": "createServer",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "createSecureServer",
          "declaration": {
            "name": "createSecureServer",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "createSecureServer",
          "declaration": {
            "name": "createSecureServer",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "connect",
          "declaration": {
            "name": "connect",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "connect",
          "declaration": {
            "name": "connect",
            "module": "demo/node_modules/@types/node/http2.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/https.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "https"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/index.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/inspector.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "inspector"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/module.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Module",
          "members": [
            {
              "kind": "method",
              "name": "runMain",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "wrap",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createRequireFromPath",
              "static": true,
              "return": {
                "type": {
                  "text": "NodeRequire"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createRequire",
              "static": true,
              "return": {
                "type": {
                  "text": "NodeRequire"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string | URL"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "builtinModules",
              "type": {
                "text": "string[]"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "Module",
              "type": {
                "text": "typeof Module"
              },
              "static": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Module",
            "module": "demo/node_modules/@types/node/module.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Module",
            "module": "demo/node_modules/@types/node/module.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/net.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "net"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/os.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "os"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/path.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "path",
          "type": {
            "text": "path.PlatformPath"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "path",
            "module": "demo/node_modules/@types/node/path.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "path",
            "module": "demo/node_modules/@types/node/path.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/perf_hooks.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "perf_hooks"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/process.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "process",
          "type": {
            "text": "NodeJS.Process"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "process",
            "module": "demo/node_modules/@types/node/process.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "process",
            "module": "demo/node_modules/@types/node/process.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/punycode.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "punycode"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/querystring.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "querystring"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/readline.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "readline"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/repl.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "repl"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/stream.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "internal",
          "members": [
            {
              "kind": "method",
              "name": "pipe",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "destination",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "{ end?: boolean; }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "once",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<any[]>"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "NodeEventTarget"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "demo/node_modules/@types/node/events.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "on",
              "static": true,
              "return": {
                "type": {
                  "text": "AsyncIterableIterator<any>"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "NodeJS.EventEmitter"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "demo/node_modules/@types/node/events.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "listenerCount",
              "static": true,
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "NodeJS.EventEmitter"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "demo/node_modules/@types/node/events.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMonitor",
              "type": {
                "text": "unique symbol"
              },
              "static": true,
              "description": "This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n`'error'` event is emitted, therefore the process will still crash if no\nregular `'error'` listener is installed.",
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "demo/node_modules/@types/node/events.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "captureRejectionSymbol",
              "type": {
                "text": "unique symbol"
              },
              "static": true,
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "demo/node_modules/@types/node/events.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "captureRejections",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "description": "Sets or gets the default captureRejection value for all emitters.",
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "demo/node_modules/@types/node/events.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultMaxListeners",
              "type": {
                "text": "number"
              },
              "static": true,
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "demo/node_modules/@types/node/events.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "EventEmitter",
            "module": "demo/node_modules/@types/node/stream.d.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "Stream",
          "superclass": {
            "name": "internal",
            "module": "demo/node_modules/@types/node/stream.d.ts"
          },
          "members": [
            {
              "kind": "method",
              "name": "pipe",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "destination",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "{ end?: boolean; }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "internal",
                "module": "demo/node_modules/@types/node/stream.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "once",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<any[]>"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "NodeEventTarget"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "internal",
                "module": "demo/node_modules/@types/node/stream.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "on",
              "static": true,
              "return": {
                "type": {
                  "text": "AsyncIterableIterator<any>"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "NodeJS.EventEmitter"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "internal",
                "module": "demo/node_modules/@types/node/stream.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "listenerCount",
              "static": true,
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "emitter",
                  "type": {
                    "text": "NodeJS.EventEmitter"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "string | symbol"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "internal",
                "module": "demo/node_modules/@types/node/stream.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorMonitor",
              "type": {
                "text": "unique symbol"
              },
              "static": true,
              "description": "This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n`'error'` event is emitted, therefore the process will still crash if no\nregular `'error'` listener is installed.",
              "inheritedFrom": {
                "name": "internal",
                "module": "demo/node_modules/@types/node/stream.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "captureRejectionSymbol",
              "type": {
                "text": "unique symbol"
              },
              "static": true,
              "inheritedFrom": {
                "name": "internal",
                "module": "demo/node_modules/@types/node/stream.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "captureRejections",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "description": "Sets or gets the default captureRejection value for all emitters.",
              "inheritedFrom": {
                "name": "internal",
                "module": "demo/node_modules/@types/node/stream.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultMaxListeners",
              "type": {
                "text": "number"
              },
              "static": true,
              "inheritedFrom": {
                "name": "internal",
                "module": "demo/node_modules/@types/node/stream.d.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Stream",
            "module": "demo/node_modules/@types/node/stream.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "internal",
            "module": "demo/node_modules/@types/node/stream.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/string_decoder.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "string_decoder"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/timers.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "timers"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/tls.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "tls"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/trace_events.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "trace_events"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/tty.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "tty"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/url.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "url"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/util.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "util"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/v8.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "v8"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/vm.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "vm"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/wasi.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "wasi"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/worker_threads.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "worker_threads"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/zlib.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "zlib"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/normalize-package-data/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "normalize",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "normalize.Input"
              }
            },
            {
              "name": "warn",
              "optional": true,
              "type": {
                "text": "normalize.WarnFn"
              }
            },
            {
              "name": "strict",
              "optional": true,
              "type": {
                "text": "boolean"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "normalize",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "normalize.Input"
              }
            },
            {
              "name": "strict",
              "optional": true,
              "type": {
                "text": "boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "normalize",
            "module": "demo/node_modules/@types/normalize-package-data/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/braces/lib/compile.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/braces/lib/constants.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/braces/lib/expand.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/braces/lib/parse.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/braces/lib/stringify.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/braces/lib/utils.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/chalk/types/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "chalk",
          "type": {
            "text": "Chalk & { supportsColor: ColorSupport }"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "chalk",
            "module": "demo/node_modules/chalk/types/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/commander/typings/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "commander",
          "type": {
            "text": "commander.CommanderStatic"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "commander",
            "module": "demo/node_modules/commander/typings/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/commondir/test/dirs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/commondir/example/dir.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/concat-map/example/map.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/concat-map/test/map.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/deepmerge/dist/cjs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/deepmerge/dist/umd.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/src/async.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncWalker",
          "members": [
            {
              "kind": "method",
              "name": "visit",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "BaseNode"
                  }
                },
                {
                  "name": "prop",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<BaseNode>"
                }
              }
            },
            {
              "kind": "field",
              "name": "should_skip",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "should_remove",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "replacement",
              "type": {
                "text": "BaseNode | null"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "WalkerContext"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "replace",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "remove",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "WalkerBase",
            "module": "/demo/node_modules/estree-walker/src/walker.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncWalker",
          "declaration": {
            "name": "AsyncWalker",
            "module": "demo/node_modules/estree-walker/src/async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/src/index.js",
      "declarations": [
        {
          "kind": "function",
          "name": "walk",
          "parameters": [
            {
              "name": "ast",
              "type": {
                "text": "BaseNode"
              }
            },
            {
              "name": "{ enter, leave }"
            },
            {
              "name": "walker",
              "type": {
                "text": "{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }"
              }
            }
          ],
          "return": {
            "type": {
              "text": "BaseNode"
            }
          }
        },
        {
          "kind": "function",
          "name": "asyncWalk",
          "parameters": [
            {
              "name": "ast",
              "type": {
                "text": "BaseNode"
              }
            },
            {
              "name": "{ enter, leave }"
            },
            {
              "name": "walker",
              "type": {
                "text": "{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Promise<BaseNode>"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "walk",
          "declaration": {
            "name": "walk",
            "module": "demo/node_modules/estree-walker/src/index.js"
          }
        },
        {
          "kind": "js",
          "name": "asyncWalk",
          "declaration": {
            "name": "asyncWalk",
            "module": "demo/node_modules/estree-walker/src/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/src/sync.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SyncWalker",
          "members": [
            {
              "kind": "method",
              "name": "visit",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "BaseNode"
                  }
                },
                {
                  "name": "prop",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "BaseNode"
                }
              }
            },
            {
              "kind": "field",
              "name": "should_skip",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "should_remove",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "replacement",
              "type": {
                "text": "BaseNode | null"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "WalkerContext"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "replace",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "remove",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "WalkerBase",
            "module": "/demo/node_modules/estree-walker/src/walker.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SyncWalker",
          "declaration": {
            "name": "SyncWalker",
            "module": "demo/node_modules/estree-walker/src/sync.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/src/walker.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WalkerBase",
          "members": [
            {
              "kind": "method",
              "name": "replace",
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "remove",
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WalkerBase",
          "declaration": {
            "name": "WalkerBase",
            "module": "demo/node_modules/estree-walker/src/walker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "FastGlob",
          "return": {
            "type": {
              "text": "Promise<EntryInternal[]>"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "PatternInternal | PatternInternal[]"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "OptionsInternal & EntryObjectPredicate"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "FastGlob",
          "return": {
            "type": {
              "text": "Promise<string[]>"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "PatternInternal | PatternInternal[]"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "OptionsInternal"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FastGlob",
            "module": "demo/node_modules/fast-glob/out/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/settings.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DEFAULT_FILE_SYSTEM_ADAPTER",
          "type": {
            "text": "FileSystemAdapter"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "Settings",
          "members": [
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "absolute",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "baseNameMatch",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "braceExpansion",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "caseSensitiveMatch",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "concurrency",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "cwd",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "deep",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "dot",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "extglob",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "followSymbolicLinks",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "fs",
              "type": {
                "text": "FileSystemAdapter"
              }
            },
            {
              "kind": "field",
              "name": "globstar",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "ignore",
              "type": {
                "text": "Pattern[]"
              }
            },
            {
              "kind": "field",
              "name": "markDirectories",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "objectMode",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "onlyDirectories",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "onlyFiles",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "stats",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "suppressErrors",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "throwErrorOnBrokenSymbolicLink",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "unique",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "_getValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getFileSystemMethods",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DEFAULT_FILE_SYSTEM_ADAPTER",
          "declaration": {
            "name": "DEFAULT_FILE_SYSTEM_ADAPTER",
            "module": "demo/node_modules/fast-glob/out/settings.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/fast-glob/out/settings.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/settings.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/types/async.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncWalker",
          "members": [
            {
              "kind": "field",
              "name": "enter",
              "type": {
                "text": "AsyncHandler"
              }
            },
            {
              "kind": "field",
              "name": "leave",
              "type": {
                "text": "AsyncHandler"
              }
            },
            {
              "kind": "method",
              "name": "visit",
              "return": {
                "type": {
                  "text": "Promise<BaseNode>"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "BaseNode"
                  }
                },
                {
                  "name": "prop",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "should_skip",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "should_remove",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "replacement",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "WalkerContext"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "replace",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "remove",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "WalkerBase",
            "module": "/demo/node_modules/estree-walker/types/walker.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncWalker",
          "declaration": {
            "name": "AsyncWalker",
            "module": "demo/node_modules/estree-walker/types/async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/types/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "walk",
          "return": {
            "type": {
              "text": "BaseNode"
            }
          },
          "parameters": [
            {
              "name": "ast",
              "type": {
                "text": "BaseNode"
              }
            },
            {
              "name": "{ enter, leave }",
              "type": {
                "text": "{\n    enter?: (this: {\n        skip: () => void;\n        remove: () => void;\n        replace: (node: import(\"estree\").BaseNode) => void;\n    }, node: import(\"estree\").BaseNode, parent: import(\"estree\").BaseNode, key: string, index: number) => void;\n    leave?: (this: {\n        skip: () => void;\n        remove: () => void;\n        replace: (node: import(\"estree\").BaseNode) => void;\n    }, node: import(\"estree\").BaseNode, parent: import(\"estree\").BaseNode, key: string, index: number) => void;\n}"
              }
            },
            {
              "name": "walker",
              "type": {
                "text": "{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "asyncWalk",
          "return": {
            "type": {
              "text": "Promise<BaseNode>"
            }
          },
          "parameters": [
            {
              "name": "ast",
              "type": {
                "text": "BaseNode"
              }
            },
            {
              "name": "{ enter, leave }",
              "type": {
                "text": "{\n    enter?: (this: {\n        skip: () => void;\n        remove: () => void;\n        replace: (node: import(\"estree\").BaseNode) => void;\n    }, node: import(\"estree\").BaseNode, parent: import(\"estree\").BaseNode, key: string, index: number) => Promise<void>;\n    leave?: (this: {\n        skip: () => void;\n        remove: () => void;\n        replace: (node: import(\"estree\").BaseNode) => void;\n    }, node: import(\"estree\").BaseNode, parent: import(\"estree\").BaseNode, key: string, index: number) => Promise<void>;\n}"
              }
            },
            {
              "name": "walker",
              "type": {
                "text": "{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "walk",
          "declaration": {
            "name": "walk",
            "module": "demo/node_modules/estree-walker/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "asyncWalk",
          "declaration": {
            "name": "asyncWalk",
            "module": "demo/node_modules/estree-walker/types/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/types/sync.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SyncWalker",
          "members": [
            {
              "kind": "field",
              "name": "enter",
              "type": {
                "text": "SyncHandler"
              }
            },
            {
              "kind": "field",
              "name": "leave",
              "type": {
                "text": "SyncHandler"
              }
            },
            {
              "kind": "method",
              "name": "visit",
              "return": {
                "type": {
                  "text": "BaseNode"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "BaseNode"
                  }
                },
                {
                  "name": "prop",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "should_skip",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "should_remove",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "replacement",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "WalkerContext"
              },
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "replace",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "remove",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "WalkerBase",
                "module": "demo/node_modules/estree-walker/types/walker.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "WalkerBase",
            "module": "/demo/node_modules/estree-walker/types/walker.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SyncWalker",
          "declaration": {
            "name": "SyncWalker",
            "module": "demo/node_modules/estree-walker/types/sync.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/types/walker.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WalkerBase",
          "members": [
            {
              "kind": "field",
              "name": "should_skip",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "should_remove",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "replacement",
              "type": {
                "text": "BaseNode | null"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "WalkerContext"
              }
            },
            {
              "kind": "method",
              "name": "replace",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "node",
                  "type": {
                    "text": "BaseNode"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "remove",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WalkerBase",
          "declaration": {
            "name": "WalkerBase",
            "module": "demo/node_modules/estree-walker/types/walker.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fastq/test/example.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fastq/test/promise.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fastq/test/test.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/has/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/has/test/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/function-bind/test/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-reference/dist/is-reference.es.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isReference",
          "parameters": [
            {
              "name": "node"
            },
            {
              "name": "parent"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "isReference",
            "module": "demo/node_modules/is-reference/dist/is-reference.es.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-reference/dist/is-reference.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/Farm.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Farm",
          "members": [
            {
              "kind": "field",
              "name": "_computeWorkerKey",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_cacheKeys",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_callback",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_last",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_locks",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_numOfWorkers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_offset",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_queue",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "doWork",
              "return": {
                "type": {
                  "text": "PromiseWithCustomMessage<unknown>"
                }
              },
              "parameters": [
                {
                  "name": "method",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "args",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_getNextTask",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_process",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_enqueue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_push",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lock",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_unlock",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isLocked",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Farm",
            "module": "demo/node_modules/jest-worker/build/Farm.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/Farm.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/WorkerPool.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WorkerPool",
          "members": [
            {
              "kind": "method",
              "name": "send",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "workerId",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "request",
                  "type": {
                    "text": "ChildMessage"
                  }
                },
                {
                  "name": "onStart",
                  "type": {
                    "text": "OnStart"
                  }
                },
                {
                  "name": "onEnd",
                  "type": {
                    "text": "OnEnd"
                  }
                },
                {
                  "name": "onCustomMessage",
                  "type": {
                    "text": "OnCustomMessage"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createWorker",
              "return": {
                "type": {
                  "text": "WorkerInterface"
                }
              },
              "parameters": [
                {
                  "name": "workerOptions",
                  "type": {
                    "text": "WorkerOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_stderr",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseWorkerPool",
                "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_stdout",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseWorkerPool",
                "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "WorkerPoolOptions"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseWorkerPool",
                "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_workers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseWorkerPool",
                "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStderr",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream"
                }
              },
              "inheritedFrom": {
                "name": "BaseWorkerPool",
                "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStdout",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream"
                }
              },
              "inheritedFrom": {
                "name": "BaseWorkerPool",
                "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getWorkers",
              "return": {
                "type": {
                  "text": "Array<WorkerInterface>"
                }
              },
              "inheritedFrom": {
                "name": "BaseWorkerPool",
                "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getWorkerById",
              "return": {
                "type": {
                  "text": "WorkerInterface"
                }
              },
              "parameters": [
                {
                  "name": "workerId",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseWorkerPool",
                "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "end",
              "return": {
                "type": {
                  "text": "Promise<PoolExitResult>"
                }
              },
              "inheritedFrom": {
                "name": "BaseWorkerPool",
                "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseWorkerPool",
            "module": "/demo/node_modules/jest-worker/build/base/BaseWorkerPool"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "WorkerPool",
            "module": "demo/node_modules/jest-worker/build/WorkerPool.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/WorkerPool.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/index.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Jest farm (publicly called \"Worker\") is a class that allows you to queue\nmethods across multiple child processes, in order to parallelize work. This\nis done by providing an absolute path to a module that will be loaded on each\nof the child processes, and bridged to the main process.\n\nBridged methods are specified by using the \"exposedMethods\" property of the\n\"options\" object. This is an array of strings, where each of them corresponds\nto the exported name in the loaded module.\n\nYou can also control the amount of workers by using the \"numWorkers\" property\nof the \"options\" object, and the settings passed to fork the process through\nthe \"forkOptions\" property. The amount of workers defaults to the amount of\nCPUS minus one.\n\nQueueing calls can be done in two ways:\n  - Standard method: calls will be redirected to the first available worker,\n    so they will get executed as soon as they can.\n\n  - Sticky method: if a \"computeWorkerKey\" method is provided within the\n    config, the resulting string of this method will be used as a key.\n    Every time this key is returned, it is guaranteed that your job will be\n    processed by the same worker. This is specially useful if your workers\n    are caching results.",
          "name": "JestWorker",
          "members": [
            {
              "kind": "field",
              "name": "_ending",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_farm",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_workerPool",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_bindExposedWorkerMethods",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_callFunctionWithArgs",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getStderr",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream"
                }
              }
            },
            {
              "kind": "method",
              "name": "getStdout",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream"
                }
              }
            },
            {
              "kind": "method",
              "name": "end",
              "return": {
                "type": {
                  "text": "Promise<PoolExitResult>"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "messageParent",
          "declaration": {
            "name": "default",
            "module": "./workers/messageParent"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "JestWorker",
            "module": "demo/node_modules/jest-worker/build/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PromiseWithCustomMessage",
          "declaration": {
            "name": "PromiseWithCustomMessage",
            "module": "demo/node_modules/jest-worker/build/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/types.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CHILD_MESSAGE_INITIALIZE",
          "type": {
            "text": "0"
          }
        },
        {
          "kind": "variable",
          "name": "CHILD_MESSAGE_CALL",
          "type": {
            "text": "1"
          }
        },
        {
          "kind": "variable",
          "name": "CHILD_MESSAGE_END",
          "type": {
            "text": "2"
          }
        },
        {
          "kind": "variable",
          "name": "PARENT_MESSAGE_OK",
          "type": {
            "text": "0"
          }
        },
        {
          "kind": "variable",
          "name": "PARENT_MESSAGE_CLIENT_ERROR",
          "type": {
            "text": "1"
          }
        },
        {
          "kind": "variable",
          "name": "PARENT_MESSAGE_SETUP_ERROR",
          "type": {
            "text": "2"
          }
        },
        {
          "kind": "variable",
          "name": "PARENT_MESSAGE_CUSTOM",
          "type": {
            "text": "3"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CHILD_MESSAGE_INITIALIZE",
          "declaration": {
            "name": "CHILD_MESSAGE_INITIALIZE",
            "module": "demo/node_modules/jest-worker/build/types.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CHILD_MESSAGE_CALL",
          "declaration": {
            "name": "CHILD_MESSAGE_CALL",
            "module": "demo/node_modules/jest-worker/build/types.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CHILD_MESSAGE_END",
          "declaration": {
            "name": "CHILD_MESSAGE_END",
            "module": "demo/node_modules/jest-worker/build/types.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PARENT_MESSAGE_OK",
          "declaration": {
            "name": "PARENT_MESSAGE_OK",
            "module": "demo/node_modules/jest-worker/build/types.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PARENT_MESSAGE_CLIENT_ERROR",
          "declaration": {
            "name": "PARENT_MESSAGE_CLIENT_ERROR",
            "module": "demo/node_modules/jest-worker/build/types.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PARENT_MESSAGE_SETUP_ERROR",
          "declaration": {
            "name": "PARENT_MESSAGE_SETUP_ERROR",
            "module": "demo/node_modules/jest-worker/build/types.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PARENT_MESSAGE_CUSTOM",
          "declaration": {
            "name": "PARENT_MESSAGE_CUSTOM",
            "module": "demo/node_modules/jest-worker/build/types.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ForkOptions",
          "declaration": {
            "name": "ForkOptions",
            "module": "demo/node_modules/jest-worker/build/types.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/types.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-core-module/test/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/lines-and-columns/dist/index.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LinesAndColumns",
          "members": [
            {
              "kind": "field",
              "name": "string",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "offsets",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "locationForIndex",
              "return": {
                "type": {
                  "text": "SourceLocation | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "indexForLocation",
              "return": {
                "type": {
                  "text": "number | null"
                }
              },
              "parameters": [
                {
                  "name": "location",
                  "type": {
                    "text": "SourceLocation"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "lengthOfLine",
              "privacy": "private",
              "parameters": [
                {
                  "name": "line"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LinesAndColumns",
            "module": "demo/node_modules/lines-and-columns/dist/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/lines-and-columns/dist/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/m-fs/dist/main.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "nodeWriteFileAsync",
          "type": {
            "text": "typeof fs.promises.writeFile"
          }
        },
        {
          "kind": "variable",
          "name": "readFileAsync",
          "type": {
            "text": "typeof fs.promises.readFile"
          }
        },
        {
          "kind": "variable",
          "name": "statAsync",
          "type": {
            "text": "typeof fs.promises.stat"
          }
        },
        {
          "kind": "variable",
          "name": "readdirAsync",
          "type": {
            "text": "typeof fs.promises.readdir"
          }
        },
        {
          "kind": "function",
          "name": "readTextFileAsync",
          "return": {
            "type": {
              "text": "Promise<string>"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "writeFileAsync",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "data",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "fs.WriteFileOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "statOrNullAsync",
          "return": {
            "type": {
              "text": "Promise<fs.Stats | null>"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "pathExists",
          "return": {
            "type": {
              "text": "Promise<boolean>"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "fileExists",
          "return": {
            "type": {
              "text": "Promise<boolean>"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "dirExists",
          "return": {
            "type": {
              "text": "Promise<boolean>"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "subPaths",
          "return": {
            "type": {
              "text": "Promise<string[]>"
            }
          },
          "parameters": [
            {
              "name": "dir",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "(fs.BaseEncodingOptions & {\n    withFileTypes?: false;\n}) | BufferEncoding | null"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "subPathsWithType",
          "return": {
            "type": {
              "text": "Promise<PathInfo[]>"
            }
          },
          "parameters": [
            {
              "name": "dir",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "(fs.BaseEncodingOptions & {\n    withFileTypes?: false;\n}) | BufferEncoding | null"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "subDirs",
          "return": {
            "type": {
              "text": "Promise<string[]>"
            }
          },
          "parameters": [
            {
              "name": "dir",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "subFiles",
          "return": {
            "type": {
              "text": "Promise<string[]>"
            }
          },
          "parameters": [
            {
              "name": "dir",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "nodeWriteFileAsync",
          "declaration": {
            "name": "nodeWriteFileAsync",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readFileAsync",
          "declaration": {
            "name": "readFileAsync",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "statAsync",
          "declaration": {
            "name": "statAsync",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdirAsync",
          "declaration": {
            "name": "readdirAsync",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readTextFileAsync",
          "declaration": {
            "name": "readTextFileAsync",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "writeFileAsync",
          "declaration": {
            "name": "writeFileAsync",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "statOrNullAsync",
          "declaration": {
            "name": "statOrNullAsync",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "pathExists",
          "declaration": {
            "name": "pathExists",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fileExists",
          "declaration": {
            "name": "fileExists",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "dirExists",
          "declaration": {
            "name": "dirExists",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "subPaths",
          "declaration": {
            "name": "subPaths",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "subPathsWithType",
          "declaration": {
            "name": "subPathsWithType",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "subDirs",
          "declaration": {
            "name": "subDirs",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "subFiles",
          "declaration": {
            "name": "subFiles",
            "module": "demo/node_modules/m-fs/dist/main.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/m-fs/dist/main.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "nodeWriteFileAsync",
          "type": {
            "text": "fs.promises"
          }
        },
        {
          "kind": "variable",
          "name": "readFileAsync",
          "type": {
            "text": "fs.promises"
          }
        },
        {
          "kind": "variable",
          "name": "statAsync",
          "type": {
            "text": "fs.promises"
          }
        },
        {
          "kind": "variable",
          "name": "readdirAsync",
          "type": {
            "text": "fs.promises"
          }
        },
        {
          "kind": "function",
          "name": "readTextFileAsync",
          "parameters": [
            {
              "name": "path"
            }
          ]
        },
        {
          "kind": "function",
          "name": "writeFileAsync",
          "parameters": [
            {
              "name": "path"
            },
            {
              "name": "data"
            },
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "function",
          "name": "statOrNullAsync",
          "parameters": [
            {
              "name": "path"
            }
          ]
        },
        {
          "kind": "function",
          "name": "pathExists",
          "parameters": [
            {
              "name": "path"
            }
          ]
        },
        {
          "kind": "function",
          "name": "fileExists",
          "parameters": [
            {
              "name": "path"
            }
          ]
        },
        {
          "kind": "function",
          "name": "dirExists",
          "parameters": [
            {
              "name": "path"
            }
          ]
        },
        {
          "kind": "function",
          "name": "subPaths",
          "parameters": [
            {
              "name": "dir"
            },
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "function",
          "name": "subPathsWithType",
          "parameters": [
            {
              "name": "dir"
            },
            {
              "name": "options"
            }
          ]
        },
        {
          "kind": "function",
          "name": "subDirs",
          "parameters": [
            {
              "name": "dir"
            }
          ]
        },
        {
          "kind": "function",
          "name": "subFiles",
          "parameters": [
            {
              "name": "dir"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "nodeWriteFileAsync",
          "declaration": {
            "name": "nodeWriteFileAsync",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "readFileAsync",
          "declaration": {
            "name": "readFileAsync",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "statAsync",
          "declaration": {
            "name": "statAsync",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "readdirAsync",
          "declaration": {
            "name": "readdirAsync",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "readTextFileAsync",
          "declaration": {
            "name": "readTextFileAsync",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "writeFileAsync",
          "declaration": {
            "name": "writeFileAsync",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "statOrNullAsync",
          "declaration": {
            "name": "statOrNullAsync",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "pathExists",
          "declaration": {
            "name": "pathExists",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "fileExists",
          "declaration": {
            "name": "fileExists",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "dirExists",
          "declaration": {
            "name": "dirExists",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "subPaths",
          "declaration": {
            "name": "subPaths",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "subPathsWithType",
          "declaration": {
            "name": "subPathsWithType",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "subDirs",
          "declaration": {
            "name": "subDirs",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        },
        {
          "kind": "js",
          "name": "subFiles",
          "declaration": {
            "name": "subFiles",
            "module": "demo/node_modules/m-fs/dist/main.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/magic-string/dist/magic-string.cjs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/magic-string/dist/magic-string.es.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "SourceMap"
        },
        {
          "kind": "variable",
          "name": "MagicString"
        },
        {
          "kind": "variable",
          "name": "Bundle"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MagicString",
            "module": "demo/node_modules/magic-string/dist/magic-string.es.js"
          }
        },
        {
          "kind": "js",
          "name": "Bundle",
          "declaration": {
            "name": "Bundle",
            "module": "demo/node_modules/magic-string/dist/magic-string.es.js"
          }
        },
        {
          "kind": "js",
          "name": "SourceMap",
          "declaration": {
            "name": "SourceMap",
            "module": "demo/node_modules/magic-string/dist/magic-string.es.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/magic-string/dist/magic-string.umd.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/normalize-package-data/lib/extract_description.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/normalize-package-data/lib/fixer.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/normalize-package-data/lib/make_warning.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/normalize-package-data/lib/normalize.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/normalize-package-data/lib/safe_format.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/picomatch/lib/constants.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/picomatch/lib/parse.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/picomatch/lib/picomatch.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/picomatch/lib/scan.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/picomatch/lib/utils.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/example/async.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/example/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/lib/async.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/lib/caller.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/lib/core.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/lib/is-core.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/lib/node-modules-paths.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/lib/normalize-options.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/lib/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/loadConfigFile.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/rollup.browser.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/rollup.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "VERSION",
          "type": {
            "text": "string"
          }
        },
        {
          "kind": "function",
          "name": "rollup",
          "return": {
            "type": {
              "text": "Promise<RollupBuild>"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "RollupOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "watch",
          "return": {
            "type": {
              "text": "RollupWatcher"
            }
          },
          "parameters": [
            {
              "name": "config",
              "type": {
                "text": "RollupWatchOptions | RollupWatchOptions[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VERSION",
          "declaration": {
            "name": "VERSION",
            "module": "demo/node_modules/rollup/dist/rollup.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "rollup",
          "declaration": {
            "name": "rollup",
            "module": "demo/node_modules/rollup/dist/rollup.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "demo/node_modules/rollup/dist/rollup.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/rollup.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/reusify/benchmarks/createNoCodeFunction.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/reusify/benchmarks/fib.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/reusify/benchmarks/reuseNoCodeFunction.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/core.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/dotdot.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/faulty_basedir.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/filter.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/filter_sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/mock.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/mock_sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/module_dir.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/node-modules-paths.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/node_path.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/nonstring.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/pathfilter.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/precedence.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver_sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/shadowed_core.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/subdirs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/symlinks.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/dist/source-map.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/array-set.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/base64-vlq.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/base64.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/binary-search.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/mapping-list.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/read-wasm.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/source-map-consumer.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/source-map-generator.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/source-node.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/util.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map/lib/wasm.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/sourcemap-codec/dist/sourcemap-codec.es.js",
      "declarations": [
        {
          "kind": "function",
          "name": "decode",
          "parameters": [
            {
              "name": "mappings"
            }
          ]
        },
        {
          "kind": "function",
          "name": "encode",
          "parameters": [
            {
              "name": "decoded"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "decode",
          "declaration": {
            "name": "decode",
            "module": "demo/node_modules/sourcemap-codec/dist/sourcemap-codec.es.js"
          }
        },
        {
          "kind": "js",
          "name": "encode",
          "declaration": {
            "name": "encode",
            "module": "demo/node_modules/sourcemap-codec/dist/sourcemap-codec.es.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/sourcemap-codec/dist/sourcemap-codec.umd.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/dist/bundle.min.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/tools/domprops.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "domprops",
          "type": {
            "text": "array"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "domprops",
          "declaration": {
            "name": "domprops",
            "module": "demo/node_modules/terser/tools/domprops.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/tools/terser.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "minify",
          "return": {
            "type": {
              "text": "Promise<MinifyOutput>"
            }
          },
          "parameters": [
            {
              "name": "files",
              "type": {
                "text": "string | string[] | { [file: string]: string }"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "MinifyOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "minify",
          "declaration": {
            "name": "minify",
            "module": "demo/node_modules/terser/tools/terser.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/ast.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AST_Token",
          "members": [
            {
              "kind": "field",
              "name": "nlb"
            },
            {
              "kind": "field",
              "name": "quote"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "AST_Node"
        },
        {
          "kind": "variable",
          "name": "AST_Statement"
        },
        {
          "kind": "variable",
          "name": "AST_Debugger"
        },
        {
          "kind": "variable",
          "name": "AST_Directive"
        },
        {
          "kind": "variable",
          "name": "AST_SimpleStatement"
        },
        {
          "kind": "function",
          "name": "walk_body",
          "parameters": [
            {
              "name": "node"
            },
            {
              "name": "visitor"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "AST_Block"
        },
        {
          "kind": "variable",
          "name": "AST_BlockStatement"
        },
        {
          "kind": "variable",
          "name": "AST_EmptyStatement"
        },
        {
          "kind": "variable",
          "name": "AST_StatementWithBody"
        },
        {
          "kind": "variable",
          "name": "AST_LabeledStatement"
        },
        {
          "kind": "variable",
          "name": "AST_IterationStatement"
        },
        {
          "kind": "variable",
          "name": "AST_DWLoop"
        },
        {
          "kind": "variable",
          "name": "AST_Do"
        },
        {
          "kind": "variable",
          "name": "AST_While"
        },
        {
          "kind": "variable",
          "name": "AST_For"
        },
        {
          "kind": "variable",
          "name": "AST_ForIn"
        },
        {
          "kind": "variable",
          "name": "AST_ForOf"
        },
        {
          "kind": "variable",
          "name": "AST_With"
        },
        {
          "kind": "variable",
          "name": "AST_Scope"
        },
        {
          "kind": "variable",
          "name": "AST_Toplevel"
        },
        {
          "kind": "variable",
          "name": "AST_Expansion"
        },
        {
          "kind": "variable",
          "name": "AST_Lambda"
        },
        {
          "kind": "variable",
          "name": "AST_Accessor"
        },
        {
          "kind": "variable",
          "name": "AST_Function"
        },
        {
          "kind": "variable",
          "name": "AST_Arrow"
        },
        {
          "kind": "variable",
          "name": "AST_Defun"
        },
        {
          "kind": "variable",
          "name": "AST_Destructuring"
        },
        {
          "kind": "variable",
          "name": "AST_PrefixedTemplateString"
        },
        {
          "kind": "variable",
          "name": "AST_TemplateString"
        },
        {
          "kind": "variable",
          "name": "AST_TemplateSegment"
        },
        {
          "kind": "variable",
          "name": "AST_Jump"
        },
        {
          "kind": "variable",
          "name": "AST_Exit"
        },
        {
          "kind": "variable",
          "name": "AST_Return"
        },
        {
          "kind": "variable",
          "name": "AST_Throw"
        },
        {
          "kind": "variable",
          "name": "AST_LoopControl"
        },
        {
          "kind": "variable",
          "name": "AST_Break"
        },
        {
          "kind": "variable",
          "name": "AST_Continue"
        },
        {
          "kind": "variable",
          "name": "AST_Await"
        },
        {
          "kind": "variable",
          "name": "AST_Yield"
        },
        {
          "kind": "variable",
          "name": "AST_If"
        },
        {
          "kind": "variable",
          "name": "AST_Switch"
        },
        {
          "kind": "variable",
          "name": "AST_SwitchBranch"
        },
        {
          "kind": "variable",
          "name": "AST_Default"
        },
        {
          "kind": "variable",
          "name": "AST_Case"
        },
        {
          "kind": "variable",
          "name": "AST_Try"
        },
        {
          "kind": "variable",
          "name": "AST_Catch"
        },
        {
          "kind": "variable",
          "name": "AST_Finally"
        },
        {
          "kind": "variable",
          "name": "AST_Definitions"
        },
        {
          "kind": "variable",
          "name": "AST_Var"
        },
        {
          "kind": "variable",
          "name": "AST_Let"
        },
        {
          "kind": "variable",
          "name": "AST_Const"
        },
        {
          "kind": "variable",
          "name": "AST_VarDef"
        },
        {
          "kind": "variable",
          "name": "AST_NameMapping"
        },
        {
          "kind": "variable",
          "name": "AST_Import"
        },
        {
          "kind": "variable",
          "name": "AST_ImportMeta"
        },
        {
          "kind": "variable",
          "name": "AST_Export"
        },
        {
          "kind": "variable",
          "name": "AST_Call"
        },
        {
          "kind": "variable",
          "name": "AST_New"
        },
        {
          "kind": "variable",
          "name": "AST_Sequence"
        },
        {
          "kind": "variable",
          "name": "AST_PropAccess"
        },
        {
          "kind": "variable",
          "name": "AST_Dot"
        },
        {
          "kind": "variable",
          "name": "AST_DotHash"
        },
        {
          "kind": "variable",
          "name": "AST_Sub"
        },
        {
          "kind": "variable",
          "name": "AST_Chain"
        },
        {
          "kind": "variable",
          "name": "AST_Unary"
        },
        {
          "kind": "variable",
          "name": "AST_UnaryPrefix"
        },
        {
          "kind": "variable",
          "name": "AST_UnaryPostfix"
        },
        {
          "kind": "variable",
          "name": "AST_Binary"
        },
        {
          "kind": "variable",
          "name": "AST_Conditional"
        },
        {
          "kind": "variable",
          "name": "AST_Assign"
        },
        {
          "kind": "variable",
          "name": "AST_DefaultAssign"
        },
        {
          "kind": "variable",
          "name": "AST_Array"
        },
        {
          "kind": "variable",
          "name": "AST_Object"
        },
        {
          "kind": "variable",
          "name": "AST_ObjectProperty"
        },
        {
          "kind": "variable",
          "name": "AST_ObjectKeyVal"
        },
        {
          "kind": "variable",
          "name": "AST_PrivateSetter"
        },
        {
          "kind": "variable",
          "name": "AST_PrivateGetter"
        },
        {
          "kind": "variable",
          "name": "AST_ObjectSetter"
        },
        {
          "kind": "variable",
          "name": "AST_ObjectGetter"
        },
        {
          "kind": "variable",
          "name": "AST_ConciseMethod"
        },
        {
          "kind": "variable",
          "name": "AST_PrivateMethod"
        },
        {
          "kind": "variable",
          "name": "AST_Class"
        },
        {
          "kind": "variable",
          "name": "AST_ClassProperty"
        },
        {
          "kind": "variable",
          "name": "AST_ClassPrivateProperty"
        },
        {
          "kind": "variable",
          "name": "AST_DefClass"
        },
        {
          "kind": "variable",
          "name": "AST_ClassExpression"
        },
        {
          "kind": "variable",
          "name": "AST_Symbol"
        },
        {
          "kind": "variable",
          "name": "AST_NewTarget"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolDeclaration"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolVar"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolBlockDeclaration"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolConst"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolLet"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolFunarg"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolDefun"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolMethod"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolClassProperty"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolLambda"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolDefClass"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolClass"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolCatch"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolImport"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolImportForeign"
        },
        {
          "kind": "variable",
          "name": "AST_Label"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolRef"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolExport"
        },
        {
          "kind": "variable",
          "name": "AST_SymbolExportForeign"
        },
        {
          "kind": "variable",
          "name": "AST_LabelRef"
        },
        {
          "kind": "variable",
          "name": "AST_This"
        },
        {
          "kind": "variable",
          "name": "AST_Super"
        },
        {
          "kind": "variable",
          "name": "AST_Constant"
        },
        {
          "kind": "variable",
          "name": "AST_String"
        },
        {
          "kind": "variable",
          "name": "AST_Number"
        },
        {
          "kind": "variable",
          "name": "AST_BigInt"
        },
        {
          "kind": "variable",
          "name": "AST_RegExp"
        },
        {
          "kind": "variable",
          "name": "AST_Atom"
        },
        {
          "kind": "variable",
          "name": "AST_Null"
        },
        {
          "kind": "variable",
          "name": "AST_NaN"
        },
        {
          "kind": "variable",
          "name": "AST_Undefined"
        },
        {
          "kind": "variable",
          "name": "AST_Hole"
        },
        {
          "kind": "variable",
          "name": "AST_Infinity"
        },
        {
          "kind": "variable",
          "name": "AST_Boolean"
        },
        {
          "kind": "variable",
          "name": "AST_False"
        },
        {
          "kind": "variable",
          "name": "AST_True"
        },
        {
          "kind": "function",
          "name": "walk",
          "parameters": [
            {
              "name": "node"
            },
            {
              "name": "cb"
            },
            {
              "name": "to_visit",
              "default": "[node]"
            }
          ],
          "description": "Walk nodes in depth-first search fashion.\nCallback can return `walk_abort` symbol to stop iteration.\nIt can also return `true` to stop iteration just for child nodes.\nIteration can be stopped and continued by passing the `to_visit` argument,\nwhich is given to the callback in the second argument."
        },
        {
          "kind": "function",
          "name": "walk_parent",
          "parameters": [
            {
              "name": "node"
            },
            {
              "name": "cb"
            },
            {
              "name": "initial_stack"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "walk_abort"
        },
        {
          "kind": "class",
          "description": "",
          "name": "TreeWalker",
          "members": [
            {
              "kind": "method",
              "name": "_visit",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "descend"
                }
              ]
            },
            {
              "kind": "method",
              "name": "parent",
              "parameters": [
                {
                  "name": "n"
                }
              ]
            },
            {
              "kind": "method",
              "name": "push",
              "parameters": [
                {
                  "name": "node"
                }
              ]
            },
            {
              "kind": "method",
              "name": "pop"
            },
            {
              "kind": "method",
              "name": "self"
            },
            {
              "kind": "method",
              "name": "find_parent",
              "parameters": [
                {
                  "name": "type"
                }
              ]
            },
            {
              "kind": "method",
              "name": "has_directive",
              "parameters": [
                {
                  "name": "type"
                }
              ]
            },
            {
              "kind": "method",
              "name": "loopcontrol_target",
              "parameters": [
                {
                  "name": "node"
                }
              ]
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TreeTransformer",
          "superclass": {
            "name": "TreeWalker",
            "module": "demo/node_modules/terser/lib/ast.js"
          },
          "members": [
            {
              "kind": "method",
              "name": "_visit",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "descend"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "parent",
              "parameters": [
                {
                  "name": "n"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "push",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "pop",
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "self",
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "find_parent",
              "parameters": [
                {
                  "name": "type"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "has_directive",
              "parameters": [
                {
                  "name": "type"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "loopcontrol_target",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "_PURE",
          "type": {
            "text": "number"
          }
        },
        {
          "kind": "variable",
          "name": "_INLINE",
          "type": {
            "text": "number"
          }
        },
        {
          "kind": "variable",
          "name": "_NOINLINE",
          "type": {
            "text": "number"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AST_Accessor",
          "declaration": {
            "name": "AST_Accessor",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Array",
          "declaration": {
            "name": "AST_Array",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Arrow",
          "declaration": {
            "name": "AST_Arrow",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Assign",
          "declaration": {
            "name": "AST_Assign",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Atom",
          "declaration": {
            "name": "AST_Atom",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Await",
          "declaration": {
            "name": "AST_Await",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_BigInt",
          "declaration": {
            "name": "AST_BigInt",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Binary",
          "declaration": {
            "name": "AST_Binary",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Block",
          "declaration": {
            "name": "AST_Block",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_BlockStatement",
          "declaration": {
            "name": "AST_BlockStatement",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Boolean",
          "declaration": {
            "name": "AST_Boolean",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Break",
          "declaration": {
            "name": "AST_Break",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Call",
          "declaration": {
            "name": "AST_Call",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Case",
          "declaration": {
            "name": "AST_Case",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Catch",
          "declaration": {
            "name": "AST_Catch",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Chain",
          "declaration": {
            "name": "AST_Chain",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Class",
          "declaration": {
            "name": "AST_Class",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ClassExpression",
          "declaration": {
            "name": "AST_ClassExpression",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ClassPrivateProperty",
          "declaration": {
            "name": "AST_ClassPrivateProperty",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ClassProperty",
          "declaration": {
            "name": "AST_ClassProperty",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ConciseMethod",
          "declaration": {
            "name": "AST_ConciseMethod",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Conditional",
          "declaration": {
            "name": "AST_Conditional",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Const",
          "declaration": {
            "name": "AST_Const",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Constant",
          "declaration": {
            "name": "AST_Constant",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Continue",
          "declaration": {
            "name": "AST_Continue",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Debugger",
          "declaration": {
            "name": "AST_Debugger",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Default",
          "declaration": {
            "name": "AST_Default",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_DefaultAssign",
          "declaration": {
            "name": "AST_DefaultAssign",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_DefClass",
          "declaration": {
            "name": "AST_DefClass",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Definitions",
          "declaration": {
            "name": "AST_Definitions",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Defun",
          "declaration": {
            "name": "AST_Defun",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Destructuring",
          "declaration": {
            "name": "AST_Destructuring",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Directive",
          "declaration": {
            "name": "AST_Directive",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Do",
          "declaration": {
            "name": "AST_Do",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Dot",
          "declaration": {
            "name": "AST_Dot",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_DotHash",
          "declaration": {
            "name": "AST_DotHash",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_DWLoop",
          "declaration": {
            "name": "AST_DWLoop",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_EmptyStatement",
          "declaration": {
            "name": "AST_EmptyStatement",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Exit",
          "declaration": {
            "name": "AST_Exit",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Expansion",
          "declaration": {
            "name": "AST_Expansion",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Export",
          "declaration": {
            "name": "AST_Export",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_False",
          "declaration": {
            "name": "AST_False",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Finally",
          "declaration": {
            "name": "AST_Finally",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_For",
          "declaration": {
            "name": "AST_For",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ForIn",
          "declaration": {
            "name": "AST_ForIn",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ForOf",
          "declaration": {
            "name": "AST_ForOf",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Function",
          "declaration": {
            "name": "AST_Function",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Hole",
          "declaration": {
            "name": "AST_Hole",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_If",
          "declaration": {
            "name": "AST_If",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Import",
          "declaration": {
            "name": "AST_Import",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ImportMeta",
          "declaration": {
            "name": "AST_ImportMeta",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Infinity",
          "declaration": {
            "name": "AST_Infinity",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_IterationStatement",
          "declaration": {
            "name": "AST_IterationStatement",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Jump",
          "declaration": {
            "name": "AST_Jump",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Label",
          "declaration": {
            "name": "AST_Label",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_LabeledStatement",
          "declaration": {
            "name": "AST_LabeledStatement",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_LabelRef",
          "declaration": {
            "name": "AST_LabelRef",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Lambda",
          "declaration": {
            "name": "AST_Lambda",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Let",
          "declaration": {
            "name": "AST_Let",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_LoopControl",
          "declaration": {
            "name": "AST_LoopControl",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_NameMapping",
          "declaration": {
            "name": "AST_NameMapping",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_NaN",
          "declaration": {
            "name": "AST_NaN",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_New",
          "declaration": {
            "name": "AST_New",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_NewTarget",
          "declaration": {
            "name": "AST_NewTarget",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Node",
          "declaration": {
            "name": "AST_Node",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Null",
          "declaration": {
            "name": "AST_Null",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Number",
          "declaration": {
            "name": "AST_Number",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Object",
          "declaration": {
            "name": "AST_Object",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ObjectGetter",
          "declaration": {
            "name": "AST_ObjectGetter",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ObjectKeyVal",
          "declaration": {
            "name": "AST_ObjectKeyVal",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ObjectProperty",
          "declaration": {
            "name": "AST_ObjectProperty",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_ObjectSetter",
          "declaration": {
            "name": "AST_ObjectSetter",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_PrefixedTemplateString",
          "declaration": {
            "name": "AST_PrefixedTemplateString",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_PrivateGetter",
          "declaration": {
            "name": "AST_PrivateGetter",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_PrivateMethod",
          "declaration": {
            "name": "AST_PrivateMethod",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_PrivateSetter",
          "declaration": {
            "name": "AST_PrivateSetter",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_PropAccess",
          "declaration": {
            "name": "AST_PropAccess",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_RegExp",
          "declaration": {
            "name": "AST_RegExp",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Return",
          "declaration": {
            "name": "AST_Return",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Scope",
          "declaration": {
            "name": "AST_Scope",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Sequence",
          "declaration": {
            "name": "AST_Sequence",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SimpleStatement",
          "declaration": {
            "name": "AST_SimpleStatement",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Statement",
          "declaration": {
            "name": "AST_Statement",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_StatementWithBody",
          "declaration": {
            "name": "AST_StatementWithBody",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_String",
          "declaration": {
            "name": "AST_String",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Sub",
          "declaration": {
            "name": "AST_Sub",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Super",
          "declaration": {
            "name": "AST_Super",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Switch",
          "declaration": {
            "name": "AST_Switch",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SwitchBranch",
          "declaration": {
            "name": "AST_SwitchBranch",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Symbol",
          "declaration": {
            "name": "AST_Symbol",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolBlockDeclaration",
          "declaration": {
            "name": "AST_SymbolBlockDeclaration",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolCatch",
          "declaration": {
            "name": "AST_SymbolCatch",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolClass",
          "declaration": {
            "name": "AST_SymbolClass",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolClassProperty",
          "declaration": {
            "name": "AST_SymbolClassProperty",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolConst",
          "declaration": {
            "name": "AST_SymbolConst",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolDeclaration",
          "declaration": {
            "name": "AST_SymbolDeclaration",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolDefClass",
          "declaration": {
            "name": "AST_SymbolDefClass",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolDefun",
          "declaration": {
            "name": "AST_SymbolDefun",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolExport",
          "declaration": {
            "name": "AST_SymbolExport",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolExportForeign",
          "declaration": {
            "name": "AST_SymbolExportForeign",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolFunarg",
          "declaration": {
            "name": "AST_SymbolFunarg",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolImport",
          "declaration": {
            "name": "AST_SymbolImport",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolImportForeign",
          "declaration": {
            "name": "AST_SymbolImportForeign",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolLambda",
          "declaration": {
            "name": "AST_SymbolLambda",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolLet",
          "declaration": {
            "name": "AST_SymbolLet",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolMethod",
          "declaration": {
            "name": "AST_SymbolMethod",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolRef",
          "declaration": {
            "name": "AST_SymbolRef",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_SymbolVar",
          "declaration": {
            "name": "AST_SymbolVar",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_TemplateSegment",
          "declaration": {
            "name": "AST_TemplateSegment",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_TemplateString",
          "declaration": {
            "name": "AST_TemplateString",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_This",
          "declaration": {
            "name": "AST_This",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Throw",
          "declaration": {
            "name": "AST_Throw",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Token",
          "declaration": {
            "name": "AST_Token",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Toplevel",
          "declaration": {
            "name": "AST_Toplevel",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_True",
          "declaration": {
            "name": "AST_True",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Try",
          "declaration": {
            "name": "AST_Try",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Unary",
          "declaration": {
            "name": "AST_Unary",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_UnaryPostfix",
          "declaration": {
            "name": "AST_UnaryPostfix",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_UnaryPrefix",
          "declaration": {
            "name": "AST_UnaryPrefix",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Undefined",
          "declaration": {
            "name": "AST_Undefined",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Var",
          "declaration": {
            "name": "AST_Var",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_VarDef",
          "declaration": {
            "name": "AST_VarDef",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_While",
          "declaration": {
            "name": "AST_While",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_With",
          "declaration": {
            "name": "AST_With",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "AST_Yield",
          "declaration": {
            "name": "AST_Yield",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "TreeTransformer",
          "declaration": {
            "name": "TreeTransformer",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "TreeWalker",
          "declaration": {
            "name": "TreeWalker",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "walk",
          "declaration": {
            "name": "walk",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "walk_abort",
          "declaration": {
            "name": "walk_abort",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "walk_body",
          "declaration": {
            "name": "walk_body",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "walk_parent",
          "declaration": {
            "name": "walk_parent",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "_INLINE",
          "declaration": {
            "name": "_INLINE",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "_NOINLINE",
          "declaration": {
            "name": "_NOINLINE",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        },
        {
          "kind": "js",
          "name": "_PURE",
          "declaration": {
            "name": "_PURE",
            "module": "demo/node_modules/terser/lib/ast.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/cli.js",
      "declarations": [
        {
          "kind": "function",
          "name": "run_cli",
          "parameters": [
            {
              "name": "{ program, packageJson, fs, path }"
            }
          ]
        },
        {
          "kind": "function",
          "name": "run_cli"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "run_cli",
          "declaration": {
            "name": "run_cli",
            "module": "demo/node_modules/terser/lib/cli.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/equivalent-to.js",
      "declarations": [
        {
          "kind": "function",
          "name": "equivalent_to",
          "parameters": [
            {
              "name": "tree1"
            },
            {
              "name": "tree2"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "equivalent_to",
          "declaration": {
            "name": "equivalent_to",
            "module": "demo/node_modules/terser/lib/equivalent-to.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/minify.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "to_ascii"
        },
        {
          "kind": "function",
          "name": "minify",
          "parameters": [
            {
              "name": "files"
            },
            {
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "minify",
          "declaration": {
            "name": "minify",
            "module": "demo/node_modules/terser/lib/minify.js"
          }
        },
        {
          "kind": "js",
          "name": "to_ascii",
          "declaration": {
            "name": "to_ascii",
            "module": "demo/node_modules/terser/lib/minify.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/mozilla-ast.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/output.js",
      "declarations": [
        {
          "kind": "function",
          "name": "OutputStream",
          "parameters": [
            {
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OutputStream",
          "declaration": {
            "name": "OutputStream",
            "module": "demo/node_modules/terser/lib/output.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/parse.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "RESERVED_WORDS"
        },
        {
          "kind": "function",
          "name": "get_full_char",
          "parameters": [
            {
              "name": "str"
            },
            {
              "name": "pos"
            }
          ]
        },
        {
          "kind": "function",
          "name": "get_full_char_code",
          "parameters": [
            {
              "name": "str"
            },
            {
              "name": "pos"
            }
          ]
        },
        {
          "kind": "function",
          "name": "is_surrogate_pair_head",
          "parameters": [
            {
              "name": "code"
            }
          ]
        },
        {
          "kind": "function",
          "name": "is_surrogate_pair_tail",
          "parameters": [
            {
              "name": "code"
            }
          ]
        },
        {
          "kind": "function",
          "name": "is_identifier_char",
          "parameters": [
            {
              "name": "ch"
            }
          ]
        },
        {
          "kind": "function",
          "name": "is_basic_identifier_string",
          "parameters": [
            {
              "name": "str"
            }
          ]
        },
        {
          "kind": "function",
          "name": "is_identifier_string",
          "parameters": [
            {
              "name": "str"
            },
            {
              "name": "allow_surrogates"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "JS_Parse_Error",
          "superclass": {
            "name": "Error",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "function",
          "name": "js_error",
          "parameters": [
            {
              "name": "message"
            },
            {
              "name": "filename"
            },
            {
              "name": "line"
            },
            {
              "name": "col"
            },
            {
              "name": "pos"
            }
          ]
        },
        {
          "kind": "function",
          "name": "tokenizer",
          "parameters": [
            {
              "name": "$TEXT"
            },
            {
              "name": "filename"
            },
            {
              "name": "html5_comments"
            },
            {
              "name": "shebang"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "PRECEDENCE"
        },
        {
          "kind": "function",
          "name": "parse",
          "parameters": [
            {
              "name": "$TEXT"
            },
            {
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "get_full_char_code",
          "declaration": {
            "name": "get_full_char_code",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "get_full_char",
          "declaration": {
            "name": "get_full_char",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "is_identifier_char",
          "declaration": {
            "name": "is_identifier_char",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "is_basic_identifier_string",
          "declaration": {
            "name": "is_basic_identifier_string",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "is_identifier_string",
          "declaration": {
            "name": "is_identifier_string",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "is_surrogate_pair_head",
          "declaration": {
            "name": "is_surrogate_pair_head",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "is_surrogate_pair_tail",
          "declaration": {
            "name": "is_surrogate_pair_tail",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "js_error",
          "declaration": {
            "name": "js_error",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "JS_Parse_Error",
          "declaration": {
            "name": "JS_Parse_Error",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "parse",
          "declaration": {
            "name": "parse",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "PRECEDENCE",
          "declaration": {
            "name": "PRECEDENCE",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "RESERVED_WORDS",
          "declaration": {
            "name": "RESERVED_WORDS",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "tokenizer",
          "declaration": {
            "name": "tokenizer",
            "module": "demo/node_modules/terser/lib/parse.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/propmangle.js",
      "declarations": [
        {
          "kind": "function",
          "name": "reserve_quoted_keys",
          "parameters": [
            {
              "name": "ast"
            },
            {
              "name": "reserved"
            }
          ]
        },
        {
          "kind": "function",
          "name": "mangle_properties",
          "parameters": [
            {
              "name": "ast"
            },
            {
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "reserve_quoted_keys",
          "declaration": {
            "name": "reserve_quoted_keys",
            "module": "demo/node_modules/terser/lib/propmangle.js"
          }
        },
        {
          "kind": "js",
          "name": "mangle_properties",
          "declaration": {
            "name": "mangle_properties",
            "module": "demo/node_modules/terser/lib/propmangle.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/scope.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SymbolDef",
          "members": [
            {
              "kind": "method",
              "name": "fixed_value"
            },
            {
              "kind": "method",
              "name": "unmangleable",
              "parameters": [
                {
                  "name": "options"
                }
              ]
            },
            {
              "kind": "method",
              "name": "mangle",
              "parameters": [
                {
                  "name": "options"
                }
              ]
            }
          ]
        },
        {
          "kind": "variable",
          "name": "base54"
        },
        {
          "kind": "function",
          "name": "base54",
          "parameters": [
            {
              "name": "num"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "base54",
          "declaration": {
            "name": "base54",
            "module": "demo/node_modules/terser/lib/scope.js"
          }
        },
        {
          "kind": "js",
          "name": "SymbolDef",
          "declaration": {
            "name": "SymbolDef",
            "module": "demo/node_modules/terser/lib/scope.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/size.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/sourcemap.js",
      "declarations": [
        {
          "kind": "function",
          "name": "SourceMap",
          "parameters": [
            {
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceMap",
          "declaration": {
            "name": "SourceMap",
            "module": "demo/node_modules/terser/lib/sourcemap.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/transform.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/yargs-parser/lib/tokenize-arg-string.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/async-return-type.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/basic.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/conditional-except.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/conditional-keys.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/conditional-pick.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/except.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/literal-union.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/merge-exclusive.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/merge.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/mutable.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/opaque.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/package-json.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/partial-deep.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/promisable.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/promise-value.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/readonly-deep.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/require-at-least-one.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/require-exactly-one.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/set-optional.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/set-required.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/stringified.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/tsconfig-json.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/union-to-intersection.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/type-fest/source/value-of.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@babel/code-frame/lib/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@babel/helper-validator-identifier/lib/identifier.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@babel/helper-validator-identifier/lib/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@babel/helper-validator-identifier/lib/keyword.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@babel/helper-validator-identifier/scripts/generate-identifier-regex.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@babel/highlight/lib/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/constants.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IS_SUPPORT_READDIR_WITH_FILE_TYPES",
          "type": {
            "text": "boolean"
          },
          "description": "IS `true` for Node.js 10.10 and greater."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IS_SUPPORT_READDIR_WITH_FILE_TYPES",
          "declaration": {
            "name": "IS_SUPPORT_READDIR_WITH_FILE_TYPES",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/constants.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/constants.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "scandir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "scandir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "type": {
                "text": "Options | Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "scandirSync",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "optional": true,
              "type": {
                "text": "Options | Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "scandir",
          "declaration": {
            "name": "scandir",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "scandirSync",
          "declaration": {
            "name": "scandirSync",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Settings",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncCallback",
          "declaration": {
            "name": "AsyncCallback",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Dirent",
          "declaration": {
            "name": "Dirent",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Entry",
          "declaration": {
            "name": "Entry",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FileSystemAdapter",
          "declaration": {
            "name": "FileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Options",
          "declaration": {
            "name": "Options",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/index.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/index.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/settings.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Settings",
          "members": [
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "followSymbolicLinks",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "fs",
              "type": {
                "text": "fs.FileSystemAdapter"
              }
            },
            {
              "kind": "field",
              "name": "pathSegmentSeparator",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "stats",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "throwErrorOnBrokenSymbolicLink",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "fsStatSettings",
              "type": {
                "text": "fsStat.Settings"
              }
            },
            {
              "kind": "field",
              "name": "_getValue",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/settings.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/settings.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/settings.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/settings.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/constants.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IS_SUPPORT_READDIR_WITH_FILE_TYPES",
          "description": "IS `true` for Node.js 10.10 and greater."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IS_SUPPORT_READDIR_WITH_FILE_TYPES",
          "declaration": {
            "name": "IS_SUPPORT_READDIR_WITH_FILE_TYPES",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/constants.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/index.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "scandir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "scandir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "type": {
                "text": "Options | Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "scandir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettingsOrCallback",
              "type": {
                "text": "Options | Settings | AsyncCallback"
              }
            },
            {
              "name": "callback",
              "optional": true,
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "scandirSync",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "optional": true,
              "type": {
                "text": "Options | Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "scandir",
          "declaration": {
            "name": "scandir",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "scandirSync",
          "declaration": {
            "name": "scandirSync",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Settings",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncCallback",
          "declaration": {
            "name": "AsyncCallback",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Dirent",
          "declaration": {
            "name": "Dirent",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Entry",
          "declaration": {
            "name": "Entry",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "FileSystemAdapter",
          "declaration": {
            "name": "FileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Options",
          "declaration": {
            "name": "Options",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/settings.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/settings.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Settings",
          "members": [
            {
              "kind": "field",
              "name": "followSymbolicLinks",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "fs",
              "type": {
                "text": "fs.FileSystemAdapter"
              },
              "privacy": "public",
              "default": "fs.createFileSystemAdapter"
            },
            {
              "kind": "field",
              "name": "pathSegmentSeparator",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "stats",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "throwErrorOnBrokenSymbolicLink",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "fsStatSettings",
              "type": {
                "text": "fsStat.Settings"
              },
              "privacy": "public",
              "default": "fsStat.Settings"
            },
            {
              "kind": "method",
              "name": "_getValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "T | undefined"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/settings.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "stat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "stat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "type": {
                "text": "Options | Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "statSync",
          "return": {
            "type": {
              "text": "Stats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "optional": true,
              "type": {
                "text": "Options | Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Settings",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.stat/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "stat",
          "declaration": {
            "name": "stat",
            "module": "demo/node_modules/@nodelib/fs.stat/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "statSync",
          "declaration": {
            "name": "statSync",
            "module": "demo/node_modules/@nodelib/fs.stat/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncCallback",
          "declaration": {
            "name": "AsyncCallback",
            "module": "demo/node_modules/@nodelib/fs.stat/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FileSystemAdapter",
          "declaration": {
            "name": "FileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.stat/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Options",
          "declaration": {
            "name": "Options",
            "module": "demo/node_modules/@nodelib/fs.stat/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Stats",
          "declaration": {
            "name": "Stats",
            "module": "demo/node_modules/@nodelib/fs.stat/out/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/index.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/index.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/settings.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Settings",
          "members": [
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "followSymbolicLink",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "fs",
              "type": {
                "text": "fs.FileSystemAdapter"
              }
            },
            {
              "kind": "field",
              "name": "markSymbolicLink",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "throwErrorOnBrokenSymbolicLink",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "_getValue",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.stat/out/settings.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/settings.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/settings.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/settings.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/index.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "stat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "stat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "type": {
                "text": "Options | Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "stat",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettingsOrCallback",
              "type": {
                "text": "Options | Settings | AsyncCallback"
              }
            },
            {
              "name": "callback",
              "optional": true,
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "statSync",
          "return": {
            "type": {
              "text": "Stats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "optional": true,
              "type": {
                "text": "Options | Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Settings",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.stat/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "stat",
          "declaration": {
            "name": "stat",
            "module": "demo/node_modules/@nodelib/fs.stat/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "statSync",
          "declaration": {
            "name": "statSync",
            "module": "demo/node_modules/@nodelib/fs.stat/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncCallback",
          "declaration": {
            "name": "AsyncCallback",
            "module": "demo/node_modules/@nodelib/fs.stat/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "FileSystemAdapter",
          "declaration": {
            "name": "FileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.stat/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Options",
          "declaration": {
            "name": "Options",
            "module": "demo/node_modules/@nodelib/fs.stat/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Stats",
          "declaration": {
            "name": "Stats",
            "module": "demo/node_modules/@nodelib/fs.stat/src/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/settings.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/settings.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Settings",
          "members": [
            {
              "kind": "field",
              "name": "followSymbolicLink",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "fs",
              "type": {
                "text": "fs.FileSystemAdapter"
              },
              "privacy": "public",
              "default": "fs.createFileSystemAdapter"
            },
            {
              "kind": "field",
              "name": "markSymbolicLink",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "throwErrorOnBrokenSymbolicLink",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "method",
              "name": "_getValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "T | undefined"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.stat/src/settings.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/plugin-commonjs/dist/index.es.js",
      "declarations": [
        {
          "kind": "function",
          "name": "commonjs",
          "parameters": [
            {
              "name": "options",
              "default": "{}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "commonjs",
            "module": "demo/node_modules/@rollup/plugin-commonjs/dist/index.es.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/plugin-commonjs/dist/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/plugin-commonjs/types/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "commonjs",
          "return": {
            "type": {
              "text": "Plugin"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "RollupCommonJSOptions"
              }
            }
          ],
          "description": "Convert CommonJS modules to ES6, so they can be included in a Rollup bundle"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "commonjs",
            "module": "demo/node_modules/@rollup/plugin-commonjs/types/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "walk",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "walk",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "type": {
                "text": "Options | Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "walkSync",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "optional": true,
              "type": {
                "text": "Options | Settings"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "walkStream",
          "return": {
            "type": {
              "text": "Readable"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "optional": true,
              "type": {
                "text": "Options | Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "walk",
          "declaration": {
            "name": "walk",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "walkSync",
          "declaration": {
            "name": "walkSync",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "walkStream",
          "declaration": {
            "name": "walkStream",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Settings",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncCallback",
          "declaration": {
            "name": "AsyncCallback",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Dirent",
          "declaration": {
            "name": "Dirent",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Entry",
          "declaration": {
            "name": "Entry",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FileSystemAdapter",
          "declaration": {
            "name": "FileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Options",
          "declaration": {
            "name": "Options",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "DeepFilterFunction",
          "declaration": {
            "name": "DeepFilterFunction",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "EntryFilterFunction",
          "declaration": {
            "name": "EntryFilterFunction",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ErrorFilterFunction",
          "declaration": {
            "name": "ErrorFilterFunction",
            "module": "demo/node_modules/@nodelib/fs.walk/out/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/index.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/index.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/settings.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Settings",
          "members": [
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "basePath",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "concurrency",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "deepFilter",
              "type": {
                "text": "DeepFilterFunction | null"
              }
            },
            {
              "kind": "field",
              "name": "entryFilter",
              "type": {
                "text": "EntryFilterFunction | null"
              }
            },
            {
              "kind": "field",
              "name": "errorFilter",
              "type": {
                "text": "ErrorFilterFunction | null"
              }
            },
            {
              "kind": "field",
              "name": "pathSegmentSeparator",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "fsScandirSettings",
              "type": {
                "text": "fsScandir.Settings"
              }
            },
            {
              "kind": "field",
              "name": "_getValue",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.walk/out/settings.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/settings.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/settings.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/settings.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/index.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "walk",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "walk",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "type": {
                "text": "Options | Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "walk",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettingsOrCallback",
              "type": {
                "text": "Options | Settings | AsyncCallback"
              }
            },
            {
              "name": "callback",
              "optional": true,
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "walkSync",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "optional": true,
              "type": {
                "text": "Options | Settings"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "walkStream",
          "return": {
            "type": {
              "text": "Readable"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "optionsOrSettings",
              "optional": true,
              "type": {
                "text": "Options | Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "walk",
          "declaration": {
            "name": "walk",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "walkSync",
          "declaration": {
            "name": "walkSync",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "walkStream",
          "declaration": {
            "name": "walkStream",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Settings",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncCallback",
          "declaration": {
            "name": "AsyncCallback",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Dirent",
          "declaration": {
            "name": "Dirent",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Entry",
          "declaration": {
            "name": "Entry",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "FileSystemAdapter",
          "declaration": {
            "name": "FileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Options",
          "declaration": {
            "name": "Options",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "DeepFilterFunction",
          "declaration": {
            "name": "DeepFilterFunction",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "EntryFilterFunction",
          "declaration": {
            "name": "EntryFilterFunction",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "ErrorFilterFunction",
          "declaration": {
            "name": "ErrorFilterFunction",
            "module": "demo/node_modules/@nodelib/fs.walk/src/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/settings.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/settings.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Settings",
          "members": [
            {
              "kind": "field",
              "name": "basePath",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "concurrency",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "deepFilter",
              "type": {
                "text": "DeepFilterFunction | null"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "entryFilter",
              "type": {
                "text": "EntryFilterFunction | null"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "errorFilter",
              "type": {
                "text": "ErrorFilterFunction | null"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "pathSegmentSeparator",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "this._getValue"
            },
            {
              "kind": "field",
              "name": "fsScandirSettings",
              "type": {
                "text": "fsScandir.Settings"
              },
              "privacy": "public",
              "default": "fsScandir.Settings"
            },
            {
              "kind": "method",
              "name": "_getValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "T | undefined"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Settings",
            "module": "demo/node_modules/@nodelib/fs.walk/src/settings.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/plugin-node-resolve/types/index.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DEFAULTS",
          "type": {
            "text": "{\n  customResolveOptions: {};\n  dedupe: [];\n  extensions: ['.mjs', '.js', '.json', '.node'];\n  resolveOnly: [];\n}"
          }
        },
        {
          "kind": "function",
          "name": "nodeResolve",
          "return": {
            "type": {
              "text": "Plugin"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "RollupNodeResolveOptions"
              }
            }
          ],
          "description": "Locate modules using the Node resolution algorithm, for using third party modules in node_modules"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DEFAULTS",
          "declaration": {
            "name": "DEFAULTS",
            "module": "demo/node_modules/@rollup/plugin-node-resolve/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "nodeResolve",
          "declaration": {
            "name": "nodeResolve",
            "module": "demo/node_modules/@rollup/plugin-node-resolve/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "nodeResolve",
            "module": "demo/node_modules/@rollup/plugin-node-resolve/types/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/pluginutils/types/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addExtension",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "filename",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "ext",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Adds an extension to a module ID if one does not exist."
        },
        {
          "kind": "function",
          "name": "attachScopes",
          "return": {
            "type": {
              "text": "AttachedScope"
            }
          },
          "parameters": [
            {
              "name": "ast",
              "type": {
                "text": "BaseNode"
              }
            },
            {
              "name": "propertyName",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Attaches `Scope` objects to the relevant nodes of an AST.\nEach `Scope` object has a `scope.contains(name)` method that returns `true`\nif a given name is defined in the current scope or a parent scope."
        },
        {
          "kind": "function",
          "name": "createFilter",
          "return": {
            "type": {
              "text": "(id: string | unknown) => boolean"
            }
          },
          "parameters": [
            {
              "name": "include",
              "optional": true,
              "type": {
                "text": "FilterPattern"
              },
              "description": "If `include` is omitted or has zero length, filter will return `true` by default."
            },
            {
              "name": "exclude",
              "optional": true,
              "type": {
                "text": "FilterPattern"
              },
              "description": "ID must not match any of the `exclude` patterns."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "{ resolve?: string | false | null }"
              },
              "description": "Optionally resolves the patterns against a directory other than `process.cwd()`.\nIf a `string` is specified, then the value will be used as the base directory.\nRelative paths will be resolved against `process.cwd()` first.\nIf `false`, then the patterns will not be resolved against any directory.\nThis can be useful if you want to create a filter for virtual module names."
            }
          ],
          "description": "Constructs a filter function which can be used to determine whether or not\ncertain modules should be operated upon."
        },
        {
          "kind": "function",
          "name": "dataToEsm",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "unknown"
              },
              "description": "An object to transform into an ES module."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "DataToEsmOptions"
              }
            }
          ],
          "description": "Transforms objects into tree-shakable ES Module imports."
        },
        {
          "kind": "function",
          "name": "extractAssignedNames",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "param",
              "type": {
                "text": "BaseNode"
              },
              "description": "An `acorn` AST Node."
            }
          ],
          "description": "Extracts the names of all assignment targets based upon specified patterns."
        },
        {
          "kind": "function",
          "name": "makeLegalIdentifier",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Constructs a bundle-safe identifier from a `string`."
        },
        {
          "kind": "variable",
          "name": "defaultExport",
          "type": {
            "text": "{\n  addExtension: AddExtension;\n  attachScopes: AttachScopes;\n  createFilter: CreateFilter;\n  dataToEsm: DataToEsm;\n  extractAssignedNames: ExtractAssignedNames;\n  makeLegalIdentifier: MakeLegalIdentifier;\n}"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addExtension",
          "declaration": {
            "name": "addExtension",
            "module": "demo/node_modules/@rollup/pluginutils/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "attachScopes",
          "declaration": {
            "name": "attachScopes",
            "module": "demo/node_modules/@rollup/pluginutils/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "createFilter",
          "declaration": {
            "name": "createFilter",
            "module": "demo/node_modules/@rollup/pluginutils/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "dataToEsm",
          "declaration": {
            "name": "dataToEsm",
            "module": "demo/node_modules/@rollup/pluginutils/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "extractAssignedNames",
          "declaration": {
            "name": "extractAssignedNames",
            "module": "demo/node_modules/@rollup/pluginutils/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "makeLegalIdentifier",
          "declaration": {
            "name": "makeLegalIdentifier",
            "module": "demo/node_modules/@rollup/pluginutils/types/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "defaultExport",
            "module": "demo/node_modules/@rollup/pluginutils/types/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/fs/promises.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "node:fs/promises"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/ts3.4/assert.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "assert",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "message",
              "optional": true,
              "type": {
                "text": "string | Error"
              }
            }
          ],
          "description": "An alias of `assert.ok()`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "assert",
            "module": "demo/node_modules/@types/node/ts3.4/assert.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "assert",
            "module": "demo/node_modules/@types/node/ts3.4/assert.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/ts3.4/base.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/ts3.4/globals.global.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/ts3.4/index.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/ts3.6/base.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@types/node/ts3.6/index.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/camelcase-keys/node_modules/map-obj/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "mapObject",
          "return": {
            "type": {
              "text": "TargetObjectType & {[key: string]: unknown}"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "SourceObjectType"
              },
              "description": "Source object to copy properties from."
            },
            {
              "name": "mapper",
              "type": {
                "text": "mapObject.Mapper<\n\t\tSourceObjectType,\n\t\tMappedObjectKeyType,\n\t\tMappedObjectValueType\n\t>"
              },
              "description": "Mapping function."
            },
            {
              "name": "options",
              "type": {
                "text": "mapObject.DeepOptions & mapObject.TargetOptions<TargetObjectType>"
              }
            }
          ],
          "description": "Map object keys and values into a new object."
        },
        {
          "kind": "function",
          "name": "mapObject",
          "return": {
            "type": {
              "text": "{[key: string]: unknown}"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "SourceObjectType"
              }
            },
            {
              "name": "mapper",
              "type": {
                "text": "mapObject.Mapper<\n\t\tSourceObjectType,\n\t\tMappedObjectKeyType,\n\t\tMappedObjectValueType\n\t>"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "mapObject.DeepOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "mapObject",
          "return": {
            "type": {
              "text": "TargetObjectType & {[K in MappedObjectKeyType]: MappedObjectValueType}"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "SourceObjectType"
              }
            },
            {
              "name": "mapper",
              "type": {
                "text": "mapObject.Mapper<\n\t\tSourceObjectType,\n\t\tMappedObjectKeyType,\n\t\tMappedObjectValueType\n\t>"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "mapObject.TargetOptions<TargetObjectType>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "mapObject",
          "return": {
            "type": {
              "text": "{[K in MappedObjectKeyType]: MappedObjectValueType}"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "SourceObjectType"
              }
            },
            {
              "name": "mapper",
              "type": {
                "text": "mapObject.Mapper<\n\t\tSourceObjectType,\n\t\tMappedObjectKeyType,\n\t\tMappedObjectValueType\n\t>"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "mapObject.Options"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "mapObject",
            "module": "demo/node_modules/camelcase-keys/node_modules/map-obj/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/camelcase-keys/node_modules/map-obj/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/chalk/node_modules/has-flag/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/chalk/node_modules/supports-color/browser.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/chalk/node_modules/supports-color/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/dist/esm/estree-walker.js",
      "declarations": [
        {
          "kind": "function",
          "name": "walk",
          "parameters": [
            {
              "name": "ast",
              "type": {
                "text": "BaseNode"
              }
            },
            {
              "name": "{ enter, leave }"
            },
            {
              "name": "walker",
              "type": {
                "text": "{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }"
              }
            }
          ],
          "return": {
            "type": {
              "text": "BaseNode"
            }
          }
        },
        {
          "kind": "function",
          "name": "asyncWalk",
          "parameters": [
            {
              "name": "ast",
              "type": {
                "text": "BaseNode"
              }
            },
            {
              "name": "{ enter, leave }"
            },
            {
              "name": "walker",
              "type": {
                "text": "{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }"
              }
            }
          ],
          "return": {
            "type": {
              "text": "Promise<BaseNode>"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asyncWalk",
          "declaration": {
            "name": "asyncWalk",
            "module": "demo/node_modules/estree-walker/dist/esm/estree-walker.js"
          }
        },
        {
          "kind": "js",
          "name": "walk",
          "declaration": {
            "name": "walk",
            "module": "demo/node_modules/estree-walker/dist/esm/estree-walker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/estree-walker/dist/umd/estree-walker.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/async.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ProviderAsync",
          "members": [
            {
              "kind": "field",
              "name": "_reader",
              "type": {
                "text": "ReaderStream"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "Promise<EntryItem[]>"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "api",
              "return": {
                "type": {
                  "text": "Readable"
                }
              },
              "parameters": [
                {
                  "name": "root",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ReaderOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_settings",
              "type": {
                "text": "Settings"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorFilter",
              "type": {
                "text": "ErrorFilter"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "entryFilter",
              "type": {
                "text": "EntryFilter"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "deepFilter",
              "type": {
                "text": "DeepFilter"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "entryTransformer",
              "type": {
                "text": "EntryTransformer"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getRootDirectory",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getReaderOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "ReaderOptions"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getMicromatchOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "MicromatchOptions"
                }
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Provider",
            "module": "/demo/node_modules/fast-glob/out/providers/provider"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ProviderAsync",
            "module": "demo/node_modules/fast-glob/out/providers/async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/async.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/provider.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Provider",
          "members": [
            {
              "kind": "field",
              "name": "_settings",
              "type": {
                "text": "Settings"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "errorFilter",
              "type": {
                "text": "ErrorFilter"
              }
            },
            {
              "kind": "field",
              "name": "entryFilter",
              "type": {
                "text": "EntryFilter"
              }
            },
            {
              "kind": "field",
              "name": "deepFilter",
              "type": {
                "text": "DeepFilter"
              }
            },
            {
              "kind": "field",
              "name": "entryTransformer",
              "type": {
                "text": "EntryTransformer"
              }
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "_task",
                  "type": {
                    "text": "Task"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getRootDirectory",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getReaderOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "ReaderOptions"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getMicromatchOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "MicromatchOptions"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Provider",
            "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/provider.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/stream.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ProviderStream",
          "members": [
            {
              "kind": "field",
              "name": "_reader",
              "type": {
                "text": "ReaderStream"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "Readable"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "api",
              "return": {
                "type": {
                  "text": "Readable"
                }
              },
              "parameters": [
                {
                  "name": "root",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ReaderOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_settings",
              "type": {
                "text": "Settings"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorFilter",
              "type": {
                "text": "ErrorFilter"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "entryFilter",
              "type": {
                "text": "EntryFilter"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "deepFilter",
              "type": {
                "text": "DeepFilter"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "entryTransformer",
              "type": {
                "text": "EntryTransformer"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getRootDirectory",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getReaderOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "ReaderOptions"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getMicromatchOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "MicromatchOptions"
                }
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Provider",
            "module": "/demo/node_modules/fast-glob/out/providers/provider"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ProviderStream",
            "module": "demo/node_modules/fast-glob/out/providers/stream.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/stream.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/sync.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ProviderSync",
          "members": [
            {
              "kind": "field",
              "name": "_reader",
              "type": {
                "text": "ReaderSync"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "EntryItem[]"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "api",
              "return": {
                "type": {
                  "text": "Entry[]"
                }
              },
              "parameters": [
                {
                  "name": "root",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ReaderOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_settings",
              "type": {
                "text": "Settings"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorFilter",
              "type": {
                "text": "ErrorFilter"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "entryFilter",
              "type": {
                "text": "EntryFilter"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "deepFilter",
              "type": {
                "text": "DeepFilter"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "entryTransformer",
              "type": {
                "text": "EntryTransformer"
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getRootDirectory",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getReaderOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "ReaderOptions"
                }
              },
              "parameters": [
                {
                  "name": "task",
                  "type": {
                    "text": "Task"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getMicromatchOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "MicromatchOptions"
                }
              },
              "inheritedFrom": {
                "name": "Provider",
                "module": "demo/node_modules/fast-glob/out/providers/provider.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Provider",
            "module": "/demo/node_modules/fast-glob/out/providers/provider"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ProviderSync",
            "module": "demo/node_modules/fast-glob/out/providers/sync.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/managers/tasks.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "generate",
          "return": {
            "type": {
              "text": "Task[]"
            }
          },
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "text": "Pattern[]"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "convertPatternsToTasks",
          "return": {
            "type": {
              "text": "Task[]"
            }
          },
          "parameters": [
            {
              "name": "positive",
              "type": {
                "text": "Pattern[]"
              }
            },
            {
              "name": "negative",
              "type": {
                "text": "Pattern[]"
              }
            },
            {
              "name": "dynamic",
              "type": {
                "text": "boolean"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getPositivePatterns",
          "return": {
            "type": {
              "text": "Pattern[]"
            }
          },
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "text": "Pattern[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getNegativePatternsAsPositive",
          "return": {
            "type": {
              "text": "Pattern[]"
            }
          },
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "text": "Pattern[]"
              }
            },
            {
              "name": "ignore",
              "type": {
                "text": "Pattern[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "groupPatternsByBaseDirectory",
          "return": {
            "type": {
              "text": "PatternsGroup"
            }
          },
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "text": "Pattern[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "convertPatternGroupsToTasks",
          "return": {
            "type": {
              "text": "Task[]"
            }
          },
          "parameters": [
            {
              "name": "positive",
              "type": {
                "text": "PatternsGroup"
              }
            },
            {
              "name": "negative",
              "type": {
                "text": "Pattern[]"
              }
            },
            {
              "name": "dynamic",
              "type": {
                "text": "boolean"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "convertPatternGroupToTask",
          "return": {
            "type": {
              "text": "Task"
            }
          },
          "parameters": [
            {
              "name": "base",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "positive",
              "type": {
                "text": "Pattern[]"
              }
            },
            {
              "name": "negative",
              "type": {
                "text": "Pattern[]"
              }
            },
            {
              "name": "dynamic",
              "type": {
                "text": "boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "generate",
          "declaration": {
            "name": "generate",
            "module": "demo/node_modules/fast-glob/out/managers/tasks.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertPatternsToTasks",
          "declaration": {
            "name": "convertPatternsToTasks",
            "module": "demo/node_modules/fast-glob/out/managers/tasks.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPositivePatterns",
          "declaration": {
            "name": "getPositivePatterns",
            "module": "demo/node_modules/fast-glob/out/managers/tasks.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getNegativePatternsAsPositive",
          "declaration": {
            "name": "getNegativePatternsAsPositive",
            "module": "demo/node_modules/fast-glob/out/managers/tasks.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "groupPatternsByBaseDirectory",
          "declaration": {
            "name": "groupPatternsByBaseDirectory",
            "module": "demo/node_modules/fast-glob/out/managers/tasks.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertPatternGroupsToTasks",
          "declaration": {
            "name": "convertPatternGroupsToTasks",
            "module": "demo/node_modules/fast-glob/out/managers/tasks.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertPatternGroupToTask",
          "declaration": {
            "name": "convertPatternGroupToTask",
            "module": "demo/node_modules/fast-glob/out/managers/tasks.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/managers/tasks.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/types/index.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/types/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/readers/reader.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Reader",
          "members": [
            {
              "kind": "field",
              "name": "_settings",
              "type": {
                "text": "Settings"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_fsStatSettings",
              "type": {
                "text": "fsStat.Settings"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "dynamic",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "root",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ReaderOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "static",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "patterns",
                  "type": {
                    "text": "Pattern[]"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ReaderOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getFullEntryPath",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "filepath",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_makeEntry",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Entry"
                }
              },
              "parameters": [
                {
                  "name": "stats",
                  "type": {
                    "text": "fs.Stats"
                  }
                },
                {
                  "name": "pattern",
                  "type": {
                    "text": "Pattern"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_isFatalError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "ErrnoException"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Reader",
            "module": "demo/node_modules/fast-glob/out/readers/reader.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/readers/reader.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/readers/stream.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ReaderStream",
          "members": [
            {
              "kind": "field",
              "name": "_walkStream",
              "type": {
                "text": "typeof fsWalk.walkStream"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_stat",
              "type": {
                "text": "typeof fsStat.stat"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "dynamic",
              "return": {
                "type": {
                  "text": "Readable"
                }
              },
              "parameters": [
                {
                  "name": "root",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ReaderOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "static",
              "return": {
                "type": {
                  "text": "Readable"
                }
              },
              "parameters": [
                {
                  "name": "patterns",
                  "type": {
                    "text": "Pattern[]"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ReaderOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_getEntry",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getStat",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "Reader",
            "module": "/demo/node_modules/fast-glob/out/readers/reader"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ReaderStream",
            "module": "demo/node_modules/fast-glob/out/readers/stream.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/readers/stream.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/readers/sync.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ReaderSync",
          "members": [
            {
              "kind": "field",
              "name": "_walkSync",
              "type": {
                "text": "typeof fsWalk.walkSync"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_statSync",
              "type": {
                "text": "typeof fsStat.statSync"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "dynamic",
              "return": {
                "type": {
                  "text": "Entry[]"
                }
              },
              "parameters": [
                {
                  "name": "root",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ReaderOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "static",
              "return": {
                "type": {
                  "text": "Entry[]"
                }
              },
              "parameters": [
                {
                  "name": "patterns",
                  "type": {
                    "text": "Pattern[]"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ReaderOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_getEntry",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getStat",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "Reader",
            "module": "/demo/node_modules/fast-glob/out/readers/reader"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ReaderSync",
            "module": "demo/node_modules/fast-glob/out/readers/sync.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/readers/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/array.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "flatten",
          "return": {
            "type": {
              "text": "T[]"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "T[][]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "splitWhen",
          "return": {
            "type": {
              "text": "T[][]"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "predicate",
              "type": {
                "text": "(item: T) => boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "flatten",
          "declaration": {
            "name": "flatten",
            "module": "demo/node_modules/fast-glob/out/utils/array.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "splitWhen",
          "declaration": {
            "name": "splitWhen",
            "module": "demo/node_modules/fast-glob/out/utils/array.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/array.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/errno.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isEnoentCodeError",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "error",
              "type": {
                "text": "ErrnoException"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isEnoentCodeError",
          "declaration": {
            "name": "isEnoentCodeError",
            "module": "demo/node_modules/fast-glob/out/utils/errno.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/errno.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/fs.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createDirentFromStats",
          "return": {
            "type": {
              "text": "Dirent"
            }
          },
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "stats",
              "type": {
                "text": "fs.Stats"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createDirentFromStats",
          "declaration": {
            "name": "createDirentFromStats",
            "module": "demo/node_modules/fast-glob/out/utils/fs.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/fs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "array",
          "declaration": {
            "name": "array",
            "module": "demo/node_modules/fast-glob/out/utils/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "errno",
          "declaration": {
            "name": "errno",
            "module": "demo/node_modules/fast-glob/out/utils/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "fs",
          "declaration": {
            "name": "fs",
            "module": "demo/node_modules/fast-glob/out/utils/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "path",
          "declaration": {
            "name": "path",
            "module": "demo/node_modules/fast-glob/out/utils/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "pattern",
          "declaration": {
            "name": "pattern",
            "module": "demo/node_modules/fast-glob/out/utils/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "stream",
          "declaration": {
            "name": "stream",
            "module": "demo/node_modules/fast-glob/out/utils/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "string",
          "declaration": {
            "name": "string",
            "module": "demo/node_modules/fast-glob/out/utils/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/path.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "unixify",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "filepath",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Designed to work only with simple paths: `dir\\\\file`."
        },
        {
          "kind": "function",
          "name": "makeAbsolute",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "cwd",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "filepath",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "escape",
          "return": {
            "type": {
              "text": "Pattern"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeLeadingDotSegment",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "entry",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unixify",
          "declaration": {
            "name": "unixify",
            "module": "demo/node_modules/fast-glob/out/utils/path.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "makeAbsolute",
          "declaration": {
            "name": "makeAbsolute",
            "module": "demo/node_modules/fast-glob/out/utils/path.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "escape",
          "declaration": {
            "name": "escape",
            "module": "demo/node_modules/fast-glob/out/utils/path.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeLeadingDotSegment",
          "declaration": {
            "name": "removeLeadingDotSegment",
            "module": "demo/node_modules/fast-glob/out/utils/path.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/path.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/pattern.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isStaticPattern",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "PatternTypeOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isDynamicPattern",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "PatternTypeOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "convertToPositivePattern",
          "return": {
            "type": {
              "text": "Pattern"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "convertToNegativePattern",
          "return": {
            "type": {
              "text": "Pattern"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isNegativePattern",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isPositivePattern",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getNegativePatterns",
          "return": {
            "type": {
              "text": "Pattern[]"
            }
          },
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "text": "Pattern[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getPositivePatterns",
          "return": {
            "type": {
              "text": "Pattern[]"
            }
          },
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "text": "Pattern[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getBaseDirectory",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "hasGlobStar",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "endsWithSlashGlobStar",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isAffectDepthOfReadingPattern",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "expandPatternsWithBraceExpansion",
          "return": {
            "type": {
              "text": "Pattern[]"
            }
          },
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "text": "Pattern[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "expandBraceExpansion",
          "return": {
            "type": {
              "text": "Pattern[]"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getPatternParts",
          "return": {
            "type": {
              "text": "Pattern[]"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "MicromatchOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "makeRe",
          "return": {
            "type": {
              "text": "PatternRe"
            }
          },
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "Pattern"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "MicromatchOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "convertPatternsToRe",
          "return": {
            "type": {
              "text": "PatternRe[]"
            }
          },
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "text": "Pattern[]"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "MicromatchOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "matchAny",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "entry",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "patternsRe",
              "type": {
                "text": "PatternRe[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isStaticPattern",
          "declaration": {
            "name": "isStaticPattern",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDynamicPattern",
          "declaration": {
            "name": "isDynamicPattern",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertToPositivePattern",
          "declaration": {
            "name": "convertToPositivePattern",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertToNegativePattern",
          "declaration": {
            "name": "convertToNegativePattern",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isNegativePattern",
          "declaration": {
            "name": "isNegativePattern",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isPositivePattern",
          "declaration": {
            "name": "isPositivePattern",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getNegativePatterns",
          "declaration": {
            "name": "getNegativePatterns",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPositivePatterns",
          "declaration": {
            "name": "getPositivePatterns",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getBaseDirectory",
          "declaration": {
            "name": "getBaseDirectory",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "hasGlobStar",
          "declaration": {
            "name": "hasGlobStar",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "endsWithSlashGlobStar",
          "declaration": {
            "name": "endsWithSlashGlobStar",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isAffectDepthOfReadingPattern",
          "declaration": {
            "name": "isAffectDepthOfReadingPattern",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "expandPatternsWithBraceExpansion",
          "declaration": {
            "name": "expandPatternsWithBraceExpansion",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "expandBraceExpansion",
          "declaration": {
            "name": "expandBraceExpansion",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPatternParts",
          "declaration": {
            "name": "getPatternParts",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "makeRe",
          "declaration": {
            "name": "makeRe",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertPatternsToRe",
          "declaration": {
            "name": "convertPatternsToRe",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "matchAny",
          "declaration": {
            "name": "matchAny",
            "module": "demo/node_modules/fast-glob/out/utils/pattern.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/pattern.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/stream.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "merge",
          "return": {
            "type": {
              "text": "NodeJS.ReadableStream"
            }
          },
          "parameters": [
            {
              "name": "streams",
              "type": {
                "text": "Readable[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "merge",
          "declaration": {
            "name": "merge",
            "module": "demo/node_modules/fast-glob/out/utils/stream.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/stream.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/string.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isString",
          "return": {
            "type": {
              "text": "input is string"
            }
          },
          "parameters": [
            {
              "name": "input",
              "type": {
                "text": "unknown"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isEmpty",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "input",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isString",
          "declaration": {
            "name": "isString",
            "module": "demo/node_modules/fast-glob/out/utils/string.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isEmpty",
          "declaration": {
            "name": "isEmpty",
            "module": "demo/node_modules/fast-glob/out/utils/string.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/utils/string.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/is-reference/dist/types/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isReference",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "node",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "parent",
              "type": {
                "text": "Node"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "isReference",
            "module": "demo/node_modules/is-reference/dist/types/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/ChildProcessWorker.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This class wraps the child process and provides a nice interface to\ncommunicate with. It takes care of:\n\n - Re-spawning the process if it dies.\n - Queues calls while the worker is busy.\n - Re-sends the requests if the worker blew up.\n\nThe reason for queueing them here (since childProcess.send also has an\ninternal queue) is because the worker could be doing asynchronous work, and\nthis would lead to the child process to read its receiving buffer and start a\nsecond call. By queueing calls here, we don't send the next call to the\nchildren until we receive the result of the previous one.\n\nAs soon as a request starts to be processed by a worker, its \"processed\"\nfield is changed to \"true\", so that other workers which might encounter the\nsame call skip it.",
          "name": "ChildProcessWorker",
          "members": [
            {
              "kind": "field",
              "name": "_child",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_request",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_retries",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onProcessEnd",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onCustomMessage",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_fakeStream",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stdout",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stderr",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_exitPromise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resolveExitPromise",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_shutdown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onMessage",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onExit",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "send",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "request",
                  "type": {
                    "text": "ChildMessage"
                  }
                },
                {
                  "name": "onProcessStart",
                  "type": {
                    "text": "OnStart"
                  }
                },
                {
                  "name": "onProcessEnd",
                  "type": {
                    "text": "OnEnd"
                  }
                },
                {
                  "name": "onCustomMessage",
                  "type": {
                    "text": "OnCustomMessage"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "waitForExit",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "forceExit",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getWorkerId",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "getStdout",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "getStderr",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "_getFakeStream",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ChildProcessWorker",
            "module": "demo/node_modules/jest-worker/build/workers/ChildProcessWorker.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/ChildProcessWorker.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/NodeThreadsWorker.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ExperimentalWorker",
          "members": [
            {
              "kind": "field",
              "name": "_worker",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_request",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_retries",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onProcessEnd",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onCustomMessage",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_fakeStream",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stdout",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stderr",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_exitPromise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resolveExitPromise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_forceExited",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_shutdown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onMessage",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onExit",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "waitForExit",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "forceExit",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "send",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "request",
                  "type": {
                    "text": "ChildMessage"
                  }
                },
                {
                  "name": "onProcessStart",
                  "type": {
                    "text": "OnStart"
                  }
                },
                {
                  "name": "onProcessEnd",
                  "type": {
                    "text": "OnEnd"
                  }
                },
                {
                  "name": "onCustomMessage",
                  "type": {
                    "text": "OnCustomMessage"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getWorkerId",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "getStdout",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "getStderr",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "_getFakeStream",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ExperimentalWorker",
            "module": "demo/node_modules/jest-worker/build/workers/NodeThreadsWorker.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/NodeThreadsWorker.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/messageParent.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "messageParent",
          "type": {
            "text": "(message: unknown, parentProcess?: NodeJS.Process) => void"
          },
          "description": "Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "messageParent",
            "module": "demo/node_modules/jest-worker/build/workers/messageParent.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/messageParent.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/processChild.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/processChild.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/threadChild.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/workers/threadChild.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseWorkerPool",
          "members": [
            {
              "kind": "field",
              "name": "_stderr",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stdout",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "WorkerPoolOptions"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_workers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getStderr",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream"
                }
              }
            },
            {
              "kind": "method",
              "name": "getStdout",
              "return": {
                "type": {
                  "text": "NodeJS.ReadableStream"
                }
              }
            },
            {
              "kind": "method",
              "name": "getWorkers",
              "return": {
                "type": {
                  "text": "Array<WorkerInterface>"
                }
              }
            },
            {
              "kind": "method",
              "name": "getWorkerById",
              "return": {
                "type": {
                  "text": "WorkerInterface"
                }
              },
              "parameters": [
                {
                  "name": "workerId",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createWorker",
              "return": {
                "type": {
                  "text": "WorkerInterface"
                }
              },
              "parameters": [
                {
                  "name": "_workerOptions",
                  "type": {
                    "text": "WorkerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "end",
              "return": {
                "type": {
                  "text": "Promise<PoolExitResult>"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "BaseWorkerPool",
            "module": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/jest-worker/build/base/BaseWorkerPool.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./source/basic"
          }
        },
        {
          "kind": "js",
          "name": "Except",
          "declaration": {
            "name": "Except",
            "module": "./source/except"
          }
        },
        {
          "kind": "js",
          "name": "Mutable",
          "declaration": {
            "name": "Mutable",
            "module": "./source/mutable"
          }
        },
        {
          "kind": "js",
          "name": "Merge",
          "declaration": {
            "name": "Merge",
            "module": "./source/merge"
          }
        },
        {
          "kind": "js",
          "name": "MergeExclusive",
          "declaration": {
            "name": "MergeExclusive",
            "module": "./source/merge-exclusive"
          }
        },
        {
          "kind": "js",
          "name": "RequireAtLeastOne",
          "declaration": {
            "name": "RequireAtLeastOne",
            "module": "./source/require-at-least-one"
          }
        },
        {
          "kind": "js",
          "name": "ReadonlyDeep",
          "declaration": {
            "name": "ReadonlyDeep",
            "module": "./source/readonly-deep"
          }
        },
        {
          "kind": "js",
          "name": "LiteralUnion",
          "declaration": {
            "name": "LiteralUnion",
            "module": "./source/literal-union"
          }
        },
        {
          "kind": "js",
          "name": "Promisable",
          "declaration": {
            "name": "Promisable",
            "module": "./source/promisable"
          }
        },
        {
          "kind": "js",
          "name": "PackageJson",
          "declaration": {
            "name": "PackageJson",
            "module": "./source/package-json"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./source/basic"
          }
        },
        {
          "kind": "js",
          "name": "Except",
          "declaration": {
            "name": "Except",
            "module": "./source/except"
          }
        },
        {
          "kind": "js",
          "name": "Mutable",
          "declaration": {
            "name": "Mutable",
            "module": "./source/mutable"
          }
        },
        {
          "kind": "js",
          "name": "Merge",
          "declaration": {
            "name": "Merge",
            "module": "./source/merge"
          }
        },
        {
          "kind": "js",
          "name": "MergeExclusive",
          "declaration": {
            "name": "MergeExclusive",
            "module": "./source/merge-exclusive"
          }
        },
        {
          "kind": "js",
          "name": "RequireAtLeastOne",
          "declaration": {
            "name": "RequireAtLeastOne",
            "module": "./source/require-at-least-one"
          }
        },
        {
          "kind": "js",
          "name": "RequireExactlyOne",
          "declaration": {
            "name": "RequireExactlyOne",
            "module": "./source/require-exactly-one"
          }
        },
        {
          "kind": "js",
          "name": "PartialDeep",
          "declaration": {
            "name": "PartialDeep",
            "module": "./source/partial-deep"
          }
        },
        {
          "kind": "js",
          "name": "ReadonlyDeep",
          "declaration": {
            "name": "ReadonlyDeep",
            "module": "./source/readonly-deep"
          }
        },
        {
          "kind": "js",
          "name": "LiteralUnion",
          "declaration": {
            "name": "LiteralUnion",
            "module": "./source/literal-union"
          }
        },
        {
          "kind": "js",
          "name": "Promisable",
          "declaration": {
            "name": "Promisable",
            "module": "./source/promisable"
          }
        },
        {
          "kind": "js",
          "name": "Opaque",
          "declaration": {
            "name": "Opaque",
            "module": "./source/opaque"
          }
        },
        {
          "kind": "js",
          "name": "SetOptional",
          "declaration": {
            "name": "SetOptional",
            "module": "./source/set-optional"
          }
        },
        {
          "kind": "js",
          "name": "SetRequired",
          "declaration": {
            "name": "SetRequired",
            "module": "./source/set-required"
          }
        },
        {
          "kind": "js",
          "name": "PackageJson",
          "declaration": {
            "name": "PackageJson",
            "module": "./source/package-json"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/es/rollup.browser.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "e"
        },
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "e"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Ko",
          "parameters": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VERSION",
          "declaration": {
            "name": "e",
            "module": "demo/node_modules/rollup/dist/es/rollup.browser.js"
          }
        },
        {
          "kind": "js",
          "name": "rollup",
          "declaration": {
            "name": "Ko",
            "module": "demo/node_modules/rollup/dist/es/rollup.browser.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/es/rollup.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "VERSION",
          "declaration": {
            "name": "version",
            "module": "./shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "rollup",
          "declaration": {
            "name": "rollup",
            "module": "./shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "./shared/rollup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/shared/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/shared/loadConfigFile.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/shared/mergeOptions.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/shared/rollup.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/shared/watch-cli.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/shared/watch.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/dotdot/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/foo.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/mug.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/precedence/aaa.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/precedence/bbb.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/sourcemap-codec/dist/types/sourcemap-codec.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "decode",
          "return": {
            "type": {
              "text": "SourceMapMappings"
            }
          },
          "parameters": [
            {
              "name": "mappings",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "encode",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "decoded",
              "type": {
                "text": "SourceMapMappings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "decode",
          "declaration": {
            "name": "decode",
            "module": "demo/node_modules/sourcemap-codec/dist/types/sourcemap-codec.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "encode",
          "declaration": {
            "name": "encode",
            "module": "demo/node_modules/sourcemap-codec/dist/types/sourcemap-codec.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/source-map.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourceMapConsumer",
          "members": [
            {
              "kind": "field",
              "name": "GENERATED_ORDER",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "ORIGINAL_ORDER",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "GREATEST_LOWER_BOUND",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "LEAST_UPPER_BOUND",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "method",
              "name": "computeColumnSpans",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "originalPositionFor",
              "return": {
                "type": {
                  "text": "MappedPosition"
                }
              },
              "parameters": [
                {
                  "name": "generatedPosition",
                  "type": {
                    "text": "FindPosition"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "generatedPositionFor",
              "return": {
                "type": {
                  "text": "LineRange"
                }
              },
              "parameters": [
                {
                  "name": "originalPosition",
                  "type": {
                    "text": "SourceFindPosition"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "allGeneratedPositionsFor",
              "return": {
                "type": {
                  "text": "Position[]"
                }
              },
              "parameters": [
                {
                  "name": "originalPosition",
                  "type": {
                    "text": "MappedPosition"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasContentsOfAllSources",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "sourceContentFor",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "returnNullOnMissing",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "eachMapping",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "(mapping: MappingItem) => void"
                  }
                },
                {
                  "name": "context",
                  "optional": true,
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "order",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourceMapGenerator",
          "members": [
            {
              "kind": "method",
              "name": "fromSourceMap",
              "static": true,
              "return": {
                "type": {
                  "text": "SourceMapGenerator"
                }
              },
              "parameters": [
                {
                  "name": "sourceMapConsumer",
                  "type": {
                    "text": "SourceMapConsumer"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addMapping",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mapping",
                  "type": {
                    "text": "Mapping"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSourceContent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "sourceFile",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sourceContent",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "applySourceMap",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "sourceMapConsumer",
                  "type": {
                    "text": "SourceMapConsumer"
                  }
                },
                {
                  "name": "sourceFile",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sourceMapPath",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourceNode",
          "members": [
            {
              "kind": "method",
              "name": "fromStringWithSourceMap",
              "static": true,
              "return": {
                "type": {
                  "text": "SourceNode"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sourceMapConsumer",
                  "type": {
                    "text": "SourceMapConsumer"
                  }
                },
                {
                  "name": "relativePath",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "add",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "chunk",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prepend",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "chunk",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSourceContent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "sourceFile",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "sourceContent",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "walk",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "fn",
                  "type": {
                    "text": "(chunk: string, mapping: MappedPosition) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "walkSourceContents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "fn",
                  "type": {
                    "text": "(file: string, content: string) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "join",
              "return": {
                "type": {
                  "text": "SourceNode"
                }
              },
              "parameters": [
                {
                  "name": "sep",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "replaceRight",
              "return": {
                "type": {
                  "text": "SourceNode"
                }
              },
              "parameters": [
                {
                  "name": "pattern",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "toStringWithSourceMap",
              "return": {
                "type": {
                  "text": "CodeWithSourceMap"
                }
              },
              "parameters": [
                {
                  "name": "startOfSourceMap",
                  "optional": true,
                  "type": {
                    "text": "StartOfSourceMap"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceMapConsumer",
          "declaration": {
            "name": "SourceMapConsumer",
            "module": "demo/node_modules/source-map-support/node_modules/source-map/source-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourceMapGenerator",
          "declaration": {
            "name": "SourceMapGenerator",
            "module": "demo/node_modules/source-map-support/node_modules/source-map/source-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourceNode",
          "declaration": {
            "name": "SourceNode",
            "module": "demo/node_modules/source-map-support/node_modules/source-map/source-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/source-map.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/utils/first_in_statement.js",
      "declarations": [
        {
          "kind": "function",
          "name": "first_in_statement",
          "parameters": [
            {
              "name": "stack"
            }
          ]
        },
        {
          "kind": "function",
          "name": "left_is_object",
          "parameters": [
            {
              "name": "node"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "first_in_statement",
          "declaration": {
            "name": "first_in_statement",
            "module": "demo/node_modules/terser/lib/utils/first_in_statement.js"
          }
        },
        {
          "kind": "js",
          "name": "left_is_object",
          "declaration": {
            "name": "left_is_object",
            "module": "demo/node_modules/terser/lib/utils/first_in_statement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/utils/index.js",
      "declarations": [
        {
          "kind": "function",
          "name": "characters",
          "parameters": [
            {
              "name": "str"
            }
          ]
        },
        {
          "kind": "function",
          "name": "member",
          "parameters": [
            {
              "name": "name"
            },
            {
              "name": "array"
            }
          ]
        },
        {
          "kind": "function",
          "name": "defaults",
          "parameters": [
            {
              "name": "args"
            },
            {
              "name": "defs"
            },
            {
              "name": "croak"
            }
          ]
        },
        {
          "kind": "function",
          "name": "noop"
        },
        {
          "kind": "function",
          "name": "return_false"
        },
        {
          "kind": "function",
          "name": "return_true"
        },
        {
          "kind": "function",
          "name": "return_this"
        },
        {
          "kind": "function",
          "name": "return_null"
        },
        {
          "kind": "variable",
          "name": "MAP"
        },
        {
          "kind": "function",
          "name": "MAP",
          "parameters": [
            {
              "name": "a"
            },
            {
              "name": "f"
            },
            {
              "name": "backwards"
            }
          ]
        },
        {
          "kind": "function",
          "name": "make_node",
          "parameters": [
            {
              "name": "ctor"
            },
            {
              "name": "orig"
            },
            {
              "name": "props"
            }
          ]
        },
        {
          "kind": "function",
          "name": "push_uniq",
          "parameters": [
            {
              "name": "array"
            },
            {
              "name": "el"
            }
          ]
        },
        {
          "kind": "function",
          "name": "string_template",
          "parameters": [
            {
              "name": "text"
            },
            {
              "name": "props"
            }
          ]
        },
        {
          "kind": "function",
          "name": "remove",
          "parameters": [
            {
              "name": "array"
            },
            {
              "name": "el"
            }
          ]
        },
        {
          "kind": "function",
          "name": "mergeSort",
          "parameters": [
            {
              "name": "array"
            },
            {
              "name": "cmp"
            }
          ]
        },
        {
          "kind": "function",
          "name": "makePredicate",
          "parameters": [
            {
              "name": "words"
            }
          ]
        },
        {
          "kind": "function",
          "name": "map_add",
          "parameters": [
            {
              "name": "map"
            },
            {
              "name": "key"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "kind": "function",
          "name": "map_from_object",
          "parameters": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "kind": "function",
          "name": "map_to_object",
          "parameters": [
            {
              "name": "map"
            }
          ]
        },
        {
          "kind": "function",
          "name": "HOP",
          "parameters": [
            {
              "name": "obj"
            },
            {
              "name": "prop"
            }
          ]
        },
        {
          "kind": "function",
          "name": "keep_name",
          "parameters": [
            {
              "name": "keep_setting"
            },
            {
              "name": "name"
            }
          ]
        },
        {
          "kind": "function",
          "name": "regexp_source_fix",
          "parameters": [
            {
              "name": "source"
            }
          ]
        },
        {
          "kind": "function",
          "name": "sort_regexp_flags",
          "parameters": [
            {
              "name": "flags"
            }
          ]
        },
        {
          "kind": "function",
          "name": "has_annotation",
          "parameters": [
            {
              "name": "node"
            },
            {
              "name": "annotation"
            }
          ]
        },
        {
          "kind": "function",
          "name": "set_annotation",
          "parameters": [
            {
              "name": "node"
            },
            {
              "name": "annotation"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "characters",
          "declaration": {
            "name": "characters",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "defaults",
          "declaration": {
            "name": "defaults",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "HOP",
          "declaration": {
            "name": "HOP",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "keep_name",
          "declaration": {
            "name": "keep_name",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "make_node",
          "declaration": {
            "name": "make_node",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "makePredicate",
          "declaration": {
            "name": "makePredicate",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "map_add",
          "declaration": {
            "name": "map_add",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "map_from_object",
          "declaration": {
            "name": "map_from_object",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "map_to_object",
          "declaration": {
            "name": "map_to_object",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "MAP",
          "declaration": {
            "name": "MAP",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "member",
          "declaration": {
            "name": "member",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "mergeSort",
          "declaration": {
            "name": "mergeSort",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "noop",
          "declaration": {
            "name": "noop",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "push_uniq",
          "declaration": {
            "name": "push_uniq",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "regexp_source_fix",
          "declaration": {
            "name": "regexp_source_fix",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "remove",
          "declaration": {
            "name": "remove",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "return_false",
          "declaration": {
            "name": "return_false",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "return_null",
          "declaration": {
            "name": "return_null",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "return_this",
          "declaration": {
            "name": "return_this",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "return_true",
          "declaration": {
            "name": "return_true",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "sort_regexp_flags",
          "declaration": {
            "name": "sort_regexp_flags",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "string_template",
          "declaration": {
            "name": "string_template",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "has_annotation",
          "declaration": {
            "name": "has_annotation",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "set_annotation",
          "declaration": {
            "name": "set_annotation",
            "module": "demo/node_modules/terser/lib/utils/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/terser/lib/compress/index.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Compressor",
          "members": [
            {
              "kind": "method",
              "name": "option",
              "parameters": [
                {
                  "name": "key"
                }
              ]
            },
            {
              "kind": "method",
              "name": "exposed",
              "parameters": [
                {
                  "name": "def"
                }
              ]
            },
            {
              "kind": "method",
              "name": "in_boolean_context"
            },
            {
              "kind": "method",
              "name": "get_toplevel"
            },
            {
              "kind": "method",
              "name": "compress",
              "parameters": [
                {
                  "name": "toplevel"
                }
              ]
            },
            {
              "kind": "method",
              "name": "before",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "descend"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_visit",
              "parameters": [
                {
                  "name": "node"
                },
                {
                  "name": "descend"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "parent",
              "parameters": [
                {
                  "name": "n"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "push",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "pop",
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "self",
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "find_parent",
              "parameters": [
                {
                  "name": "type"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "has_directive",
              "parameters": [
                {
                  "name": "type"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            },
            {
              "kind": "method",
              "name": "loopcontrol_target",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "inheritedFrom": {
                "name": "TreeWalker",
                "module": "demo/node_modules/terser/lib/ast.js"
              }
            }
          ],
          "superclass": {
            "name": "TreeWalker",
            "module": "/demo/node_modules/terser/lib/ast.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Compressor",
          "declaration": {
            "name": "Compressor",
            "module": "demo/node_modules/terser/lib/compress/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/adapters/fs.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FILE_SYSTEM_ADAPTER",
          "type": {
            "text": "FileSystemAdapter"
          }
        },
        {
          "kind": "function",
          "name": "createFileSystemAdapter",
          "return": {
            "type": {
              "text": "FileSystemAdapter"
            }
          },
          "parameters": [
            {
              "name": "fsMethods",
              "optional": true,
              "type": {
                "text": "Partial<FileSystemAdapter>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FILE_SYSTEM_ADAPTER",
          "declaration": {
            "name": "FILE_SYSTEM_ADAPTER",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/adapters/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "createFileSystemAdapter",
          "declaration": {
            "name": "createFileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/adapters/fs.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/adapters/fs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/adapters/fs.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/adapters/fs.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/async.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readdirWithFileTypes",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/providers/async.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdirWithFileTypes",
          "declaration": {
            "name": "readdirWithFileTypes",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/providers/async.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdir",
          "declaration": {
            "name": "readdir",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/providers/async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/async.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/async.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/async.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/common.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "joinPathSegments",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "b",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "separator",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "joinPathSegments",
          "declaration": {
            "name": "joinPathSegments",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/providers/common.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/common.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/common.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/common.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/sync.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readdirWithFileTypes",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readdir",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/providers/sync.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdirWithFileTypes",
          "declaration": {
            "name": "readdirWithFileTypes",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/providers/sync.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdir",
          "declaration": {
            "name": "readdir",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/providers/sync.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/sync.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/providers/sync.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/utils/fs.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createDirentFromStats",
          "return": {
            "type": {
              "text": "Dirent"
            }
          },
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "stats",
              "type": {
                "text": "Stats"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createDirentFromStats",
          "declaration": {
            "name": "createDirentFromStats",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/utils/fs.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/utils/fs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/utils/fs.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/utils/fs.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/utils/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "fs",
          "declaration": {
            "name": "fs",
            "module": "demo/node_modules/@nodelib/fs.scandir/out/utils/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/utils/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/adapters/fs.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/adapters/fs.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FILE_SYSTEM_ADAPTER",
          "type": {
            "text": "FileSystemAdapter"
          }
        },
        {
          "kind": "function",
          "name": "createFileSystemAdapter",
          "return": {
            "type": {
              "text": "FileSystemAdapter"
            }
          },
          "parameters": [
            {
              "name": "fsMethods",
              "optional": true,
              "type": {
                "text": "Partial<FileSystemAdapter>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FILE_SYSTEM_ADAPTER",
          "declaration": {
            "name": "FILE_SYSTEM_ADAPTER",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/adapters/fs.ts"
          }
        },
        {
          "kind": "js",
          "name": "createFileSystemAdapter",
          "declaration": {
            "name": "createFileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/adapters/fs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/types/index.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/out/types/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/types/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/utils/fs.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/utils/fs.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createDirentFromStats",
          "return": {
            "type": {
              "text": "Dirent"
            }
          },
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "stats",
              "type": {
                "text": "Stats"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createDirentFromStats",
          "declaration": {
            "name": "createDirentFromStats",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/utils/fs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/utils/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "fs",
          "declaration": {
            "name": "fs",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/utils/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/providers/async.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/providers/async.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readdirWithFileTypes",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readdir",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/providers/async.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdirWithFileTypes",
          "declaration": {
            "name": "readdirWithFileTypes",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/providers/async.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdir",
          "declaration": {
            "name": "readdir",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/providers/async.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/providers/common.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/providers/common.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "joinPathSegments",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "b",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "separator",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "joinPathSegments",
          "declaration": {
            "name": "joinPathSegments",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/providers/common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/providers/sync.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.scandir/src/providers/sync.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readdirWithFileTypes",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "readdir",
          "return": {
            "type": {
              "text": "Entry[]"
            }
          },
          "parameters": [
            {
              "name": "directory",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/providers/sync.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdirWithFileTypes",
          "declaration": {
            "name": "readdirWithFileTypes",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/providers/sync.ts"
          }
        },
        {
          "kind": "js",
          "name": "readdir",
          "declaration": {
            "name": "readdir",
            "module": "demo/node_modules/@nodelib/fs.scandir/src/providers/sync.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/adapters/fs.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FILE_SYSTEM_ADAPTER",
          "type": {
            "text": "FileSystemAdapter"
          }
        },
        {
          "kind": "function",
          "name": "createFileSystemAdapter",
          "return": {
            "type": {
              "text": "FileSystemAdapter"
            }
          },
          "parameters": [
            {
              "name": "fsMethods",
              "optional": true,
              "type": {
                "text": "Partial<FileSystemAdapter>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FILE_SYSTEM_ADAPTER",
          "declaration": {
            "name": "FILE_SYSTEM_ADAPTER",
            "module": "demo/node_modules/@nodelib/fs.stat/out/adapters/fs.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "createFileSystemAdapter",
          "declaration": {
            "name": "createFileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.stat/out/adapters/fs.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/adapters/fs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/adapters/fs.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/adapters/fs.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/types/index.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/types/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/adapters/fs.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/adapters/fs.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FILE_SYSTEM_ADAPTER",
          "type": {
            "text": "FileSystemAdapter"
          }
        },
        {
          "kind": "function",
          "name": "createFileSystemAdapter",
          "return": {
            "type": {
              "text": "FileSystemAdapter"
            }
          },
          "parameters": [
            {
              "name": "fsMethods",
              "optional": true,
              "type": {
                "text": "Partial<FileSystemAdapter>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FILE_SYSTEM_ADAPTER",
          "declaration": {
            "name": "FILE_SYSTEM_ADAPTER",
            "module": "demo/node_modules/@nodelib/fs.stat/src/adapters/fs.ts"
          }
        },
        {
          "kind": "js",
          "name": "createFileSystemAdapter",
          "declaration": {
            "name": "createFileSystemAdapter",
            "module": "demo/node_modules/@nodelib/fs.stat/src/adapters/fs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/providers/async.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "demo/node_modules/@nodelib/fs.stat/out/providers/async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/providers/async.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/providers/async.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/providers/async.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/providers/sync.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "Stats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "demo/node_modules/@nodelib/fs.stat/out/providers/sync.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/providers/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/providers/sync.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/out/providers/sync.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/providers/async.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/providers/async.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "callback",
              "type": {
                "text": "AsyncCallback"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "demo/node_modules/@nodelib/fs.stat/src/providers/async.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/providers/sync.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/providers/sync.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "Stats"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "demo/node_modules/@nodelib/fs.stat/src/providers/sync.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.stat/src/types/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/async.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncProvider",
          "members": [
            {
              "kind": "field",
              "name": "_root",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_settings",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_reader",
              "type": {
                "text": "AsyncReader"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_storage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "AsyncCallback"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AsyncProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/out/providers/async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/async.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/async.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/async.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncProvider",
          "declaration": {
            "name": "AsyncProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/out/providers/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "StreamProvider",
          "declaration": {
            "name": "StreamProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/out/providers/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "SyncProvider",
          "declaration": {
            "name": "SyncProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/out/providers/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/stream.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StreamProvider",
          "members": [
            {
              "kind": "field",
              "name": "_root",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_settings",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_reader",
              "type": {
                "text": "AsyncReader"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_stream",
              "type": {
                "text": "Readable"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "Readable"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "StreamProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/out/providers/stream.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/stream.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/stream.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/stream.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/sync.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SyncProvider",
          "members": [
            {
              "kind": "field",
              "name": "_root",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_settings",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_reader",
              "type": {
                "text": "SyncReader"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "Entry[]"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SyncProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/out/providers/sync.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/sync.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/providers/sync.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/tests/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "buildFakeFileEntry",
          "return": {
            "type": {
              "text": "Entry"
            }
          },
          "parameters": [
            {
              "name": "entry",
              "optional": true,
              "type": {
                "text": "Partial<Entry>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "buildFakeDirectoryEntry",
          "return": {
            "type": {
              "text": "Entry"
            }
          },
          "parameters": [
            {
              "name": "entry",
              "optional": true,
              "type": {
                "text": "Partial<Entry>"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "EPERM_ERRNO",
          "type": {
            "text": "Errno"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestAsyncReader",
          "members": [
            {
              "kind": "field",
              "name": "read",
              "type": {
                "text": "sinon.SinonStub"
              }
            },
            {
              "kind": "field",
              "name": "destroy",
              "type": {
                "text": "sinon.SinonStub"
              }
            },
            {
              "kind": "field",
              "name": "onError",
              "type": {
                "text": "sinon.SinonStub"
              }
            },
            {
              "kind": "field",
              "name": "onEntry",
              "type": {
                "text": "sinon.SinonStub"
              }
            },
            {
              "kind": "field",
              "name": "onEnd",
              "type": {
                "text": "sinon.SinonStub"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestSyncReader",
          "members": [
            {
              "kind": "field",
              "name": "read",
              "type": {
                "text": "sinon.SinonStub"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "buildFakeFileEntry",
          "declaration": {
            "name": "buildFakeFileEntry",
            "module": "demo/node_modules/@nodelib/fs.walk/out/tests/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "buildFakeDirectoryEntry",
          "declaration": {
            "name": "buildFakeDirectoryEntry",
            "module": "demo/node_modules/@nodelib/fs.walk/out/tests/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "EPERM_ERRNO",
          "declaration": {
            "name": "EPERM_ERRNO",
            "module": "demo/node_modules/@nodelib/fs.walk/out/tests/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TestAsyncReader",
          "declaration": {
            "name": "TestAsyncReader",
            "module": "demo/node_modules/@nodelib/fs.walk/out/tests/index.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TestSyncReader",
          "declaration": {
            "name": "TestSyncReader",
            "module": "demo/node_modules/@nodelib/fs.walk/out/tests/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/tests/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/types/index.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/types/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/providers/async.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/providers/async.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncProvider",
          "members": [
            {
              "kind": "field",
              "name": "_reader",
              "type": {
                "text": "AsyncReader"
              },
              "privacy": "protected",
              "default": "AsyncReader"
            },
            {
              "kind": "field",
              "name": "_storage",
              "type": {
                "text": "Set<Entry>"
              },
              "privacy": "private",
              "default": "Set"
            },
            {
              "kind": "method",
              "name": "read",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "AsyncCallback"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AsyncProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/src/providers/async.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/providers/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncProvider",
          "declaration": {
            "name": "AsyncProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/src/providers/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "StreamProvider",
          "declaration": {
            "name": "StreamProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/src/providers/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "SyncProvider",
          "declaration": {
            "name": "SyncProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/src/providers/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/providers/stream.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/providers/stream.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StreamProvider",
          "members": [
            {
              "kind": "field",
              "name": "_reader",
              "type": {
                "text": "AsyncReader"
              },
              "privacy": "protected",
              "default": "AsyncReader"
            },
            {
              "kind": "field",
              "name": "_stream",
              "type": {
                "text": "Readable"
              },
              "privacy": "protected",
              "default": "Readable"
            },
            {
              "kind": "method",
              "name": "read",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Readable"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "StreamProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/src/providers/stream.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/providers/sync.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/providers/sync.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SyncProvider",
          "members": [
            {
              "kind": "field",
              "name": "_reader",
              "type": {
                "text": "SyncReader"
              },
              "privacy": "protected",
              "default": "SyncReader"
            },
            {
              "kind": "method",
              "name": "read",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Entry[]"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SyncProvider",
            "module": "demo/node_modules/@nodelib/fs.walk/src/providers/sync.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/async.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncReader",
          "members": [
            {
              "kind": "field",
              "name": "_settings",
              "type": {
                "text": "Settings"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_scandir",
              "type": {
                "text": "typeof fsScandir.scandir"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_emitter",
              "type": {
                "text": "EventEmitter"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_queue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isFatalError",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isDestroyed",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "EventEmitter"
                }
              }
            },
            {
              "kind": "field",
              "name": "isDestroyed",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "destroy",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onEntry",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "EntryEventCallback"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onError",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "ErrorEventCallback"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onEnd",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "EndEventCallback"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_pushToQueue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_worker",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleError",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleEntry",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_emitEntry",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "Reader",
            "module": "/demo/node_modules/@nodelib/fs.walk/out/readers/reader"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AsyncReader",
            "module": "demo/node_modules/@nodelib/fs.walk/out/readers/async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/async.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/async.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/async.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/common.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isFatalError",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "Errno"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isAppliedFilter",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "filter",
              "type": {
                "text": "FilterFunction<T> | null"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "replacePathSegmentSeparator",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "filepath",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "separator",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "joinPathSegments",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "b",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "separator",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isFatalError",
          "declaration": {
            "name": "isFatalError",
            "module": "demo/node_modules/@nodelib/fs.walk/out/readers/common.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isAppliedFilter",
          "declaration": {
            "name": "isAppliedFilter",
            "module": "demo/node_modules/@nodelib/fs.walk/out/readers/common.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "replacePathSegmentSeparator",
          "declaration": {
            "name": "replacePathSegmentSeparator",
            "module": "demo/node_modules/@nodelib/fs.walk/out/readers/common.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "joinPathSegments",
          "declaration": {
            "name": "joinPathSegments",
            "module": "demo/node_modules/@nodelib/fs.walk/out/readers/common.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/common.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/common.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/common.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/reader.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Reader",
          "members": [
            {
              "kind": "field",
              "name": "_root",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_settings",
              "type": {
                "text": "Settings"
              },
              "privacy": "protected"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Reader",
            "module": "demo/node_modules/@nodelib/fs.walk/out/readers/reader.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/reader.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/reader.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/reader.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/sync.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SyncReader",
          "members": [
            {
              "kind": "field",
              "name": "_scandir",
              "type": {
                "text": "typeof fsScandir.scandirSync"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_storage",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_queue",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "Entry[]"
                }
              }
            },
            {
              "kind": "field",
              "name": "_pushToQueue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleQueue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleDirectory",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleError",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleEntry",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_pushToStorage",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "Reader",
            "module": "/demo/node_modules/@nodelib/fs.walk/out/readers/reader"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SyncReader",
            "module": "demo/node_modules/@nodelib/fs.walk/out/readers/sync.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/sync.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/out/readers/sync.spec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/readers/async.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/readers/async.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncReader",
          "members": [
            {
              "kind": "field",
              "name": "_scandir",
              "type": {
                "text": "fsScandir"
              },
              "privacy": "protected",
              "default": "fsScandir"
            },
            {
              "kind": "field",
              "name": "_emitter",
              "type": {
                "text": "EventEmitter"
              },
              "privacy": "protected",
              "default": "EventEmitter"
            },
            {
              "kind": "field",
              "name": "_queue",
              "type": {
                "text": "fastq.queue"
              },
              "privacy": "private",
              "default": "fastq"
            },
            {
              "kind": "field",
              "name": "_isFatalError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isDestroyed",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "read",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "EventEmitter"
                }
              }
            },
            {
              "kind": "field",
              "name": "isDestroyed",
              "type": {
                "text": "boolean"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "destroy",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onEntry",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "EntryEventCallback"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onError",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "ErrorEventCallback"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onEnd",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "EndEventCallback"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_pushToQueue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "directory",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "base",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_worker",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "QueueItem"
                  }
                },
                {
                  "name": "done",
                  "type": {
                    "text": "fastq.done"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleError",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "Error"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleEntry",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "entry",
                  "type": {
                    "text": "Entry"
                  }
                },
                {
                  "name": "base",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_emitEntry",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "entry",
                  "type": {
                    "text": "Entry"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "Reader",
            "module": "/demo/node_modules/@nodelib/fs.walk/src/readers/reader"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AsyncReader",
            "module": "demo/node_modules/@nodelib/fs.walk/src/readers/async.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/readers/common.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/readers/common.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isFatalError",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "settings",
              "type": {
                "text": "Settings"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "Errno"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isAppliedFilter",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "filter",
              "type": {
                "text": "FilterFunction<T> | null"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "replacePathSegmentSeparator",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "filepath",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "separator",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "joinPathSegments",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "b",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "separator",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isFatalError",
          "declaration": {
            "name": "isFatalError",
            "module": "demo/node_modules/@nodelib/fs.walk/src/readers/common.ts"
          }
        },
        {
          "kind": "js",
          "name": "isAppliedFilter",
          "declaration": {
            "name": "isAppliedFilter",
            "module": "demo/node_modules/@nodelib/fs.walk/src/readers/common.ts"
          }
        },
        {
          "kind": "js",
          "name": "replacePathSegmentSeparator",
          "declaration": {
            "name": "replacePathSegmentSeparator",
            "module": "demo/node_modules/@nodelib/fs.walk/src/readers/common.ts"
          }
        },
        {
          "kind": "js",
          "name": "joinPathSegments",
          "declaration": {
            "name": "joinPathSegments",
            "module": "demo/node_modules/@nodelib/fs.walk/src/readers/common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/readers/reader.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/readers/reader.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Reader"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Reader",
            "module": "demo/node_modules/@nodelib/fs.walk/src/readers/reader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/readers/sync.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/readers/sync.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SyncReader",
          "members": [
            {
              "kind": "field",
              "name": "_scandir",
              "type": {
                "text": "fsScandir"
              },
              "privacy": "protected",
              "default": "fsScandir"
            },
            {
              "kind": "field",
              "name": "_storage",
              "type": {
                "text": "Set<Entry>"
              },
              "privacy": "private",
              "default": "Set"
            },
            {
              "kind": "field",
              "name": "_queue",
              "type": {
                "text": "Set<QueueItem>"
              },
              "privacy": "private",
              "default": "Set"
            },
            {
              "kind": "method",
              "name": "read",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Entry[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_pushToQueue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "directory",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "base",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleQueue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDirectory",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "directory",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "base",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleError",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "Errno"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleEntry",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "entry",
                  "type": {
                    "text": "Entry"
                  }
                },
                {
                  "name": "base",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_pushToStorage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "entry",
                  "type": {
                    "text": "Entry"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "Reader",
            "module": "/demo/node_modules/@nodelib/fs.walk/src/readers/reader"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SyncReader",
            "module": "demo/node_modules/@nodelib/fs.walk/src/readers/sync.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/tests/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "buildFakeFileEntry",
          "return": {
            "type": {
              "text": "Entry"
            }
          },
          "parameters": [
            {
              "name": "entry",
              "optional": true,
              "type": {
                "text": "Partial<Entry>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "buildFakeDirectoryEntry",
          "return": {
            "type": {
              "text": "Entry"
            }
          },
          "parameters": [
            {
              "name": "entry",
              "optional": true,
              "type": {
                "text": "Partial<Entry>"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "EPERM_ERRNO",
          "type": {
            "text": "Errno"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestAsyncReader",
          "members": [
            {
              "kind": "field",
              "name": "read",
              "type": {
                "text": "sinon.SinonStub"
              },
              "privacy": "public",
              "default": "sinon.stub"
            },
            {
              "kind": "field",
              "name": "destroy",
              "type": {
                "text": "sinon.SinonStub"
              },
              "privacy": "public",
              "default": "sinon.stub"
            },
            {
              "kind": "field",
              "name": "onError",
              "type": {
                "text": "sinon.SinonStub"
              },
              "privacy": "public",
              "default": "sinon.stub"
            },
            {
              "kind": "field",
              "name": "onEntry",
              "type": {
                "text": "sinon.SinonStub"
              },
              "privacy": "public",
              "default": "sinon.stub"
            },
            {
              "kind": "field",
              "name": "onEnd",
              "type": {
                "text": "sinon.SinonStub"
              },
              "privacy": "public",
              "default": "sinon.stub"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestSyncReader",
          "members": [
            {
              "kind": "field",
              "name": "read",
              "type": {
                "text": "sinon.SinonStub"
              },
              "privacy": "public",
              "default": "sinon.stub"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "buildFakeFileEntry",
          "declaration": {
            "name": "buildFakeFileEntry",
            "module": "demo/node_modules/@nodelib/fs.walk/src/tests/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "buildFakeDirectoryEntry",
          "declaration": {
            "name": "buildFakeDirectoryEntry",
            "module": "demo/node_modules/@nodelib/fs.walk/src/tests/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "EPERM_ERRNO",
          "declaration": {
            "name": "EPERM_ERRNO",
            "module": "demo/node_modules/@nodelib/fs.walk/src/tests/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "TestAsyncReader",
          "declaration": {
            "name": "TestAsyncReader",
            "module": "demo/node_modules/@nodelib/fs.walk/src/tests/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "TestSyncReader",
          "declaration": {
            "name": "TestSyncReader",
            "module": "demo/node_modules/@nodelib/fs.walk/src/tests/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@nodelib/fs.walk/src/types/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/plugin-node-resolve/dist/cjs/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/plugin-node-resolve/dist/es/index.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "DEFAULTS"
        },
        {
          "kind": "function",
          "name": "nodeResolve",
          "parameters": [
            {
              "name": "opts",
              "default": "{}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "nodeResolve",
            "module": "demo/node_modules/@rollup/plugin-node-resolve/dist/es/index.js"
          }
        },
        {
          "kind": "js",
          "name": "DEFAULTS",
          "declaration": {
            "name": "DEFAULTS",
            "module": "demo/node_modules/@rollup/plugin-node-resolve/dist/es/index.js"
          }
        },
        {
          "kind": "js",
          "name": "nodeResolve",
          "declaration": {
            "name": "nodeResolve",
            "module": "demo/node_modules/@rollup/plugin-node-resolve/dist/es/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/pluginutils/dist/es/index.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "addExtension"
        },
        {
          "kind": "variable",
          "name": "extractAssignedNames"
        },
        {
          "kind": "variable",
          "name": "attachScopes"
        },
        {
          "kind": "variable",
          "name": "createFilter"
        },
        {
          "kind": "variable",
          "name": "makeLegalIdentifier"
        },
        {
          "kind": "variable",
          "name": "dataToEsm"
        },
        {
          "kind": "variable",
          "name": "index",
          "type": {
            "text": "object"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "index",
            "module": "demo/node_modules/@rollup/pluginutils/dist/es/index.js"
          }
        },
        {
          "kind": "js",
          "name": "addExtension",
          "declaration": {
            "name": "addExtension",
            "module": "demo/node_modules/@rollup/pluginutils/dist/es/index.js"
          }
        },
        {
          "kind": "js",
          "name": "attachScopes",
          "declaration": {
            "name": "attachScopes",
            "module": "demo/node_modules/@rollup/pluginutils/dist/es/index.js"
          }
        },
        {
          "kind": "js",
          "name": "createFilter",
          "declaration": {
            "name": "createFilter",
            "module": "demo/node_modules/@rollup/pluginutils/dist/es/index.js"
          }
        },
        {
          "kind": "js",
          "name": "dataToEsm",
          "declaration": {
            "name": "dataToEsm",
            "module": "demo/node_modules/@rollup/pluginutils/dist/es/index.js"
          }
        },
        {
          "kind": "js",
          "name": "extractAssignedNames",
          "declaration": {
            "name": "extractAssignedNames",
            "module": "demo/node_modules/@rollup/pluginutils/dist/es/index.js"
          }
        },
        {
          "kind": "js",
          "name": "makeLegalIdentifier",
          "declaration": {
            "name": "makeLegalIdentifier",
            "module": "demo/node_modules/@rollup/pluginutils/dist/es/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/pluginutils/dist/cjs/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/filters/deep.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DeepFilter",
          "members": [
            {
              "kind": "field",
              "name": "_settings",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_micromatchOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFilter",
              "return": {
                "type": {
                  "text": "EntryFilterFunction"
                }
              },
              "parameters": [
                {
                  "name": "basePath",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "positive",
                  "type": {
                    "text": "Pattern[]"
                  }
                },
                {
                  "name": "negative",
                  "type": {
                    "text": "Pattern[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_getMatcher",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getNegativePatternsRe",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_filter",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isSkippedByDeep",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getEntryLevel",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isSkippedSymbolicLink",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isSkippedByPositivePatterns",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isSkippedByNegativePatterns",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DeepFilter",
            "module": "demo/node_modules/fast-glob/out/providers/filters/deep.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/filters/deep.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/filters/entry.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EntryFilter",
          "members": [
            {
              "kind": "field",
              "name": "_settings",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_micromatchOptions",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "Map<string, undefined>"
              }
            },
            {
              "kind": "method",
              "name": "getFilter",
              "return": {
                "type": {
                  "text": "EntryFilterFunction"
                }
              },
              "parameters": [
                {
                  "name": "positive",
                  "type": {
                    "text": "Pattern[]"
                  }
                },
                {
                  "name": "negative",
                  "type": {
                    "text": "Pattern[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_filter",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isDuplicateEntry",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_createIndexRecord",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onlyFileFilter",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onlyDirectoryFilter",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isSkippedByAbsoluteNegativePatterns",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isMatchToPatterns",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "EntryFilter",
            "module": "demo/node_modules/fast-glob/out/providers/filters/entry.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/filters/entry.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/filters/error.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ErrorFilter",
          "members": [
            {
              "kind": "field",
              "name": "_settings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFilter",
              "return": {
                "type": {
                  "text": "ErrorFilterFunction"
                }
              }
            },
            {
              "kind": "field",
              "name": "_isNonFatalError",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ErrorFilter",
            "module": "demo/node_modules/fast-glob/out/providers/filters/error.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/filters/error.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/matchers/matcher.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Matcher",
          "members": [
            {
              "kind": "field",
              "name": "_patterns",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_settings",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_micromatchOptions",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_storage",
              "type": {
                "text": "PatternInfo[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_fillStorage",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getPatternSegments",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_splitSegmentsIntoSections",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Matcher",
            "module": "demo/node_modules/fast-glob/out/providers/matchers/matcher.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/matchers/matcher.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/matchers/partial.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PartialMatcher",
          "members": [
            {
              "kind": "method",
              "name": "match",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "filepath",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_patterns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Matcher",
                "module": "demo/node_modules/fast-glob/out/providers/matchers/matcher.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_settings",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Matcher",
                "module": "demo/node_modules/fast-glob/out/providers/matchers/matcher.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_micromatchOptions",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Matcher",
                "module": "demo/node_modules/fast-glob/out/providers/matchers/matcher.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_storage",
              "type": {
                "text": "PatternInfo[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Matcher",
                "module": "demo/node_modules/fast-glob/out/providers/matchers/matcher.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_fillStorage",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Matcher",
                "module": "demo/node_modules/fast-glob/out/providers/matchers/matcher.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_getPatternSegments",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Matcher",
                "module": "demo/node_modules/fast-glob/out/providers/matchers/matcher.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_splitSegmentsIntoSections",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Matcher",
                "module": "demo/node_modules/fast-glob/out/providers/matchers/matcher.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Matcher",
            "module": "/demo/node_modules/fast-glob/out/providers/matchers/matcher"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "PartialMatcher",
            "module": "demo/node_modules/fast-glob/out/providers/matchers/partial.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/matchers/partial.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/transformers/entry.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EntryTransformer",
          "members": [
            {
              "kind": "field",
              "name": "_settings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getTransformer",
              "return": {
                "type": {
                  "text": "EntryTransformerFunction"
                }
              }
            },
            {
              "kind": "field",
              "name": "_transform",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "EntryTransformer",
            "module": "demo/node_modules/fast-glob/out/providers/transformers/entry.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/fast-glob/out/providers/transformers/entry.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/basic.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/except.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/literal-union.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/merge-exclusive.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/merge.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/mutable.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/package-json.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/promisable.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/readonly-deep.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg/node_modules/type-fest/source/require-at-least-one.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/basic.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/except.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/literal-union.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/merge-exclusive.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/merge.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/mutable.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/opaque.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/package-json.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/partial-deep.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/promisable.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/readonly-deep.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/require-at-least-one.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/require-exactly-one.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/set-optional.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/read-pkg-up/node_modules/type-fest/source/set-required.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/dotdot/abc/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/es/shared/rollup.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "version$1",
          "type": {
            "text": "string"
          }
        },
        {
          "kind": "variable",
          "name": "version",
          "type": {
            "text": "string"
          }
        },
        {
          "kind": "function",
          "name": "ensureArray",
          "parameters": [
            {
              "name": "items"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getAugmentedNamespace",
          "parameters": [
            {
              "name": "n"
            }
          ]
        },
        {
          "kind": "function",
          "name": "defaultOnWarn",
          "parameters": [
            {
              "name": "warning"
            }
          ]
        },
        {
          "kind": "function",
          "name": "warnUnknownOptions",
          "parameters": [
            {
              "name": "passedOptions"
            },
            {
              "name": "validOptions"
            },
            {
              "name": "optionType"
            },
            {
              "name": "warn"
            },
            {
              "name": "ignoredKeys",
              "default": "/$./"
            }
          ]
        },
        {
          "kind": "function",
          "name": "rollup",
          "parameters": [
            {
              "name": "rawInputOptions"
            }
          ]
        },
        {
          "kind": "function",
          "name": "rollupInternal",
          "parameters": [
            {
              "name": "rawInputOptions"
            },
            {
              "name": "watcher"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "fseventsImporter",
          "type": {
            "text": "object"
          }
        },
        {
          "kind": "function",
          "name": "watch",
          "parameters": [
            {
              "name": "configs"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultOnWarn",
          "declaration": {
            "name": "defaultOnWarn",
            "module": "demo/node_modules/rollup/dist/es/shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "ensureArray",
          "declaration": {
            "name": "ensureArray",
            "module": "demo/node_modules/rollup/dist/es/shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "fseventsImporter",
          "declaration": {
            "name": "fseventsImporter",
            "module": "demo/node_modules/rollup/dist/es/shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "getAugmentedNamespace",
          "declaration": {
            "name": "getAugmentedNamespace",
            "module": "demo/node_modules/rollup/dist/es/shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "rollup",
          "declaration": {
            "name": "rollup",
            "module": "demo/node_modules/rollup/dist/es/shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "rollupInternal",
          "declaration": {
            "name": "rollupInternal",
            "module": "demo/node_modules/rollup/dist/es/shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "version",
          "declaration": {
            "name": "version$1",
            "module": "demo/node_modules/rollup/dist/es/shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "warnUnknownOptions",
          "declaration": {
            "name": "warnUnknownOptions",
            "module": "demo/node_modules/rollup/dist/es/shared/rollup.js"
          }
        },
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "demo/node_modules/rollup/dist/es/shared/rollup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/rollup/dist/es/shared/watch.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Watcher",
          "members": [
            {
              "kind": "method",
              "name": "close"
            },
            {
              "kind": "method",
              "name": "invalidate",
              "parameters": [
                {
                  "name": "file"
                }
              ]
            },
            {
              "kind": "method",
              "name": "run"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "Task",
          "members": [
            {
              "kind": "method",
              "name": "close"
            },
            {
              "kind": "method",
              "name": "invalidate",
              "parameters": [
                {
                  "name": "id"
                },
                {
                  "name": "details"
                }
              ]
            },
            {
              "kind": "method",
              "name": "run"
            },
            {
              "kind": "method",
              "name": "updateWatchedFiles",
              "parameters": [
                {
                  "name": "result"
                }
              ]
            },
            {
              "kind": "method",
              "name": "watchFile",
              "parameters": [
                {
                  "name": "id"
                },
                {
                  "name": "isTransformDependency",
                  "default": "false"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Task",
          "declaration": {
            "name": "Task",
            "module": "demo/node_modules/rollup/dist/es/shared/watch.js"
          }
        },
        {
          "kind": "js",
          "name": "Watcher",
          "declaration": {
            "name": "Watcher",
            "module": "demo/node_modules/rollup/dist/es/shared/watch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/pathfilter/deep_ref/main.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/baz/doom.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/baz/quux.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/browser_field/a.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/browser_field/b.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/dot_main/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/dot_slash_main/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/incorrect_main/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/other_path/root.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/same_names/foo.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/without_basedir/main.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/precedence/aaa/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/precedence/aaa/main.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/precedence/bbb/main.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/dist/source-map.debug.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/dist/source-map.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/dist/source-map.min.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/array-set.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/base64-vlq.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/base64.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/binary-search.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/mapping-list.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/quick-sort.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/source-map-consumer.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/source-map-generator.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/source-node.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/source-map-support/node_modules/source-map/lib/util.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/pluginutils/node_modules/@types/estree/index.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/pluginutils/node_modules/estree-walker/dist/estree-walker.umd.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/pluginutils/node_modules/estree-walker/src/estree-walker.js",
      "declarations": [
        {
          "kind": "function",
          "name": "walk",
          "parameters": [
            {
              "name": "ast"
            },
            {
              "name": "{ enter, leave }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "walk",
          "declaration": {
            "name": "walk",
            "module": "demo/node_modules/@rollup/pluginutils/node_modules/estree-walker/src/estree-walker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/pluginutils/node_modules/estree-walker/src/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "walk",
          "parameters": [
            {
              "name": "ast",
              "type": {
                "text": "BaseNode"
              }
            },
            {
              "name": "{ enter, leave }",
              "type": {
                "text": "Walker"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "walk",
          "declaration": {
            "name": "walk",
            "module": "demo/node_modules/@rollup/pluginutils/node_modules/estree-walker/src/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/@rollup/pluginutils/node_modules/estree-walker/types/index.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "walk",
          "return": {
            "type": {
              "text": "BaseNode"
            }
          },
          "parameters": [
            {
              "name": "ast",
              "type": {
                "text": "BaseNode"
              }
            },
            {
              "name": "{ enter, leave }",
              "type": {
                "text": "Walker"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "walk",
          "declaration": {
            "name": "walk",
            "module": "demo/node_modules/@rollup/pluginutils/node_modules/estree-walker/types/index.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/module_dir/xmodules/aaa/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/module_dir/ymodules/aaa/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/node_path/x/aaa/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/node_path/x/ccc/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/module_dir/zmodules/bbb/main.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/node_path/y/bbb/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/node_path/y/ccc/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/nested_symlinks/mylib/async.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/nested_symlinks/mylib/sync.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/other_path/lib/other-lib.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/quux/foo/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/same_names/foo/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/symlinked/package/bar.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/shadowed_core/node_modules/util/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/multirepo/packages/package-a/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/multirepo/packages/package-b/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/node_modules/resolve/test/resolver/symlinked/_/node_modules/foo.js",
      "declarations": [],
      "exports": []
    }
  ]
}
